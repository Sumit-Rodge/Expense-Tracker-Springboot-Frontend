{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WaitingForSuitableServerEvent = exports.ServerSelectionSucceededEvent = exports.ServerSelectionFailedEvent = exports.ServerSelectionStartedEvent = exports.ServerSelectionEvent = void 0;\nconst utils_1 = require(\".././utils\");\nconst constants_1 = require(\"../constants\");\n/**\r\n * The base export class for all logs published from server selection\r\n * @internal\r\n * @category Log Type\r\n */\nclass ServerSelectionEvent {\n  /** @internal */\n  constructor(selector, topologyDescription, operation) {\n    this.selector = selector;\n    this.operation = operation;\n    this.topologyDescription = topologyDescription;\n  }\n}\nexports.ServerSelectionEvent = ServerSelectionEvent;\n/**\r\n * An event published when server selection starts\r\n * @internal\r\n * @category Event\r\n */\nclass ServerSelectionStartedEvent extends ServerSelectionEvent {\n  /** @internal */\n  constructor(selector, topologyDescription, operation) {\n    super(selector, topologyDescription, operation);\n    /** @internal */\n    this.name = constants_1.SERVER_SELECTION_STARTED;\n    this.message = 'Server selection started';\n  }\n}\nexports.ServerSelectionStartedEvent = ServerSelectionStartedEvent;\n/**\r\n * An event published when a server selection fails\r\n * @internal\r\n * @category Event\r\n */\nclass ServerSelectionFailedEvent extends ServerSelectionEvent {\n  /** @internal */\n  constructor(selector, topologyDescription, error, operation) {\n    super(selector, topologyDescription, operation);\n    /** @internal */\n    this.name = constants_1.SERVER_SELECTION_FAILED;\n    this.message = 'Server selection failed';\n    this.failure = error;\n  }\n}\nexports.ServerSelectionFailedEvent = ServerSelectionFailedEvent;\n/**\r\n * An event published when server selection succeeds\r\n * @internal\r\n * @category Event\r\n */\nclass ServerSelectionSucceededEvent extends ServerSelectionEvent {\n  /** @internal */\n  constructor(selector, topologyDescription, address, operation) {\n    super(selector, topologyDescription, operation);\n    /** @internal */\n    this.name = constants_1.SERVER_SELECTION_SUCCEEDED;\n    this.message = 'Server selection succeeded';\n    const {\n      host,\n      port\n    } = utils_1.HostAddress.fromString(address).toHostPort();\n    this.serverHost = host;\n    this.serverPort = port;\n  }\n}\nexports.ServerSelectionSucceededEvent = ServerSelectionSucceededEvent;\n/**\r\n * An event published when server selection is waiting for a suitable server to become available\r\n * @internal\r\n * @category Event\r\n */\nclass WaitingForSuitableServerEvent extends ServerSelectionEvent {\n  /** @internal */\n  constructor(selector, topologyDescription, remainingTimeMS, operation) {\n    super(selector, topologyDescription, operation);\n    /** @internal */\n    this.name = constants_1.WAITING_FOR_SUITABLE_SERVER;\n    this.message = 'Waiting for suitable server to become available';\n    this.remainingTimeMS = remainingTimeMS;\n  }\n}\nexports.WaitingForSuitableServerEvent = WaitingForSuitableServerEvent;","map":{"version":3,"names":["utils_1","require","constants_1","ServerSelectionEvent","constructor","selector","topologyDescription","operation","exports","ServerSelectionStartedEvent","name","SERVER_SELECTION_STARTED","message","ServerSelectionFailedEvent","error","SERVER_SELECTION_FAILED","failure","ServerSelectionSucceededEvent","address","SERVER_SELECTION_SUCCEEDED","host","port","HostAddress","fromString","toHostPort","serverHost","serverPort","WaitingForSuitableServerEvent","remainingTimeMS","WAITING_FOR_SUITABLE_SERVER"],"sources":["C:\\Users\\sumit\\Desktop\\Final project\\Expense-Tracker-Springboot-Frontend\\node_modules\\mongodb\\src\\sdam\\server_selection_events.ts"],"sourcesContent":["import { HostAddress } from '.././utils';\r\nimport {\r\n  SERVER_SELECTION_FAILED,\r\n  SERVER_SELECTION_STARTED,\r\n  SERVER_SELECTION_SUCCEEDED,\r\n  WAITING_FOR_SUITABLE_SERVER\r\n} from '../constants';\r\nimport { type ReadPreference } from '../read_preference';\r\nimport { type ServerSelector } from './server_selection';\r\nimport type { TopologyDescription } from './topology_description';\r\n\r\n/**\r\n * The base export class for all logs published from server selection\r\n * @internal\r\n * @category Log Type\r\n */\r\nexport abstract class ServerSelectionEvent {\r\n  /** String representation of the selector being used to select the server.\r\n   *  Defaults to 'custom selector' for application-provided custom selector case.\r\n   */\r\n  selector: string | ReadPreference | ServerSelector;\r\n  /** The name of the operation for which a server is being selected.  */\r\n  operation: string;\r\n  /** \tThe current topology description.  */\r\n  topologyDescription: TopologyDescription;\r\n\r\n  /** @internal */\r\n  abstract name:\r\n    | typeof SERVER_SELECTION_STARTED\r\n    | typeof SERVER_SELECTION_SUCCEEDED\r\n    | typeof SERVER_SELECTION_FAILED\r\n    | typeof WAITING_FOR_SUITABLE_SERVER;\r\n\r\n  abstract message: string;\r\n\r\n  /** @internal */\r\n  constructor(\r\n    selector: string | ReadPreference | ServerSelector,\r\n    topologyDescription: TopologyDescription,\r\n    operation: string\r\n  ) {\r\n    this.selector = selector;\r\n    this.operation = operation;\r\n    this.topologyDescription = topologyDescription;\r\n  }\r\n}\r\n\r\n/**\r\n * An event published when server selection starts\r\n * @internal\r\n * @category Event\r\n */\r\nexport class ServerSelectionStartedEvent extends ServerSelectionEvent {\r\n  /** @internal */\r\n  name = SERVER_SELECTION_STARTED;\r\n  message = 'Server selection started';\r\n\r\n  /** @internal */\r\n  constructor(\r\n    selector: string | ReadPreference | ServerSelector,\r\n    topologyDescription: TopologyDescription,\r\n    operation: string\r\n  ) {\r\n    super(selector, topologyDescription, operation);\r\n  }\r\n}\r\n\r\n/**\r\n * An event published when a server selection fails\r\n * @internal\r\n * @category Event\r\n */\r\nexport class ServerSelectionFailedEvent extends ServerSelectionEvent {\r\n  /** @internal */\r\n  name = SERVER_SELECTION_FAILED;\r\n  message = 'Server selection failed';\r\n  /** Representation of the error the driver will throw regarding server selection failing. */\r\n  failure: Error;\r\n\r\n  /** @internal */\r\n  constructor(\r\n    selector: string | ReadPreference | ServerSelector,\r\n    topologyDescription: TopologyDescription,\r\n    error: Error,\r\n    operation: string\r\n  ) {\r\n    super(selector, topologyDescription, operation);\r\n    this.failure = error;\r\n  }\r\n}\r\n\r\n/**\r\n * An event published when server selection succeeds\r\n * @internal\r\n * @category Event\r\n */\r\nexport class ServerSelectionSucceededEvent extends ServerSelectionEvent {\r\n  /** @internal */\r\n  name = SERVER_SELECTION_SUCCEEDED;\r\n  message = 'Server selection succeeded';\r\n  /** \tThe hostname, IP address, or Unix domain socket path for the selected server. */\r\n  serverHost: string;\r\n  /** The port for the selected server. Optional; not present for Unix domain sockets. When the user does not specify a port and the default (27017) is used, the driver SHOULD include it here. */\r\n  serverPort: number | undefined;\r\n\r\n  /** @internal */\r\n  constructor(\r\n    selector: string | ReadPreference | ServerSelector,\r\n    topologyDescription: TopologyDescription,\r\n    address: string,\r\n    operation: string\r\n  ) {\r\n    super(selector, topologyDescription, operation);\r\n    const { host, port } = HostAddress.fromString(address).toHostPort();\r\n    this.serverHost = host;\r\n    this.serverPort = port;\r\n  }\r\n}\r\n\r\n/**\r\n * An event published when server selection is waiting for a suitable server to become available\r\n * @internal\r\n * @category Event\r\n */\r\nexport class WaitingForSuitableServerEvent extends ServerSelectionEvent {\r\n  /** @internal */\r\n  name = WAITING_FOR_SUITABLE_SERVER;\r\n  message = 'Waiting for suitable server to become available';\r\n  /** The remaining time left until server selection will time out. */\r\n  remainingTimeMS: number;\r\n\r\n  /** @internal */\r\n  constructor(\r\n    selector: string | ReadPreference | ServerSelector,\r\n    topologyDescription: TopologyDescription,\r\n    remainingTimeMS: number,\r\n    operation: string\r\n  ) {\r\n    super(selector, topologyDescription, operation);\r\n    this.remainingTimeMS = remainingTimeMS;\r\n  }\r\n}\r\n"],"mappings":";;;;;;AAAA,MAAAA,OAAA,GAAAC,OAAA;AACA,MAAAC,WAAA,GAAAD,OAAA;AAUA;;;;;AAKA,MAAsBE,oBAAoB;EAmBxC;EACAC,YACEC,QAAkD,EAClDC,mBAAwC,EACxCC,SAAiB;IAEjB,IAAI,CAACF,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACE,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACD,mBAAmB,GAAGA,mBAAmB;EAChD;;AA5BFE,OAAA,CAAAL,oBAAA,GAAAA,oBAAA;AA+BA;;;;;AAKA,MAAaM,2BAA4B,SAAQN,oBAAoB;EAKnE;EACAC,YACEC,QAAkD,EAClDC,mBAAwC,EACxCC,SAAiB;IAEjB,KAAK,CAACF,QAAQ,EAAEC,mBAAmB,EAAEC,SAAS,CAAC;IAVjD;IACA,KAAAG,IAAI,GAAGR,WAAA,CAAAS,wBAAwB;IAC/B,KAAAC,OAAO,GAAG,0BAA0B;EASpC;;AAZFJ,OAAA,CAAAC,2BAAA,GAAAA,2BAAA;AAeA;;;;;AAKA,MAAaI,0BAA2B,SAAQV,oBAAoB;EAOlE;EACAC,YACEC,QAAkD,EAClDC,mBAAwC,EACxCQ,KAAY,EACZP,SAAiB;IAEjB,KAAK,CAACF,QAAQ,EAAEC,mBAAmB,EAAEC,SAAS,CAAC;IAbjD;IACA,KAAAG,IAAI,GAAGR,WAAA,CAAAa,uBAAuB;IAC9B,KAAAH,OAAO,GAAG,yBAAyB;IAYjC,IAAI,CAACI,OAAO,GAAGF,KAAK;EACtB;;AAhBFN,OAAA,CAAAK,0BAAA,GAAAA,0BAAA;AAmBA;;;;;AAKA,MAAaI,6BAA8B,SAAQd,oBAAoB;EASrE;EACAC,YACEC,QAAkD,EAClDC,mBAAwC,EACxCY,OAAe,EACfX,SAAiB;IAEjB,KAAK,CAACF,QAAQ,EAAEC,mBAAmB,EAAEC,SAAS,CAAC;IAfjD;IACA,KAAAG,IAAI,GAAGR,WAAA,CAAAiB,0BAA0B;IACjC,KAAAP,OAAO,GAAG,4BAA4B;IAcpC,MAAM;MAAEQ,IAAI;MAAEC;IAAI,CAAE,GAAGrB,OAAA,CAAAsB,WAAW,CAACC,UAAU,CAACL,OAAO,CAAC,CAACM,UAAU,EAAE;IACnE,IAAI,CAACC,UAAU,GAAGL,IAAI;IACtB,IAAI,CAACM,UAAU,GAAGL,IAAI;EACxB;;AApBFb,OAAA,CAAAS,6BAAA,GAAAA,6BAAA;AAuBA;;;;;AAKA,MAAaU,6BAA8B,SAAQxB,oBAAoB;EAOrE;EACAC,YACEC,QAAkD,EAClDC,mBAAwC,EACxCsB,eAAuB,EACvBrB,SAAiB;IAEjB,KAAK,CAACF,QAAQ,EAAEC,mBAAmB,EAAEC,SAAS,CAAC;IAbjD;IACA,KAAAG,IAAI,GAAGR,WAAA,CAAA2B,2BAA2B;IAClC,KAAAjB,OAAO,GAAG,iDAAiD;IAYzD,IAAI,CAACgB,eAAe,GAAGA,eAAe;EACxC;;AAhBFpB,OAAA,CAAAmB,6BAAA,GAAAA,6BAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}