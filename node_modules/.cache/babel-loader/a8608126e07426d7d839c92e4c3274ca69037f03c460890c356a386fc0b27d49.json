{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EstimatedDocumentCountOperation = void 0;\nconst command_1 = require(\"./command\");\nconst operation_1 = require(\"./operation\");\n/** @internal */\nclass EstimatedDocumentCountOperation extends command_1.CommandOperation {\n  constructor(collection, options = {}) {\n    super(collection, options);\n    this.options = options;\n    this.collectionName = collection.collectionName;\n  }\n  get commandName() {\n    return 'count';\n  }\n  async execute(server, session) {\n    const cmd = {\n      count: this.collectionName\n    };\n    if (typeof this.options.maxTimeMS === 'number') {\n      cmd.maxTimeMS = this.options.maxTimeMS;\n    }\n    // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n    if (this.options.comment !== undefined) {\n      cmd.comment = this.options.comment;\n    }\n    const response = await super.executeCommand(server, session, cmd);\n    return response?.n || 0;\n  }\n}\nexports.EstimatedDocumentCountOperation = EstimatedDocumentCountOperation;\n(0, operation_1.defineAspects)(EstimatedDocumentCountOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.RETRYABLE, operation_1.Aspect.CURSOR_CREATING]);","map":{"version":3,"names":["command_1","require","operation_1","EstimatedDocumentCountOperation","CommandOperation","constructor","collection","options","collectionName","commandName","execute","server","session","cmd","count","maxTimeMS","comment","undefined","response","executeCommand","n","exports","defineAspects","Aspect","READ_OPERATION","RETRYABLE","CURSOR_CREATING"],"sources":["C:\\Users\\sumit\\Desktop\\Final project\\Expense-Tracker-Springboot-Frontend\\node_modules\\mongodb\\src\\operations\\estimated_document_count.ts"],"sourcesContent":["import type { Document } from '../bson';\r\nimport type { Collection } from '../collection';\r\nimport type { Server } from '../sdam/server';\r\nimport type { ClientSession } from '../sessions';\r\nimport { CommandOperation, type CommandOperationOptions } from './command';\r\nimport { Aspect, defineAspects } from './operation';\r\n\r\n/** @public */\r\nexport interface EstimatedDocumentCountOptions extends CommandOperationOptions {\r\n  /**\r\n   * The maximum amount of time to allow the operation to run.\r\n   *\r\n   * This option is sent only if the caller explicitly provides a value. The default is to not send a value.\r\n   */\r\n  maxTimeMS?: number;\r\n}\r\n\r\n/** @internal */\r\nexport class EstimatedDocumentCountOperation extends CommandOperation<number> {\r\n  override options: EstimatedDocumentCountOptions;\r\n  collectionName: string;\r\n\r\n  constructor(collection: Collection, options: EstimatedDocumentCountOptions = {}) {\r\n    super(collection, options);\r\n    this.options = options;\r\n    this.collectionName = collection.collectionName;\r\n  }\r\n\r\n  override get commandName() {\r\n    return 'count' as const;\r\n  }\r\n\r\n  override async execute(server: Server, session: ClientSession | undefined): Promise<number> {\r\n    const cmd: Document = { count: this.collectionName };\r\n\r\n    if (typeof this.options.maxTimeMS === 'number') {\r\n      cmd.maxTimeMS = this.options.maxTimeMS;\r\n    }\r\n\r\n    // we check for undefined specifically here to allow falsy values\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    if (this.options.comment !== undefined) {\r\n      cmd.comment = this.options.comment;\r\n    }\r\n\r\n    const response = await super.executeCommand(server, session, cmd);\r\n\r\n    return response?.n || 0;\r\n  }\r\n}\r\n\r\ndefineAspects(EstimatedDocumentCountOperation, [\r\n  Aspect.READ_OPERATION,\r\n  Aspect.RETRYABLE,\r\n  Aspect.CURSOR_CREATING\r\n]);\r\n"],"mappings":";;;;;;AAIA,MAAAA,SAAA,GAAAC,OAAA;AACA,MAAAC,WAAA,GAAAD,OAAA;AAYA;AACA,MAAaE,+BAAgC,SAAQH,SAAA,CAAAI,gBAAwB;EAI3EC,YAAYC,UAAsB,EAAEC,OAAA,GAAyC,EAAE;IAC7E,KAAK,CAACD,UAAU,EAAEC,OAAO,CAAC;IAC1B,IAAI,CAACA,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,cAAc,GAAGF,UAAU,CAACE,cAAc;EACjD;EAEA,IAAaC,WAAWA,CAAA;IACtB,OAAO,OAAgB;EACzB;EAES,MAAMC,OAAOA,CAACC,MAAc,EAAEC,OAAkC;IACvE,MAAMC,GAAG,GAAa;MAAEC,KAAK,EAAE,IAAI,CAACN;IAAc,CAAE;IAEpD,IAAI,OAAO,IAAI,CAACD,OAAO,CAACQ,SAAS,KAAK,QAAQ,EAAE;MAC9CF,GAAG,CAACE,SAAS,GAAG,IAAI,CAACR,OAAO,CAACQ,SAAS;;IAGxC;IACA;IACA,IAAI,IAAI,CAACR,OAAO,CAACS,OAAO,KAAKC,SAAS,EAAE;MACtCJ,GAAG,CAACG,OAAO,GAAG,IAAI,CAACT,OAAO,CAACS,OAAO;;IAGpC,MAAME,QAAQ,GAAG,MAAM,KAAK,CAACC,cAAc,CAACR,MAAM,EAAEC,OAAO,EAAEC,GAAG,CAAC;IAEjE,OAAOK,QAAQ,EAAEE,CAAC,IAAI,CAAC;EACzB;;AA9BFC,OAAA,CAAAlB,+BAAA,GAAAA,+BAAA;AAiCA,IAAAD,WAAA,CAAAoB,aAAa,EAACnB,+BAA+B,EAAE,CAC7CD,WAAA,CAAAqB,MAAM,CAACC,cAAc,EACrBtB,WAAA,CAAAqB,MAAM,CAACE,SAAS,EAChBvB,WAAA,CAAAqB,MAAM,CAACG,eAAe,CACvB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}