{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ServerCapabilities = exports.Topology = void 0;\nconst util_1 = require(\"util\");\nconst connection_string_1 = require(\"../connection_string\");\nconst constants_1 = require(\"../constants\");\nconst error_1 = require(\"../error\");\nconst mongo_logger_1 = require(\"../mongo_logger\");\nconst mongo_types_1 = require(\"../mongo_types\");\nconst read_preference_1 = require(\"../read_preference\");\nconst utils_1 = require(\"../utils\");\nconst common_1 = require(\"./common\");\nconst events_1 = require(\"./events\");\nconst server_1 = require(\"./server\");\nconst server_description_1 = require(\"./server_description\");\nconst server_selection_1 = require(\"./server_selection\");\nconst server_selection_events_1 = require(\"./server_selection_events\");\nconst srv_polling_1 = require(\"./srv_polling\");\nconst topology_description_1 = require(\"./topology_description\");\n// Global state\nlet globalTopologyCounter = 0;\nconst stateTransition = (0, utils_1.makeStateMachine)({\n  [common_1.STATE_CLOSED]: [common_1.STATE_CLOSED, common_1.STATE_CONNECTING],\n  [common_1.STATE_CONNECTING]: [common_1.STATE_CONNECTING, common_1.STATE_CLOSING, common_1.STATE_CONNECTED, common_1.STATE_CLOSED],\n  [common_1.STATE_CONNECTED]: [common_1.STATE_CONNECTED, common_1.STATE_CLOSING, common_1.STATE_CLOSED],\n  [common_1.STATE_CLOSING]: [common_1.STATE_CLOSING, common_1.STATE_CLOSED]\n});\n/** @internal */\nconst kCancelled = Symbol('cancelled');\n/** @internal */\nconst kWaitQueue = Symbol('waitQueue');\n/**\r\n * A container of server instances representing a connection to a MongoDB topology.\r\n * @internal\r\n */\nclass Topology extends mongo_types_1.TypedEventEmitter {\n  /**\r\n   * @param seedlist - a list of HostAddress instances to connect to\r\n   */\n  constructor(client, seeds, options) {\n    super();\n    this.client = client;\n    this.selectServerAsync = (0, util_1.promisify)((selector, options, callback) => this.selectServer(selector, options, callback));\n    // Options should only be undefined in tests, MongoClient will always have defined options\n    options = options ?? {\n      hosts: [utils_1.HostAddress.fromString('localhost:27017')],\n      ...Object.fromEntries(connection_string_1.DEFAULT_OPTIONS.entries()),\n      ...Object.fromEntries(connection_string_1.FEATURE_FLAGS.entries())\n    };\n    if (typeof seeds === 'string') {\n      seeds = [utils_1.HostAddress.fromString(seeds)];\n    } else if (!Array.isArray(seeds)) {\n      seeds = [seeds];\n    }\n    const seedlist = [];\n    for (const seed of seeds) {\n      if (typeof seed === 'string') {\n        seedlist.push(utils_1.HostAddress.fromString(seed));\n      } else if (seed instanceof utils_1.HostAddress) {\n        seedlist.push(seed);\n      } else {\n        // FIXME(NODE-3483): May need to be a MongoParseError\n        throw new error_1.MongoRuntimeError(`Topology cannot be constructed from ${JSON.stringify(seed)}`);\n      }\n    }\n    const topologyType = topologyTypeFromOptions(options);\n    const topologyId = globalTopologyCounter++;\n    const selectedHosts = options.srvMaxHosts == null || options.srvMaxHosts === 0 || options.srvMaxHosts >= seedlist.length ? seedlist : (0, utils_1.shuffle)(seedlist, options.srvMaxHosts);\n    const serverDescriptions = new Map();\n    for (const hostAddress of selectedHosts) {\n      serverDescriptions.set(hostAddress.toString(), new server_description_1.ServerDescription(hostAddress));\n    }\n    this[kWaitQueue] = new utils_1.List();\n    this.s = {\n      // the id of this topology\n      id: topologyId,\n      // passed in options\n      options,\n      // initial seedlist of servers to connect to\n      seedlist,\n      // initial state\n      state: common_1.STATE_CLOSED,\n      // the topology description\n      description: new topology_description_1.TopologyDescription(topologyType, serverDescriptions, options.replicaSet, undefined, undefined, undefined, options),\n      serverSelectionTimeoutMS: options.serverSelectionTimeoutMS,\n      heartbeatFrequencyMS: options.heartbeatFrequencyMS,\n      minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS,\n      // a map of server instances to normalized addresses\n      servers: new Map(),\n      credentials: options?.credentials,\n      clusterTime: undefined,\n      // timer management\n      connectionTimers: new Set(),\n      detectShardedTopology: ev => this.detectShardedTopology(ev),\n      detectSrvRecords: ev => this.detectSrvRecords(ev)\n    };\n    this.mongoLogger = client.mongoLogger;\n    this.component = 'topology';\n    if (options.srvHost && !options.loadBalanced) {\n      this.s.srvPoller = options.srvPoller ?? new srv_polling_1.SrvPoller({\n        heartbeatFrequencyMS: this.s.heartbeatFrequencyMS,\n        srvHost: options.srvHost,\n        srvMaxHosts: options.srvMaxHosts,\n        srvServiceName: options.srvServiceName\n      });\n      this.on(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n    }\n  }\n  detectShardedTopology(event) {\n    const previousType = event.previousDescription.type;\n    const newType = event.newDescription.type;\n    const transitionToSharded = previousType !== common_1.TopologyType.Sharded && newType === common_1.TopologyType.Sharded;\n    const srvListeners = this.s.srvPoller?.listeners(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY);\n    const listeningToSrvPolling = !!srvListeners?.includes(this.s.detectSrvRecords);\n    if (transitionToSharded && !listeningToSrvPolling) {\n      this.s.srvPoller?.on(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n      this.s.srvPoller?.start();\n    }\n  }\n  detectSrvRecords(ev) {\n    const previousTopologyDescription = this.s.description;\n    this.s.description = this.s.description.updateFromSrvPollingEvent(ev, this.s.options.srvMaxHosts);\n    if (this.s.description === previousTopologyDescription) {\n      // Nothing changed, so return\n      return;\n    }\n    updateServers(this);\n    this.emitAndLog(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, previousTopologyDescription, this.s.description));\n  }\n  /**\r\n   * @returns A `TopologyDescription` for this topology\r\n   */\n  get description() {\n    return this.s.description;\n  }\n  get loadBalanced() {\n    return this.s.options.loadBalanced;\n  }\n  get serverApi() {\n    return this.s.options.serverApi;\n  }\n  get capabilities() {\n    return new ServerCapabilities(this.lastHello());\n  }\n  connect(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options ?? {};\n    if (this.s.state === common_1.STATE_CONNECTED) {\n      if (typeof callback === 'function') {\n        callback();\n      }\n      return;\n    }\n    stateTransition(this, common_1.STATE_CONNECTING);\n    // emit SDAM monitoring events\n    this.emitAndLog(Topology.TOPOLOGY_OPENING, new events_1.TopologyOpeningEvent(this.s.id));\n    // emit an event for the topology change\n    this.emitAndLog(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, new topology_description_1.TopologyDescription(common_1.TopologyType.Unknown),\n    // initial is always Unknown\n    this.s.description));\n    // connect all known servers, then attempt server selection to connect\n    const serverDescriptions = Array.from(this.s.description.servers.values());\n    this.s.servers = new Map(serverDescriptions.map(serverDescription => [serverDescription.address, createAndConnectServer(this, serverDescription)]));\n    // In load balancer mode we need to fake a server description getting\n    // emitted from the monitor, since the monitor doesn't exist.\n    if (this.s.options.loadBalanced) {\n      for (const description of serverDescriptions) {\n        const newDescription = new server_description_1.ServerDescription(description.hostAddress, undefined, {\n          loadBalanced: this.s.options.loadBalanced\n        });\n        this.serverUpdateHandler(newDescription);\n      }\n    }\n    const exitWithError = error => callback ? callback(error) : this.emit(Topology.ERROR, error);\n    const readPreference = options.readPreference ?? read_preference_1.ReadPreference.primary;\n    const selectServerOptions = {\n      operationName: 'ping',\n      ...options\n    };\n    this.selectServer((0, server_selection_1.readPreferenceServerSelector)(readPreference), selectServerOptions, (err, server) => {\n      if (err) {\n        return this.close({\n          force: false\n        }, () => exitWithError(err));\n      }\n      const skipPingOnConnect = this.s.options[Symbol.for('@@mdb.skipPingOnConnect')] === true;\n      if (!skipPingOnConnect && server && this.s.credentials) {\n        server.command((0, utils_1.ns)('admin.$cmd'), {\n          ping: 1\n        }, {}).then(() => {\n          stateTransition(this, common_1.STATE_CONNECTED);\n          this.emit(Topology.OPEN, this);\n          this.emit(Topology.CONNECT, this);\n          callback?.(undefined, this);\n        }, exitWithError);\n        return;\n      }\n      stateTransition(this, common_1.STATE_CONNECTED);\n      this.emit(Topology.OPEN, this);\n      this.emit(Topology.CONNECT, this);\n      callback?.(undefined, this);\n    });\n  }\n  close(options, callback) {\n    options = options ?? {\n      force: false\n    };\n    if (this.s.state === common_1.STATE_CLOSED || this.s.state === common_1.STATE_CLOSING) {\n      return callback?.();\n    }\n    const destroyedServers = Array.from(this.s.servers.values(), server => {\n      return (0, util_1.promisify)(destroyServer)(server, this, {\n        force: !!options?.force\n      });\n    });\n    Promise.all(destroyedServers).then(() => {\n      this.s.servers.clear();\n      stateTransition(this, common_1.STATE_CLOSING);\n      drainWaitQueue(this[kWaitQueue], new error_1.MongoTopologyClosedError());\n      (0, common_1.drainTimerQueue)(this.s.connectionTimers);\n      if (this.s.srvPoller) {\n        this.s.srvPoller.stop();\n        this.s.srvPoller.removeListener(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n      }\n      this.removeListener(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n      stateTransition(this, common_1.STATE_CLOSED);\n      // emit an event for close\n      this.emitAndLog(Topology.TOPOLOGY_CLOSED, new events_1.TopologyClosedEvent(this.s.id));\n    }).finally(() => callback?.());\n  }\n  /**\r\n   * Selects a server according to the selection predicate provided\r\n   *\r\n   * @param selector - An optional selector to select servers by, defaults to a random selection within a latency window\r\n   * @param options - Optional settings related to server selection\r\n   * @param callback - The callback used to indicate success or failure\r\n   * @returns An instance of a `Server` meeting the criteria of the predicate provided\r\n   */\n  selectServer(selector, options, callback) {\n    let serverSelector;\n    if (typeof selector !== 'function') {\n      if (typeof selector === 'string') {\n        serverSelector = (0, server_selection_1.readPreferenceServerSelector)(read_preference_1.ReadPreference.fromString(selector));\n      } else {\n        let readPreference;\n        if (selector instanceof read_preference_1.ReadPreference) {\n          readPreference = selector;\n        } else {\n          read_preference_1.ReadPreference.translate(options);\n          readPreference = options.readPreference || read_preference_1.ReadPreference.primary;\n        }\n        serverSelector = (0, server_selection_1.readPreferenceServerSelector)(readPreference);\n      }\n    } else {\n      serverSelector = selector;\n    }\n    options = {\n      serverSelectionTimeoutMS: this.s.serverSelectionTimeoutMS,\n      ...options\n    };\n    if (this.client.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n      this.client.mongoLogger?.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionStartedEvent(selector, this.description, options.operationName));\n    }\n    const isSharded = this.description.type === common_1.TopologyType.Sharded;\n    const session = options.session;\n    const transaction = session && session.transaction;\n    if (isSharded && transaction && transaction.server) {\n      if (this.client.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n        this.client.mongoLogger?.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionSucceededEvent(selector, this.description, transaction.server.pool.address, options.operationName));\n      }\n      callback(undefined, transaction.server);\n      return;\n    }\n    const waitQueueMember = {\n      serverSelector,\n      topologyDescription: this.description,\n      mongoLogger: this.client.mongoLogger,\n      transaction,\n      callback,\n      timeoutController: new utils_1.TimeoutController(options.serverSelectionTimeoutMS),\n      startTime: (0, utils_1.now)(),\n      operationName: options.operationName,\n      waitingLogged: false,\n      previousServer: options.previousServer\n    };\n    waitQueueMember.timeoutController.signal.addEventListener('abort', () => {\n      waitQueueMember[kCancelled] = true;\n      waitQueueMember.timeoutController.clear();\n      const timeoutError = new error_1.MongoServerSelectionError(`Server selection timed out after ${options.serverSelectionTimeoutMS} ms`, this.description);\n      if (this.client.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n        this.client.mongoLogger?.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionFailedEvent(selector, this.description, timeoutError, options.operationName));\n      }\n      waitQueueMember.callback(timeoutError);\n    });\n    this[kWaitQueue].push(waitQueueMember);\n    processWaitQueue(this);\n  }\n  /**\r\n   * Update the internal TopologyDescription with a ServerDescription\r\n   *\r\n   * @param serverDescription - The server to update in the internal list of server descriptions\r\n   */\n  serverUpdateHandler(serverDescription) {\n    if (!this.s.description.hasServer(serverDescription.address)) {\n      return;\n    }\n    // ignore this server update if its from an outdated topologyVersion\n    if (isStaleServerDescription(this.s.description, serverDescription)) {\n      return;\n    }\n    // these will be used for monitoring events later\n    const previousTopologyDescription = this.s.description;\n    const previousServerDescription = this.s.description.servers.get(serverDescription.address);\n    if (!previousServerDescription) {\n      return;\n    }\n    // Driver Sessions Spec: \"Whenever a driver receives a cluster time from\n    // a server it MUST compare it to the current highest seen cluster time\n    // for the deployment. If the new cluster time is higher than the\n    // highest seen cluster time it MUST become the new highest seen cluster\n    // time. Two cluster times are compared using only the BsonTimestamp\n    // value of the clusterTime embedded field.\"\n    const clusterTime = serverDescription.$clusterTime;\n    if (clusterTime) {\n      (0, common_1._advanceClusterTime)(this, clusterTime);\n    }\n    // If we already know all the information contained in this updated description, then\n    // we don't need to emit SDAM events, but still need to update the description, in order\n    // to keep client-tracked attributes like last update time and round trip time up to date\n    const equalDescriptions = previousServerDescription && previousServerDescription.equals(serverDescription);\n    // first update the TopologyDescription\n    this.s.description = this.s.description.update(serverDescription);\n    if (this.s.description.compatibilityError) {\n      this.emit(Topology.ERROR, new error_1.MongoCompatibilityError(this.s.description.compatibilityError));\n      return;\n    }\n    // emit monitoring events for this change\n    if (!equalDescriptions) {\n      const newDescription = this.s.description.servers.get(serverDescription.address);\n      if (newDescription) {\n        this.emit(Topology.SERVER_DESCRIPTION_CHANGED, new events_1.ServerDescriptionChangedEvent(this.s.id, serverDescription.address, previousServerDescription, newDescription));\n      }\n    }\n    // update server list from updated descriptions\n    updateServers(this, serverDescription);\n    // attempt to resolve any outstanding server selection attempts\n    if (this[kWaitQueue].length > 0) {\n      processWaitQueue(this);\n    }\n    if (!equalDescriptions) {\n      this.emitAndLog(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, previousTopologyDescription, this.s.description));\n    }\n  }\n  auth(credentials, callback) {\n    if (typeof credentials === 'function') callback = credentials, credentials = undefined;\n    if (typeof callback === 'function') callback(undefined, true);\n  }\n  get clientMetadata() {\n    return this.s.options.metadata;\n  }\n  isConnected() {\n    return this.s.state === common_1.STATE_CONNECTED;\n  }\n  isDestroyed() {\n    return this.s.state === common_1.STATE_CLOSED;\n  }\n  // NOTE: There are many places in code where we explicitly check the last hello\n  //       to do feature support detection. This should be done any other way, but for\n  //       now we will just return the first hello seen, which should suffice.\n  lastHello() {\n    const serverDescriptions = Array.from(this.description.servers.values());\n    if (serverDescriptions.length === 0) return {};\n    const sd = serverDescriptions.filter(sd => sd.type !== common_1.ServerType.Unknown)[0];\n    const result = sd || {\n      maxWireVersion: this.description.commonWireVersion\n    };\n    return result;\n  }\n  get commonWireVersion() {\n    return this.description.commonWireVersion;\n  }\n  get logicalSessionTimeoutMinutes() {\n    return this.description.logicalSessionTimeoutMinutes;\n  }\n  get clusterTime() {\n    return this.s.clusterTime;\n  }\n  set clusterTime(clusterTime) {\n    this.s.clusterTime = clusterTime;\n  }\n}\n/** @event */\nTopology.SERVER_OPENING = constants_1.SERVER_OPENING;\n/** @event */\nTopology.SERVER_CLOSED = constants_1.SERVER_CLOSED;\n/** @event */\nTopology.SERVER_DESCRIPTION_CHANGED = constants_1.SERVER_DESCRIPTION_CHANGED;\n/** @event */\nTopology.TOPOLOGY_OPENING = constants_1.TOPOLOGY_OPENING;\n/** @event */\nTopology.TOPOLOGY_CLOSED = constants_1.TOPOLOGY_CLOSED;\n/** @event */\nTopology.TOPOLOGY_DESCRIPTION_CHANGED = constants_1.TOPOLOGY_DESCRIPTION_CHANGED;\n/** @event */\nTopology.ERROR = constants_1.ERROR;\n/** @event */\nTopology.OPEN = constants_1.OPEN;\n/** @event */\nTopology.CONNECT = constants_1.CONNECT;\n/** @event */\nTopology.CLOSE = constants_1.CLOSE;\n/** @event */\nTopology.TIMEOUT = constants_1.TIMEOUT;\nexports.Topology = Topology;\n/** Destroys a server, and removes all event listeners from the instance */\nfunction destroyServer(server, topology, options, callback) {\n  options = options ?? {\n    force: false\n  };\n  for (const event of constants_1.LOCAL_SERVER_EVENTS) {\n    server.removeAllListeners(event);\n  }\n  server.destroy(options, () => {\n    topology.emitAndLog(Topology.SERVER_CLOSED, new events_1.ServerClosedEvent(topology.s.id, server.description.address));\n    for (const event of constants_1.SERVER_RELAY_EVENTS) {\n      server.removeAllListeners(event);\n    }\n    if (typeof callback === 'function') {\n      callback();\n    }\n  });\n}\n/** Predicts the TopologyType from options */\nfunction topologyTypeFromOptions(options) {\n  if (options?.directConnection) {\n    return common_1.TopologyType.Single;\n  }\n  if (options?.replicaSet) {\n    return common_1.TopologyType.ReplicaSetNoPrimary;\n  }\n  if (options?.loadBalanced) {\n    return common_1.TopologyType.LoadBalanced;\n  }\n  return common_1.TopologyType.Unknown;\n}\n/**\r\n * Creates new server instances and attempts to connect them\r\n *\r\n * @param topology - The topology that this server belongs to\r\n * @param serverDescription - The description for the server to initialize and connect to\r\n */\nfunction createAndConnectServer(topology, serverDescription) {\n  topology.emitAndLog(Topology.SERVER_OPENING, new events_1.ServerOpeningEvent(topology.s.id, serverDescription.address));\n  const server = new server_1.Server(topology, serverDescription, topology.s.options);\n  for (const event of constants_1.SERVER_RELAY_EVENTS) {\n    server.on(event, e => topology.emit(event, e));\n  }\n  server.on(server_1.Server.DESCRIPTION_RECEIVED, description => topology.serverUpdateHandler(description));\n  server.connect();\n  return server;\n}\n/**\r\n * @param topology - Topology to update.\r\n * @param incomingServerDescription - New server description.\r\n */\nfunction updateServers(topology, incomingServerDescription) {\n  // update the internal server's description\n  if (incomingServerDescription && topology.s.servers.has(incomingServerDescription.address)) {\n    const server = topology.s.servers.get(incomingServerDescription.address);\n    if (server) {\n      server.s.description = incomingServerDescription;\n      if (incomingServerDescription.error instanceof error_1.MongoError && incomingServerDescription.error.hasErrorLabel(error_1.MongoErrorLabel.ResetPool)) {\n        const interruptInUseConnections = incomingServerDescription.error.hasErrorLabel(error_1.MongoErrorLabel.InterruptInUseConnections);\n        server.pool.clear({\n          interruptInUseConnections\n        });\n      } else if (incomingServerDescription.error == null) {\n        const newTopologyType = topology.s.description.type;\n        const shouldMarkPoolReady = incomingServerDescription.isDataBearing || incomingServerDescription.type !== common_1.ServerType.Unknown && newTopologyType === common_1.TopologyType.Single;\n        if (shouldMarkPoolReady) {\n          server.pool.ready();\n        }\n      }\n    }\n  }\n  // add new servers for all descriptions we currently don't know about locally\n  for (const serverDescription of topology.description.servers.values()) {\n    if (!topology.s.servers.has(serverDescription.address)) {\n      const server = createAndConnectServer(topology, serverDescription);\n      topology.s.servers.set(serverDescription.address, server);\n    }\n  }\n  // for all servers no longer known, remove their descriptions and destroy their instances\n  for (const entry of topology.s.servers) {\n    const serverAddress = entry[0];\n    if (topology.description.hasServer(serverAddress)) {\n      continue;\n    }\n    if (!topology.s.servers.has(serverAddress)) {\n      continue;\n    }\n    const server = topology.s.servers.get(serverAddress);\n    topology.s.servers.delete(serverAddress);\n    // prepare server for garbage collection\n    if (server) {\n      destroyServer(server, topology);\n    }\n  }\n}\nfunction drainWaitQueue(queue, err) {\n  while (queue.length) {\n    const waitQueueMember = queue.shift();\n    if (!waitQueueMember) {\n      continue;\n    }\n    waitQueueMember.timeoutController.clear();\n    if (!waitQueueMember[kCancelled]) {\n      if (err) {\n        if (waitQueueMember.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n          waitQueueMember.mongoLogger?.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionFailedEvent(waitQueueMember.serverSelector, waitQueueMember.topologyDescription, err, waitQueueMember.operationName));\n        }\n      }\n      waitQueueMember.callback(err);\n    }\n  }\n}\nfunction processWaitQueue(topology) {\n  if (topology.s.state === common_1.STATE_CLOSED) {\n    drainWaitQueue(topology[kWaitQueue], new error_1.MongoTopologyClosedError());\n    return;\n  }\n  const isSharded = topology.description.type === common_1.TopologyType.Sharded;\n  const serverDescriptions = Array.from(topology.description.servers.values());\n  const membersToProcess = topology[kWaitQueue].length;\n  for (let i = 0; i < membersToProcess; ++i) {\n    const waitQueueMember = topology[kWaitQueue].shift();\n    if (!waitQueueMember) {\n      continue;\n    }\n    if (waitQueueMember[kCancelled]) {\n      continue;\n    }\n    let selectedDescriptions;\n    try {\n      const serverSelector = waitQueueMember.serverSelector;\n      const previousServer = waitQueueMember.previousServer;\n      selectedDescriptions = serverSelector ? serverSelector(topology.description, serverDescriptions, previousServer ? [previousServer] : []) : serverDescriptions;\n    } catch (e) {\n      waitQueueMember.timeoutController.clear();\n      if (topology.client.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n        topology.client.mongoLogger?.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionFailedEvent(waitQueueMember.serverSelector, topology.description, e, waitQueueMember.operationName));\n      }\n      waitQueueMember.callback(e);\n      continue;\n    }\n    let selectedServer;\n    if (selectedDescriptions.length === 0) {\n      if (!waitQueueMember.waitingLogged) {\n        if (topology.client.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.INFORMATIONAL)) {\n          topology.client.mongoLogger?.info(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.WaitingForSuitableServerEvent(waitQueueMember.serverSelector, topology.description, topology.s.serverSelectionTimeoutMS !== 0 ? topology.s.serverSelectionTimeoutMS - ((0, utils_1.now)() - waitQueueMember.startTime) : -1, waitQueueMember.operationName));\n        }\n        waitQueueMember.waitingLogged = true;\n      }\n      topology[kWaitQueue].push(waitQueueMember);\n      continue;\n    } else if (selectedDescriptions.length === 1) {\n      selectedServer = topology.s.servers.get(selectedDescriptions[0].address);\n    } else {\n      const descriptions = (0, utils_1.shuffle)(selectedDescriptions, 2);\n      const server1 = topology.s.servers.get(descriptions[0].address);\n      const server2 = topology.s.servers.get(descriptions[1].address);\n      selectedServer = server1 && server2 && server1.s.operationCount < server2.s.operationCount ? server1 : server2;\n    }\n    if (!selectedServer) {\n      const error = new error_1.MongoServerSelectionError('server selection returned a server description but the server was not found in the topology', topology.description);\n      if (topology.client.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n        topology.client.mongoLogger?.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionFailedEvent(waitQueueMember.serverSelector, topology.description, error, waitQueueMember.operationName));\n      }\n      waitQueueMember.callback(error);\n      return;\n    }\n    const transaction = waitQueueMember.transaction;\n    if (isSharded && transaction && transaction.isActive && selectedServer) {\n      transaction.pinServer(selectedServer);\n    }\n    waitQueueMember.timeoutController.clear();\n    if (topology.client.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n      topology.client.mongoLogger?.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionSucceededEvent(waitQueueMember.serverSelector, waitQueueMember.topologyDescription, selectedServer.pool.address, waitQueueMember.operationName));\n    }\n    waitQueueMember.callback(undefined, selectedServer);\n  }\n  if (topology[kWaitQueue].length > 0) {\n    // ensure all server monitors attempt monitoring soon\n    for (const [, server] of topology.s.servers) {\n      process.nextTick(function scheduleServerCheck() {\n        return server.requestCheck();\n      });\n    }\n  }\n}\nfunction isStaleServerDescription(topologyDescription, incomingServerDescription) {\n  const currentServerDescription = topologyDescription.servers.get(incomingServerDescription.address);\n  const currentTopologyVersion = currentServerDescription?.topologyVersion;\n  return (0, server_description_1.compareTopologyVersion)(currentTopologyVersion, incomingServerDescription.topologyVersion) > 0;\n}\n/** @public */\nclass ServerCapabilities {\n  constructor(hello) {\n    this.minWireVersion = hello.minWireVersion || 0;\n    this.maxWireVersion = hello.maxWireVersion || 0;\n  }\n  get hasAggregationCursor() {\n    return this.maxWireVersion >= 1;\n  }\n  get hasWriteCommands() {\n    return this.maxWireVersion >= 2;\n  }\n  get hasTextSearch() {\n    return this.minWireVersion >= 0;\n  }\n  get hasAuthCommands() {\n    return this.maxWireVersion >= 1;\n  }\n  get hasListCollectionsCommand() {\n    return this.maxWireVersion >= 3;\n  }\n  get hasListIndexesCommand() {\n    return this.maxWireVersion >= 3;\n  }\n  get supportsSnapshotReads() {\n    return this.maxWireVersion >= 13;\n  }\n  get commandsTakeWriteConcern() {\n    return this.maxWireVersion >= 5;\n  }\n  get commandsTakeCollation() {\n    return this.maxWireVersion >= 5;\n  }\n}\nexports.ServerCapabilities = ServerCapabilities;","map":{"version":3,"names":["util_1","require","connection_string_1","constants_1","error_1","mongo_logger_1","mongo_types_1","read_preference_1","utils_1","common_1","events_1","server_1","server_description_1","server_selection_1","server_selection_events_1","srv_polling_1","topology_description_1","globalTopologyCounter","stateTransition","makeStateMachine","STATE_CLOSED","STATE_CONNECTING","STATE_CLOSING","STATE_CONNECTED","kCancelled","Symbol","kWaitQueue","Topology","TypedEventEmitter","constructor","client","seeds","options","selectServerAsync","promisify","selector","callback","selectServer","hosts","HostAddress","fromString","Object","fromEntries","DEFAULT_OPTIONS","entries","FEATURE_FLAGS","Array","isArray","seedlist","seed","push","MongoRuntimeError","JSON","stringify","topologyType","topologyTypeFromOptions","topologyId","selectedHosts","srvMaxHosts","length","shuffle","serverDescriptions","Map","hostAddress","set","toString","ServerDescription","List","s","id","state","description","TopologyDescription","replicaSet","undefined","serverSelectionTimeoutMS","heartbeatFrequencyMS","minHeartbeatFrequencyMS","servers","credentials","clusterTime","connectionTimers","Set","detectShardedTopology","ev","detectSrvRecords","mongoLogger","component","srvHost","loadBalanced","srvPoller","SrvPoller","srvServiceName","on","TOPOLOGY_DESCRIPTION_CHANGED","event","previousType","previousDescription","type","newType","newDescription","transitionToSharded","TopologyType","Sharded","srvListeners","listeners","SRV_RECORD_DISCOVERY","listeningToSrvPolling","includes","start","previousTopologyDescription","updateFromSrvPollingEvent","updateServers","emitAndLog","TopologyDescriptionChangedEvent","serverApi","capabilities","ServerCapabilities","lastHello","connect","TOPOLOGY_OPENING","TopologyOpeningEvent","Unknown","from","values","map","serverDescription","address","createAndConnectServer","serverUpdateHandler","exitWithError","error","emit","ERROR","readPreference","ReadPreference","primary","selectServerOptions","operationName","readPreferenceServerSelector","err","server","close","force","skipPingOnConnect","for","command","ns","ping","then","OPEN","CONNECT","destroyedServers","destroyServer","Promise","all","clear","drainWaitQueue","MongoTopologyClosedError","drainTimerQueue","stop","removeListener","TOPOLOGY_CLOSED","TopologyClosedEvent","finally","serverSelector","translate","willLog","MongoLoggableComponent","SERVER_SELECTION","SeverityLevel","DEBUG","debug","ServerSelectionStartedEvent","isSharded","session","transaction","ServerSelectionSucceededEvent","pool","waitQueueMember","topologyDescription","timeoutController","TimeoutController","startTime","now","waitingLogged","previousServer","signal","addEventListener","timeoutError","MongoServerSelectionError","ServerSelectionFailedEvent","processWaitQueue","hasServer","isStaleServerDescription","previousServerDescription","get","$clusterTime","_advanceClusterTime","equalDescriptions","equals","update","compatibilityError","MongoCompatibilityError","SERVER_DESCRIPTION_CHANGED","ServerDescriptionChangedEvent","auth","clientMetadata","metadata","isConnected","isDestroyed","sd","filter","ServerType","result","maxWireVersion","commonWireVersion","logicalSessionTimeoutMinutes","SERVER_OPENING","SERVER_CLOSED","CLOSE","TIMEOUT","exports","topology","LOCAL_SERVER_EVENTS","removeAllListeners","destroy","ServerClosedEvent","SERVER_RELAY_EVENTS","directConnection","Single","ReplicaSetNoPrimary","LoadBalanced","ServerOpeningEvent","Server","e","DESCRIPTION_RECEIVED","incomingServerDescription","has","MongoError","hasErrorLabel","MongoErrorLabel","ResetPool","interruptInUseConnections","InterruptInUseConnections","newTopologyType","shouldMarkPoolReady","isDataBearing","ready","entry","serverAddress","delete","queue","shift","membersToProcess","i","selectedDescriptions","selectedServer","INFORMATIONAL","info","WaitingForSuitableServerEvent","descriptions","server1","server2","operationCount","isActive","pinServer","process","nextTick","scheduleServerCheck","requestCheck","currentServerDescription","currentTopologyVersion","topologyVersion","compareTopologyVersion","hello","minWireVersion","hasAggregationCursor","hasWriteCommands","hasTextSearch","hasAuthCommands","hasListCollectionsCommand","hasListIndexesCommand","supportsSnapshotReads","commandsTakeWriteConcern","commandsTakeCollation"],"sources":["C:\\Users\\sumit\\Desktop\\Final project\\Expense-Tracker-Springboot-Frontend\\node_modules\\mongodb\\src\\sdam\\topology.ts"],"sourcesContent":["import { promisify } from 'util';\r\n\r\nimport type { BSONSerializeOptions, Document } from '../bson';\r\nimport type { MongoCredentials } from '../cmap/auth/mongo_credentials';\r\nimport type { ConnectionEvents, DestroyOptions } from '../cmap/connection';\r\nimport type { CloseOptions, ConnectionPoolEvents } from '../cmap/connection_pool';\r\nimport type { ClientMetadata } from '../cmap/handshake/client_metadata';\r\nimport { DEFAULT_OPTIONS, FEATURE_FLAGS } from '../connection_string';\r\nimport {\r\n  CLOSE,\r\n  CONNECT,\r\n  ERROR,\r\n  LOCAL_SERVER_EVENTS,\r\n  OPEN,\r\n  SERVER_CLOSED,\r\n  SERVER_DESCRIPTION_CHANGED,\r\n  SERVER_OPENING,\r\n  SERVER_RELAY_EVENTS,\r\n  TIMEOUT,\r\n  TOPOLOGY_CLOSED,\r\n  TOPOLOGY_DESCRIPTION_CHANGED,\r\n  TOPOLOGY_OPENING\r\n} from '../constants';\r\nimport {\r\n  MongoCompatibilityError,\r\n  type MongoDriverError,\r\n  MongoError,\r\n  MongoErrorLabel,\r\n  MongoRuntimeError,\r\n  MongoServerSelectionError,\r\n  MongoTopologyClosedError\r\n} from '../error';\r\nimport type { MongoClient, ServerApi } from '../mongo_client';\r\nimport { MongoLoggableComponent, type MongoLogger, SeverityLevel } from '../mongo_logger';\r\nimport { TypedEventEmitter } from '../mongo_types';\r\nimport { ReadPreference, type ReadPreferenceLike } from '../read_preference';\r\nimport type { ClientSession } from '../sessions';\r\nimport type { Transaction } from '../transactions';\r\nimport {\r\n  type Callback,\r\n  type EventEmitterWithState,\r\n  HostAddress,\r\n  List,\r\n  makeStateMachine,\r\n  now,\r\n  ns,\r\n  shuffle,\r\n  TimeoutController\r\n} from '../utils';\r\nimport {\r\n  _advanceClusterTime,\r\n  type ClusterTime,\r\n  drainTimerQueue,\r\n  ServerType,\r\n  STATE_CLOSED,\r\n  STATE_CLOSING,\r\n  STATE_CONNECTED,\r\n  STATE_CONNECTING,\r\n  type TimerQueue,\r\n  TopologyType\r\n} from './common';\r\nimport {\r\n  ServerClosedEvent,\r\n  ServerDescriptionChangedEvent,\r\n  ServerOpeningEvent,\r\n  TopologyClosedEvent,\r\n  TopologyDescriptionChangedEvent,\r\n  TopologyOpeningEvent\r\n} from './events';\r\nimport type { ServerMonitoringMode } from './monitor';\r\nimport { Server, type ServerEvents, type ServerOptions } from './server';\r\nimport { compareTopologyVersion, ServerDescription } from './server_description';\r\nimport { readPreferenceServerSelector, type ServerSelector } from './server_selection';\r\nimport {\r\n  ServerSelectionFailedEvent,\r\n  ServerSelectionStartedEvent,\r\n  ServerSelectionSucceededEvent,\r\n  WaitingForSuitableServerEvent\r\n} from './server_selection_events';\r\nimport { SrvPoller, type SrvPollingEvent } from './srv_polling';\r\nimport { TopologyDescription } from './topology_description';\r\n\r\n// Global state\r\nlet globalTopologyCounter = 0;\r\n\r\nconst stateTransition = makeStateMachine({\r\n  [STATE_CLOSED]: [STATE_CLOSED, STATE_CONNECTING],\r\n  [STATE_CONNECTING]: [STATE_CONNECTING, STATE_CLOSING, STATE_CONNECTED, STATE_CLOSED],\r\n  [STATE_CONNECTED]: [STATE_CONNECTED, STATE_CLOSING, STATE_CLOSED],\r\n  [STATE_CLOSING]: [STATE_CLOSING, STATE_CLOSED]\r\n});\r\n\r\n/** @internal */\r\nconst kCancelled = Symbol('cancelled');\r\n/** @internal */\r\nconst kWaitQueue = Symbol('waitQueue');\r\n\r\n/** @internal */\r\nexport type ServerSelectionCallback = Callback<Server>;\r\n\r\n/** @internal */\r\nexport interface ServerSelectionRequest {\r\n  serverSelector: ServerSelector;\r\n  topologyDescription: TopologyDescription;\r\n  mongoLogger: MongoLogger | undefined;\r\n  transaction?: Transaction;\r\n  startTime: number;\r\n  callback: ServerSelectionCallback;\r\n  [kCancelled]?: boolean;\r\n  timeoutController: TimeoutController;\r\n  operationName: string;\r\n  waitingLogged: boolean;\r\n  previousServer?: ServerDescription;\r\n}\r\n\r\n/** @internal */\r\nexport interface TopologyPrivate {\r\n  /** the id of this topology */\r\n  id: number;\r\n  /** passed in options */\r\n  options: TopologyOptions;\r\n  /** initial seedlist of servers to connect to */\r\n  seedlist: HostAddress[];\r\n  /** initial state */\r\n  state: string;\r\n  /** the topology description */\r\n  description: TopologyDescription;\r\n  serverSelectionTimeoutMS: number;\r\n  heartbeatFrequencyMS: number;\r\n  minHeartbeatFrequencyMS: number;\r\n  /** A map of server instances to normalized addresses */\r\n  servers: Map<string, Server>;\r\n  credentials?: MongoCredentials;\r\n  clusterTime?: ClusterTime;\r\n  /** timers created for the initial connect to a server */\r\n  connectionTimers: TimerQueue;\r\n\r\n  /** related to srv polling */\r\n  srvPoller?: SrvPoller;\r\n  detectShardedTopology: (event: TopologyDescriptionChangedEvent) => void;\r\n  detectSrvRecords: (event: SrvPollingEvent) => void;\r\n}\r\n\r\n/** @internal */\r\nexport interface TopologyOptions extends BSONSerializeOptions, ServerOptions {\r\n  srvMaxHosts: number;\r\n  srvServiceName: string;\r\n  hosts: HostAddress[];\r\n  retryWrites: boolean;\r\n  retryReads: boolean;\r\n  /** How long to block for server selection before throwing an error */\r\n  serverSelectionTimeoutMS: number;\r\n  /** The name of the replica set to connect to */\r\n  replicaSet?: string;\r\n  srvHost?: string;\r\n  srvPoller?: SrvPoller;\r\n  /** Indicates that a client should directly connect to a node without attempting to discover its topology type */\r\n  directConnection: boolean;\r\n  loadBalanced: boolean;\r\n  metadata: ClientMetadata;\r\n  serverMonitoringMode: ServerMonitoringMode;\r\n  /** MongoDB server API version */\r\n  serverApi?: ServerApi;\r\n  [featureFlag: symbol]: any;\r\n}\r\n\r\n/** @public */\r\nexport interface ConnectOptions {\r\n  readPreference?: ReadPreference;\r\n}\r\n\r\n/** @public */\r\nexport interface SelectServerOptions {\r\n  readPreference?: ReadPreferenceLike;\r\n  /** How long to block for server selection before throwing an error */\r\n  serverSelectionTimeoutMS?: number;\r\n  session?: ClientSession;\r\n  operationName: string;\r\n  previousServer?: ServerDescription;\r\n}\r\n\r\n/** @public */\r\nexport type TopologyEvents = {\r\n  /** Top level MongoClient doesn't emit this so it is marked: @internal */\r\n  connect(topology: Topology): void;\r\n  serverOpening(event: ServerOpeningEvent): void;\r\n  serverClosed(event: ServerClosedEvent): void;\r\n  serverDescriptionChanged(event: ServerDescriptionChangedEvent): void;\r\n  topologyClosed(event: TopologyClosedEvent): void;\r\n  topologyOpening(event: TopologyOpeningEvent): void;\r\n  topologyDescriptionChanged(event: TopologyDescriptionChangedEvent): void;\r\n  error(error: Error): void;\r\n  /** @internal */\r\n  open(topology: Topology): void;\r\n  close(): void;\r\n  timeout(): void;\r\n} & Omit<ServerEvents, 'connect'> &\r\n  ConnectionPoolEvents &\r\n  ConnectionEvents &\r\n  EventEmitterWithState;\r\n/**\r\n * A container of server instances representing a connection to a MongoDB topology.\r\n * @internal\r\n */\r\nexport class Topology extends TypedEventEmitter<TopologyEvents> {\r\n  /** @internal */\r\n  s: TopologyPrivate;\r\n  /** @internal */\r\n  [kWaitQueue]: List<ServerSelectionRequest>;\r\n  /** @internal */\r\n  hello?: Document;\r\n  /** @internal */\r\n  _type?: string;\r\n\r\n  client!: MongoClient;\r\n\r\n  /** @event */\r\n  static readonly SERVER_OPENING = SERVER_OPENING;\r\n  /** @event */\r\n  static readonly SERVER_CLOSED = SERVER_CLOSED;\r\n  /** @event */\r\n  static readonly SERVER_DESCRIPTION_CHANGED = SERVER_DESCRIPTION_CHANGED;\r\n  /** @event */\r\n  static readonly TOPOLOGY_OPENING = TOPOLOGY_OPENING;\r\n  /** @event */\r\n  static readonly TOPOLOGY_CLOSED = TOPOLOGY_CLOSED;\r\n  /** @event */\r\n  static readonly TOPOLOGY_DESCRIPTION_CHANGED = TOPOLOGY_DESCRIPTION_CHANGED;\r\n  /** @event */\r\n  static readonly ERROR = ERROR;\r\n  /** @event */\r\n  static readonly OPEN = OPEN;\r\n  /** @event */\r\n  static readonly CONNECT = CONNECT;\r\n  /** @event */\r\n  static readonly CLOSE = CLOSE;\r\n  /** @event */\r\n  static readonly TIMEOUT = TIMEOUT;\r\n\r\n  selectServerAsync: (\r\n    selector: string | ReadPreference | ServerSelector,\r\n    options: SelectServerOptions\r\n  ) => Promise<Server>;\r\n\r\n  /**\r\n   * @param seedlist - a list of HostAddress instances to connect to\r\n   */\r\n  constructor(\r\n    client: MongoClient,\r\n    seeds: string | string[] | HostAddress | HostAddress[],\r\n    options: TopologyOptions\r\n  ) {\r\n    super();\r\n\r\n    this.client = client;\r\n    this.selectServerAsync = promisify(\r\n      (\r\n        selector: string | ReadPreference | ServerSelector,\r\n        options: SelectServerOptions,\r\n        callback: (e: Error, r: Server) => void\r\n      ) => this.selectServer(selector, options, callback as any)\r\n    );\r\n\r\n    // Options should only be undefined in tests, MongoClient will always have defined options\r\n    options = options ?? {\r\n      hosts: [HostAddress.fromString('localhost:27017')],\r\n      ...Object.fromEntries(DEFAULT_OPTIONS.entries()),\r\n      ...Object.fromEntries(FEATURE_FLAGS.entries())\r\n    };\r\n\r\n    if (typeof seeds === 'string') {\r\n      seeds = [HostAddress.fromString(seeds)];\r\n    } else if (!Array.isArray(seeds)) {\r\n      seeds = [seeds];\r\n    }\r\n\r\n    const seedlist: HostAddress[] = [];\r\n    for (const seed of seeds) {\r\n      if (typeof seed === 'string') {\r\n        seedlist.push(HostAddress.fromString(seed));\r\n      } else if (seed instanceof HostAddress) {\r\n        seedlist.push(seed);\r\n      } else {\r\n        // FIXME(NODE-3483): May need to be a MongoParseError\r\n        throw new MongoRuntimeError(`Topology cannot be constructed from ${JSON.stringify(seed)}`);\r\n      }\r\n    }\r\n\r\n    const topologyType = topologyTypeFromOptions(options);\r\n    const topologyId = globalTopologyCounter++;\r\n\r\n    const selectedHosts =\r\n      options.srvMaxHosts == null ||\r\n      options.srvMaxHosts === 0 ||\r\n      options.srvMaxHosts >= seedlist.length\r\n        ? seedlist\r\n        : shuffle(seedlist, options.srvMaxHosts);\r\n\r\n    const serverDescriptions = new Map();\r\n    for (const hostAddress of selectedHosts) {\r\n      serverDescriptions.set(hostAddress.toString(), new ServerDescription(hostAddress));\r\n    }\r\n\r\n    this[kWaitQueue] = new List();\r\n    this.s = {\r\n      // the id of this topology\r\n      id: topologyId,\r\n      // passed in options\r\n      options,\r\n      // initial seedlist of servers to connect to\r\n      seedlist,\r\n      // initial state\r\n      state: STATE_CLOSED,\r\n      // the topology description\r\n      description: new TopologyDescription(\r\n        topologyType,\r\n        serverDescriptions,\r\n        options.replicaSet,\r\n        undefined,\r\n        undefined,\r\n        undefined,\r\n        options\r\n      ),\r\n      serverSelectionTimeoutMS: options.serverSelectionTimeoutMS,\r\n      heartbeatFrequencyMS: options.heartbeatFrequencyMS,\r\n      minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS,\r\n      // a map of server instances to normalized addresses\r\n      servers: new Map(),\r\n      credentials: options?.credentials,\r\n      clusterTime: undefined,\r\n\r\n      // timer management\r\n      connectionTimers: new Set<NodeJS.Timeout>(),\r\n      detectShardedTopology: ev => this.detectShardedTopology(ev),\r\n      detectSrvRecords: ev => this.detectSrvRecords(ev)\r\n    };\r\n\r\n    this.mongoLogger = client.mongoLogger;\r\n    this.component = 'topology';\r\n\r\n    if (options.srvHost && !options.loadBalanced) {\r\n      this.s.srvPoller =\r\n        options.srvPoller ??\r\n        new SrvPoller({\r\n          heartbeatFrequencyMS: this.s.heartbeatFrequencyMS,\r\n          srvHost: options.srvHost,\r\n          srvMaxHosts: options.srvMaxHosts,\r\n          srvServiceName: options.srvServiceName\r\n        });\r\n\r\n      this.on(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\r\n    }\r\n  }\r\n\r\n  private detectShardedTopology(event: TopologyDescriptionChangedEvent) {\r\n    const previousType = event.previousDescription.type;\r\n    const newType = event.newDescription.type;\r\n\r\n    const transitionToSharded =\r\n      previousType !== TopologyType.Sharded && newType === TopologyType.Sharded;\r\n    const srvListeners = this.s.srvPoller?.listeners(SrvPoller.SRV_RECORD_DISCOVERY);\r\n    const listeningToSrvPolling = !!srvListeners?.includes(this.s.detectSrvRecords);\r\n\r\n    if (transitionToSharded && !listeningToSrvPolling) {\r\n      this.s.srvPoller?.on(SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\r\n      this.s.srvPoller?.start();\r\n    }\r\n  }\r\n\r\n  private detectSrvRecords(ev: SrvPollingEvent) {\r\n    const previousTopologyDescription = this.s.description;\r\n    this.s.description = this.s.description.updateFromSrvPollingEvent(\r\n      ev,\r\n      this.s.options.srvMaxHosts\r\n    );\r\n    if (this.s.description === previousTopologyDescription) {\r\n      // Nothing changed, so return\r\n      return;\r\n    }\r\n\r\n    updateServers(this);\r\n\r\n    this.emitAndLog(\r\n      Topology.TOPOLOGY_DESCRIPTION_CHANGED,\r\n      new TopologyDescriptionChangedEvent(\r\n        this.s.id,\r\n        previousTopologyDescription,\r\n        this.s.description\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @returns A `TopologyDescription` for this topology\r\n   */\r\n  get description(): TopologyDescription {\r\n    return this.s.description;\r\n  }\r\n\r\n  get loadBalanced(): boolean {\r\n    return this.s.options.loadBalanced;\r\n  }\r\n\r\n  get serverApi(): ServerApi | undefined {\r\n    return this.s.options.serverApi;\r\n  }\r\n\r\n  get capabilities(): ServerCapabilities {\r\n    return new ServerCapabilities(this.lastHello());\r\n  }\r\n\r\n  /** Initiate server connect */\r\n  connect(callback: Callback): void;\r\n  connect(options: ConnectOptions, callback: Callback): void;\r\n  connect(options?: ConnectOptions | Callback, callback?: Callback): void {\r\n    if (typeof options === 'function') (callback = options), (options = {});\r\n    options = options ?? {};\r\n    if (this.s.state === STATE_CONNECTED) {\r\n      if (typeof callback === 'function') {\r\n        callback();\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    stateTransition(this, STATE_CONNECTING);\r\n\r\n    // emit SDAM monitoring events\r\n    this.emitAndLog(Topology.TOPOLOGY_OPENING, new TopologyOpeningEvent(this.s.id));\r\n\r\n    // emit an event for the topology change\r\n    this.emitAndLog(\r\n      Topology.TOPOLOGY_DESCRIPTION_CHANGED,\r\n      new TopologyDescriptionChangedEvent(\r\n        this.s.id,\r\n        new TopologyDescription(TopologyType.Unknown), // initial is always Unknown\r\n        this.s.description\r\n      )\r\n    );\r\n\r\n    // connect all known servers, then attempt server selection to connect\r\n    const serverDescriptions = Array.from(this.s.description.servers.values());\r\n    this.s.servers = new Map(\r\n      serverDescriptions.map(serverDescription => [\r\n        serverDescription.address,\r\n        createAndConnectServer(this, serverDescription)\r\n      ])\r\n    );\r\n\r\n    // In load balancer mode we need to fake a server description getting\r\n    // emitted from the monitor, since the monitor doesn't exist.\r\n    if (this.s.options.loadBalanced) {\r\n      for (const description of serverDescriptions) {\r\n        const newDescription = new ServerDescription(description.hostAddress, undefined, {\r\n          loadBalanced: this.s.options.loadBalanced\r\n        });\r\n        this.serverUpdateHandler(newDescription);\r\n      }\r\n    }\r\n\r\n    const exitWithError = (error: Error) =>\r\n      callback ? callback(error) : this.emit(Topology.ERROR, error);\r\n\r\n    const readPreference = options.readPreference ?? ReadPreference.primary;\r\n    const selectServerOptions = { operationName: 'ping', ...options };\r\n    this.selectServer(\r\n      readPreferenceServerSelector(readPreference),\r\n      selectServerOptions,\r\n      (err, server) => {\r\n        if (err) {\r\n          return this.close({ force: false }, () => exitWithError(err));\r\n        }\r\n\r\n        const skipPingOnConnect = this.s.options[Symbol.for('@@mdb.skipPingOnConnect')] === true;\r\n        if (!skipPingOnConnect && server && this.s.credentials) {\r\n          server.command(ns('admin.$cmd'), { ping: 1 }, {}).then(() => {\r\n            stateTransition(this, STATE_CONNECTED);\r\n            this.emit(Topology.OPEN, this);\r\n            this.emit(Topology.CONNECT, this);\r\n\r\n            callback?.(undefined, this);\r\n          }, exitWithError);\r\n\r\n          return;\r\n        }\r\n\r\n        stateTransition(this, STATE_CONNECTED);\r\n        this.emit(Topology.OPEN, this);\r\n        this.emit(Topology.CONNECT, this);\r\n\r\n        callback?.(undefined, this);\r\n      }\r\n    );\r\n  }\r\n\r\n  /** Close this topology */\r\n  close(options: CloseOptions): void;\r\n  close(options: CloseOptions, callback: Callback): void;\r\n  close(options?: CloseOptions, callback?: Callback): void {\r\n    options = options ?? { force: false };\r\n\r\n    if (this.s.state === STATE_CLOSED || this.s.state === STATE_CLOSING) {\r\n      return callback?.();\r\n    }\r\n\r\n    const destroyedServers = Array.from(this.s.servers.values(), server => {\r\n      return promisify(destroyServer)(server, this, { force: !!options?.force });\r\n    });\r\n\r\n    Promise.all(destroyedServers)\r\n      .then(() => {\r\n        this.s.servers.clear();\r\n\r\n        stateTransition(this, STATE_CLOSING);\r\n\r\n        drainWaitQueue(this[kWaitQueue], new MongoTopologyClosedError());\r\n        drainTimerQueue(this.s.connectionTimers);\r\n\r\n        if (this.s.srvPoller) {\r\n          this.s.srvPoller.stop();\r\n          this.s.srvPoller.removeListener(SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\r\n        }\r\n\r\n        this.removeListener(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\r\n\r\n        stateTransition(this, STATE_CLOSED);\r\n\r\n        // emit an event for close\r\n        this.emitAndLog(Topology.TOPOLOGY_CLOSED, new TopologyClosedEvent(this.s.id));\r\n      })\r\n      .finally(() => callback?.());\r\n  }\r\n\r\n  /**\r\n   * Selects a server according to the selection predicate provided\r\n   *\r\n   * @param selector - An optional selector to select servers by, defaults to a random selection within a latency window\r\n   * @param options - Optional settings related to server selection\r\n   * @param callback - The callback used to indicate success or failure\r\n   * @returns An instance of a `Server` meeting the criteria of the predicate provided\r\n   */\r\n  selectServer(\r\n    selector: string | ReadPreference | ServerSelector,\r\n    options: SelectServerOptions,\r\n    callback: Callback<Server>\r\n  ): void {\r\n    let serverSelector;\r\n    if (typeof selector !== 'function') {\r\n      if (typeof selector === 'string') {\r\n        serverSelector = readPreferenceServerSelector(ReadPreference.fromString(selector));\r\n      } else {\r\n        let readPreference;\r\n        if (selector instanceof ReadPreference) {\r\n          readPreference = selector;\r\n        } else {\r\n          ReadPreference.translate(options);\r\n          readPreference = options.readPreference || ReadPreference.primary;\r\n        }\r\n\r\n        serverSelector = readPreferenceServerSelector(readPreference as ReadPreference);\r\n      }\r\n    } else {\r\n      serverSelector = selector;\r\n    }\r\n\r\n    options = { serverSelectionTimeoutMS: this.s.serverSelectionTimeoutMS, ...options };\r\n    if (\r\n      this.client.mongoLogger?.willLog(MongoLoggableComponent.SERVER_SELECTION, SeverityLevel.DEBUG)\r\n    ) {\r\n      this.client.mongoLogger?.debug(\r\n        MongoLoggableComponent.SERVER_SELECTION,\r\n        new ServerSelectionStartedEvent(selector, this.description, options.operationName)\r\n      );\r\n    }\r\n\r\n    const isSharded = this.description.type === TopologyType.Sharded;\r\n    const session = options.session;\r\n    const transaction = session && session.transaction;\r\n\r\n    if (isSharded && transaction && transaction.server) {\r\n      if (\r\n        this.client.mongoLogger?.willLog(\r\n          MongoLoggableComponent.SERVER_SELECTION,\r\n          SeverityLevel.DEBUG\r\n        )\r\n      ) {\r\n        this.client.mongoLogger?.debug(\r\n          MongoLoggableComponent.SERVER_SELECTION,\r\n          new ServerSelectionSucceededEvent(\r\n            selector,\r\n            this.description,\r\n            transaction.server.pool.address,\r\n            options.operationName\r\n          )\r\n        );\r\n      }\r\n      callback(undefined, transaction.server);\r\n      return;\r\n    }\r\n\r\n    const waitQueueMember: ServerSelectionRequest = {\r\n      serverSelector,\r\n      topologyDescription: this.description,\r\n      mongoLogger: this.client.mongoLogger,\r\n      transaction,\r\n      callback,\r\n      timeoutController: new TimeoutController(options.serverSelectionTimeoutMS),\r\n      startTime: now(),\r\n      operationName: options.operationName,\r\n      waitingLogged: false,\r\n      previousServer: options.previousServer\r\n    };\r\n\r\n    waitQueueMember.timeoutController.signal.addEventListener('abort', () => {\r\n      waitQueueMember[kCancelled] = true;\r\n      waitQueueMember.timeoutController.clear();\r\n      const timeoutError = new MongoServerSelectionError(\r\n        `Server selection timed out after ${options.serverSelectionTimeoutMS} ms`,\r\n        this.description\r\n      );\r\n      if (\r\n        this.client.mongoLogger?.willLog(\r\n          MongoLoggableComponent.SERVER_SELECTION,\r\n          SeverityLevel.DEBUG\r\n        )\r\n      ) {\r\n        this.client.mongoLogger?.debug(\r\n          MongoLoggableComponent.SERVER_SELECTION,\r\n          new ServerSelectionFailedEvent(\r\n            selector,\r\n            this.description,\r\n            timeoutError,\r\n            options.operationName\r\n          )\r\n        );\r\n      }\r\n      waitQueueMember.callback(timeoutError);\r\n    });\r\n\r\n    this[kWaitQueue].push(waitQueueMember);\r\n    processWaitQueue(this);\r\n  }\r\n\r\n  /**\r\n   * Update the internal TopologyDescription with a ServerDescription\r\n   *\r\n   * @param serverDescription - The server to update in the internal list of server descriptions\r\n   */\r\n  serverUpdateHandler(serverDescription: ServerDescription): void {\r\n    if (!this.s.description.hasServer(serverDescription.address)) {\r\n      return;\r\n    }\r\n\r\n    // ignore this server update if its from an outdated topologyVersion\r\n    if (isStaleServerDescription(this.s.description, serverDescription)) {\r\n      return;\r\n    }\r\n\r\n    // these will be used for monitoring events later\r\n    const previousTopologyDescription = this.s.description;\r\n    const previousServerDescription = this.s.description.servers.get(serverDescription.address);\r\n    if (!previousServerDescription) {\r\n      return;\r\n    }\r\n\r\n    // Driver Sessions Spec: \"Whenever a driver receives a cluster time from\r\n    // a server it MUST compare it to the current highest seen cluster time\r\n    // for the deployment. If the new cluster time is higher than the\r\n    // highest seen cluster time it MUST become the new highest seen cluster\r\n    // time. Two cluster times are compared using only the BsonTimestamp\r\n    // value of the clusterTime embedded field.\"\r\n    const clusterTime = serverDescription.$clusterTime;\r\n    if (clusterTime) {\r\n      _advanceClusterTime(this, clusterTime);\r\n    }\r\n\r\n    // If we already know all the information contained in this updated description, then\r\n    // we don't need to emit SDAM events, but still need to update the description, in order\r\n    // to keep client-tracked attributes like last update time and round trip time up to date\r\n    const equalDescriptions =\r\n      previousServerDescription && previousServerDescription.equals(serverDescription);\r\n\r\n    // first update the TopologyDescription\r\n    this.s.description = this.s.description.update(serverDescription);\r\n    if (this.s.description.compatibilityError) {\r\n      this.emit(Topology.ERROR, new MongoCompatibilityError(this.s.description.compatibilityError));\r\n      return;\r\n    }\r\n\r\n    // emit monitoring events for this change\r\n    if (!equalDescriptions) {\r\n      const newDescription = this.s.description.servers.get(serverDescription.address);\r\n      if (newDescription) {\r\n        this.emit(\r\n          Topology.SERVER_DESCRIPTION_CHANGED,\r\n          new ServerDescriptionChangedEvent(\r\n            this.s.id,\r\n            serverDescription.address,\r\n            previousServerDescription,\r\n            newDescription\r\n          )\r\n        );\r\n      }\r\n    }\r\n\r\n    // update server list from updated descriptions\r\n    updateServers(this, serverDescription);\r\n\r\n    // attempt to resolve any outstanding server selection attempts\r\n    if (this[kWaitQueue].length > 0) {\r\n      processWaitQueue(this);\r\n    }\r\n\r\n    if (!equalDescriptions) {\r\n      this.emitAndLog(\r\n        Topology.TOPOLOGY_DESCRIPTION_CHANGED,\r\n        new TopologyDescriptionChangedEvent(\r\n          this.s.id,\r\n          previousTopologyDescription,\r\n          this.s.description\r\n        )\r\n      );\r\n    }\r\n  }\r\n\r\n  auth(credentials?: MongoCredentials, callback?: Callback): void {\r\n    if (typeof credentials === 'function') (callback = credentials), (credentials = undefined);\r\n    if (typeof callback === 'function') callback(undefined, true);\r\n  }\r\n\r\n  get clientMetadata(): ClientMetadata {\r\n    return this.s.options.metadata;\r\n  }\r\n\r\n  isConnected(): boolean {\r\n    return this.s.state === STATE_CONNECTED;\r\n  }\r\n\r\n  isDestroyed(): boolean {\r\n    return this.s.state === STATE_CLOSED;\r\n  }\r\n\r\n  // NOTE: There are many places in code where we explicitly check the last hello\r\n  //       to do feature support detection. This should be done any other way, but for\r\n  //       now we will just return the first hello seen, which should suffice.\r\n  lastHello(): Document {\r\n    const serverDescriptions = Array.from(this.description.servers.values());\r\n    if (serverDescriptions.length === 0) return {};\r\n    const sd = serverDescriptions.filter(\r\n      (sd: ServerDescription) => sd.type !== ServerType.Unknown\r\n    )[0];\r\n\r\n    const result = sd || { maxWireVersion: this.description.commonWireVersion };\r\n    return result;\r\n  }\r\n\r\n  get commonWireVersion(): number | undefined {\r\n    return this.description.commonWireVersion;\r\n  }\r\n\r\n  get logicalSessionTimeoutMinutes(): number | null {\r\n    return this.description.logicalSessionTimeoutMinutes;\r\n  }\r\n\r\n  get clusterTime(): ClusterTime | undefined {\r\n    return this.s.clusterTime;\r\n  }\r\n\r\n  set clusterTime(clusterTime: ClusterTime | undefined) {\r\n    this.s.clusterTime = clusterTime;\r\n  }\r\n}\r\n\r\n/** Destroys a server, and removes all event listeners from the instance */\r\nfunction destroyServer(\r\n  server: Server,\r\n  topology: Topology,\r\n  options?: DestroyOptions,\r\n  callback?: Callback\r\n) {\r\n  options = options ?? { force: false };\r\n  for (const event of LOCAL_SERVER_EVENTS) {\r\n    server.removeAllListeners(event);\r\n  }\r\n\r\n  server.destroy(options, () => {\r\n    topology.emitAndLog(\r\n      Topology.SERVER_CLOSED,\r\n      new ServerClosedEvent(topology.s.id, server.description.address)\r\n    );\r\n\r\n    for (const event of SERVER_RELAY_EVENTS) {\r\n      server.removeAllListeners(event);\r\n    }\r\n    if (typeof callback === 'function') {\r\n      callback();\r\n    }\r\n  });\r\n}\r\n\r\n/** Predicts the TopologyType from options */\r\nfunction topologyTypeFromOptions(options?: TopologyOptions) {\r\n  if (options?.directConnection) {\r\n    return TopologyType.Single;\r\n  }\r\n\r\n  if (options?.replicaSet) {\r\n    return TopologyType.ReplicaSetNoPrimary;\r\n  }\r\n\r\n  if (options?.loadBalanced) {\r\n    return TopologyType.LoadBalanced;\r\n  }\r\n\r\n  return TopologyType.Unknown;\r\n}\r\n\r\n/**\r\n * Creates new server instances and attempts to connect them\r\n *\r\n * @param topology - The topology that this server belongs to\r\n * @param serverDescription - The description for the server to initialize and connect to\r\n */\r\nfunction createAndConnectServer(topology: Topology, serverDescription: ServerDescription) {\r\n  topology.emitAndLog(\r\n    Topology.SERVER_OPENING,\r\n    new ServerOpeningEvent(topology.s.id, serverDescription.address)\r\n  );\r\n\r\n  const server = new Server(topology, serverDescription, topology.s.options);\r\n  for (const event of SERVER_RELAY_EVENTS) {\r\n    server.on(event, (e: any) => topology.emit(event, e));\r\n  }\r\n\r\n  server.on(Server.DESCRIPTION_RECEIVED, description => topology.serverUpdateHandler(description));\r\n\r\n  server.connect();\r\n  return server;\r\n}\r\n\r\n/**\r\n * @param topology - Topology to update.\r\n * @param incomingServerDescription - New server description.\r\n */\r\nfunction updateServers(topology: Topology, incomingServerDescription?: ServerDescription) {\r\n  // update the internal server's description\r\n  if (incomingServerDescription && topology.s.servers.has(incomingServerDescription.address)) {\r\n    const server = topology.s.servers.get(incomingServerDescription.address);\r\n    if (server) {\r\n      server.s.description = incomingServerDescription;\r\n      if (\r\n        incomingServerDescription.error instanceof MongoError &&\r\n        incomingServerDescription.error.hasErrorLabel(MongoErrorLabel.ResetPool)\r\n      ) {\r\n        const interruptInUseConnections = incomingServerDescription.error.hasErrorLabel(\r\n          MongoErrorLabel.InterruptInUseConnections\r\n        );\r\n\r\n        server.pool.clear({ interruptInUseConnections });\r\n      } else if (incomingServerDescription.error == null) {\r\n        const newTopologyType = topology.s.description.type;\r\n        const shouldMarkPoolReady =\r\n          incomingServerDescription.isDataBearing ||\r\n          (incomingServerDescription.type !== ServerType.Unknown &&\r\n            newTopologyType === TopologyType.Single);\r\n        if (shouldMarkPoolReady) {\r\n          server.pool.ready();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // add new servers for all descriptions we currently don't know about locally\r\n  for (const serverDescription of topology.description.servers.values()) {\r\n    if (!topology.s.servers.has(serverDescription.address)) {\r\n      const server = createAndConnectServer(topology, serverDescription);\r\n      topology.s.servers.set(serverDescription.address, server);\r\n    }\r\n  }\r\n\r\n  // for all servers no longer known, remove their descriptions and destroy their instances\r\n  for (const entry of topology.s.servers) {\r\n    const serverAddress = entry[0];\r\n    if (topology.description.hasServer(serverAddress)) {\r\n      continue;\r\n    }\r\n\r\n    if (!topology.s.servers.has(serverAddress)) {\r\n      continue;\r\n    }\r\n\r\n    const server = topology.s.servers.get(serverAddress);\r\n    topology.s.servers.delete(serverAddress);\r\n\r\n    // prepare server for garbage collection\r\n    if (server) {\r\n      destroyServer(server, topology);\r\n    }\r\n  }\r\n}\r\n\r\nfunction drainWaitQueue(queue: List<ServerSelectionRequest>, err?: MongoDriverError) {\r\n  while (queue.length) {\r\n    const waitQueueMember = queue.shift();\r\n    if (!waitQueueMember) {\r\n      continue;\r\n    }\r\n\r\n    waitQueueMember.timeoutController.clear();\r\n\r\n    if (!waitQueueMember[kCancelled]) {\r\n      if (err) {\r\n        if (\r\n          waitQueueMember.mongoLogger?.willLog(\r\n            MongoLoggableComponent.SERVER_SELECTION,\r\n            SeverityLevel.DEBUG\r\n          )\r\n        ) {\r\n          waitQueueMember.mongoLogger?.debug(\r\n            MongoLoggableComponent.SERVER_SELECTION,\r\n            new ServerSelectionFailedEvent(\r\n              waitQueueMember.serverSelector,\r\n              waitQueueMember.topologyDescription,\r\n              err,\r\n              waitQueueMember.operationName\r\n            )\r\n          );\r\n        }\r\n      }\r\n      waitQueueMember.callback(err);\r\n    }\r\n  }\r\n}\r\n\r\nfunction processWaitQueue(topology: Topology) {\r\n  if (topology.s.state === STATE_CLOSED) {\r\n    drainWaitQueue(topology[kWaitQueue], new MongoTopologyClosedError());\r\n    return;\r\n  }\r\n\r\n  const isSharded = topology.description.type === TopologyType.Sharded;\r\n  const serverDescriptions = Array.from(topology.description.servers.values());\r\n  const membersToProcess = topology[kWaitQueue].length;\r\n  for (let i = 0; i < membersToProcess; ++i) {\r\n    const waitQueueMember = topology[kWaitQueue].shift();\r\n    if (!waitQueueMember) {\r\n      continue;\r\n    }\r\n\r\n    if (waitQueueMember[kCancelled]) {\r\n      continue;\r\n    }\r\n\r\n    let selectedDescriptions;\r\n    try {\r\n      const serverSelector = waitQueueMember.serverSelector;\r\n      const previousServer = waitQueueMember.previousServer;\r\n      selectedDescriptions = serverSelector\r\n        ? serverSelector(\r\n            topology.description,\r\n            serverDescriptions,\r\n            previousServer ? [previousServer] : []\r\n          )\r\n        : serverDescriptions;\r\n    } catch (e) {\r\n      waitQueueMember.timeoutController.clear();\r\n      if (\r\n        topology.client.mongoLogger?.willLog(\r\n          MongoLoggableComponent.SERVER_SELECTION,\r\n          SeverityLevel.DEBUG\r\n        )\r\n      ) {\r\n        topology.client.mongoLogger?.debug(\r\n          MongoLoggableComponent.SERVER_SELECTION,\r\n          new ServerSelectionFailedEvent(\r\n            waitQueueMember.serverSelector,\r\n            topology.description,\r\n            e,\r\n            waitQueueMember.operationName\r\n          )\r\n        );\r\n      }\r\n      waitQueueMember.callback(e);\r\n      continue;\r\n    }\r\n\r\n    let selectedServer: Server | undefined;\r\n    if (selectedDescriptions.length === 0) {\r\n      if (!waitQueueMember.waitingLogged) {\r\n        if (\r\n          topology.client.mongoLogger?.willLog(\r\n            MongoLoggableComponent.SERVER_SELECTION,\r\n            SeverityLevel.INFORMATIONAL\r\n          )\r\n        ) {\r\n          topology.client.mongoLogger?.info(\r\n            MongoLoggableComponent.SERVER_SELECTION,\r\n            new WaitingForSuitableServerEvent(\r\n              waitQueueMember.serverSelector,\r\n              topology.description,\r\n              topology.s.serverSelectionTimeoutMS !== 0\r\n                ? topology.s.serverSelectionTimeoutMS - (now() - waitQueueMember.startTime)\r\n                : -1,\r\n              waitQueueMember.operationName\r\n            )\r\n          );\r\n        }\r\n        waitQueueMember.waitingLogged = true;\r\n      }\r\n      topology[kWaitQueue].push(waitQueueMember);\r\n      continue;\r\n    } else if (selectedDescriptions.length === 1) {\r\n      selectedServer = topology.s.servers.get(selectedDescriptions[0].address);\r\n    } else {\r\n      const descriptions = shuffle(selectedDescriptions, 2);\r\n      const server1 = topology.s.servers.get(descriptions[0].address);\r\n      const server2 = topology.s.servers.get(descriptions[1].address);\r\n\r\n      selectedServer =\r\n        server1 && server2 && server1.s.operationCount < server2.s.operationCount\r\n          ? server1\r\n          : server2;\r\n    }\r\n\r\n    if (!selectedServer) {\r\n      const error = new MongoServerSelectionError(\r\n        'server selection returned a server description but the server was not found in the topology',\r\n        topology.description\r\n      );\r\n      if (\r\n        topology.client.mongoLogger?.willLog(\r\n          MongoLoggableComponent.SERVER_SELECTION,\r\n          SeverityLevel.DEBUG\r\n        )\r\n      ) {\r\n        topology.client.mongoLogger?.debug(\r\n          MongoLoggableComponent.SERVER_SELECTION,\r\n          new ServerSelectionFailedEvent(\r\n            waitQueueMember.serverSelector,\r\n            topology.description,\r\n            error,\r\n            waitQueueMember.operationName\r\n          )\r\n        );\r\n      }\r\n      waitQueueMember.callback(error);\r\n      return;\r\n    }\r\n    const transaction = waitQueueMember.transaction;\r\n    if (isSharded && transaction && transaction.isActive && selectedServer) {\r\n      transaction.pinServer(selectedServer);\r\n    }\r\n\r\n    waitQueueMember.timeoutController.clear();\r\n\r\n    if (\r\n      topology.client.mongoLogger?.willLog(\r\n        MongoLoggableComponent.SERVER_SELECTION,\r\n        SeverityLevel.DEBUG\r\n      )\r\n    ) {\r\n      topology.client.mongoLogger?.debug(\r\n        MongoLoggableComponent.SERVER_SELECTION,\r\n        new ServerSelectionSucceededEvent(\r\n          waitQueueMember.serverSelector,\r\n          waitQueueMember.topologyDescription,\r\n          selectedServer.pool.address,\r\n          waitQueueMember.operationName\r\n        )\r\n      );\r\n    }\r\n    waitQueueMember.callback(undefined, selectedServer);\r\n  }\r\n\r\n  if (topology[kWaitQueue].length > 0) {\r\n    // ensure all server monitors attempt monitoring soon\r\n    for (const [, server] of topology.s.servers) {\r\n      process.nextTick(function scheduleServerCheck() {\r\n        return server.requestCheck();\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nfunction isStaleServerDescription(\r\n  topologyDescription: TopologyDescription,\r\n  incomingServerDescription: ServerDescription\r\n) {\r\n  const currentServerDescription = topologyDescription.servers.get(\r\n    incomingServerDescription.address\r\n  );\r\n  const currentTopologyVersion = currentServerDescription?.topologyVersion;\r\n  return (\r\n    compareTopologyVersion(currentTopologyVersion, incomingServerDescription.topologyVersion) > 0\r\n  );\r\n}\r\n\r\n/** @public */\r\nexport class ServerCapabilities {\r\n  maxWireVersion: number;\r\n  minWireVersion: number;\r\n\r\n  constructor(hello: Document) {\r\n    this.minWireVersion = hello.minWireVersion || 0;\r\n    this.maxWireVersion = hello.maxWireVersion || 0;\r\n  }\r\n\r\n  get hasAggregationCursor(): boolean {\r\n    return this.maxWireVersion >= 1;\r\n  }\r\n\r\n  get hasWriteCommands(): boolean {\r\n    return this.maxWireVersion >= 2;\r\n  }\r\n  get hasTextSearch(): boolean {\r\n    return this.minWireVersion >= 0;\r\n  }\r\n\r\n  get hasAuthCommands(): boolean {\r\n    return this.maxWireVersion >= 1;\r\n  }\r\n\r\n  get hasListCollectionsCommand(): boolean {\r\n    return this.maxWireVersion >= 3;\r\n  }\r\n\r\n  get hasListIndexesCommand(): boolean {\r\n    return this.maxWireVersion >= 3;\r\n  }\r\n\r\n  get supportsSnapshotReads(): boolean {\r\n    return this.maxWireVersion >= 13;\r\n  }\r\n\r\n  get commandsTakeWriteConcern(): boolean {\r\n    return this.maxWireVersion >= 5;\r\n  }\r\n\r\n  get commandsTakeCollation(): boolean {\r\n    return this.maxWireVersion >= 5;\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}