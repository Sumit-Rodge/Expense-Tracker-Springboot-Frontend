{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ListDatabasesOperation = void 0;\nconst utils_1 = require(\"../utils\");\nconst command_1 = require(\"./command\");\nconst operation_1 = require(\"./operation\");\n/** @internal */\nclass ListDatabasesOperation extends command_1.CommandOperation {\n  constructor(db, options) {\n    super(db, options);\n    this.options = options ?? {};\n    this.ns = new utils_1.MongoDBNamespace('admin', '$cmd');\n  }\n  get commandName() {\n    return 'listDatabases';\n  }\n  async execute(server, session) {\n    const cmd = {\n      listDatabases: 1\n    };\n    if (typeof this.options.nameOnly === 'boolean') {\n      cmd.nameOnly = this.options.nameOnly;\n    }\n    if (this.options.filter) {\n      cmd.filter = this.options.filter;\n    }\n    if (typeof this.options.authorizedDatabases === 'boolean') {\n      cmd.authorizedDatabases = this.options.authorizedDatabases;\n    }\n    // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n    if ((0, utils_1.maxWireVersion)(server) >= 9 && this.options.comment !== undefined) {\n      cmd.comment = this.options.comment;\n    }\n    return super.executeCommand(server, session, cmd);\n  }\n}\nexports.ListDatabasesOperation = ListDatabasesOperation;\n(0, operation_1.defineAspects)(ListDatabasesOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.RETRYABLE]);","map":{"version":3,"names":["utils_1","require","command_1","operation_1","ListDatabasesOperation","CommandOperation","constructor","db","options","ns","MongoDBNamespace","commandName","execute","server","session","cmd","listDatabases","nameOnly","filter","authorizedDatabases","maxWireVersion","comment","undefined","executeCommand","exports","defineAspects","Aspect","READ_OPERATION","RETRYABLE"],"sources":["C:\\Users\\sumit\\Desktop\\Final project\\Expense-Tracker-Springboot-Frontend\\node_modules\\mongodb\\src\\operations\\list_databases.ts"],"sourcesContent":["import type { Document } from '../bson';\r\nimport type { Db } from '../db';\r\nimport { type TODO_NODE_3286 } from '../mongo_types';\r\nimport type { Server } from '../sdam/server';\r\nimport type { ClientSession } from '../sessions';\r\nimport { maxWireVersion, MongoDBNamespace } from '../utils';\r\nimport { CommandOperation, type CommandOperationOptions } from './command';\r\nimport { Aspect, defineAspects } from './operation';\r\n\r\n/** @public */\r\nexport interface ListDatabasesResult {\r\n  databases: ({ name: string; sizeOnDisk?: number; empty?: boolean } & Document)[];\r\n  totalSize?: number;\r\n  totalSizeMb?: number;\r\n  ok: 1 | 0;\r\n}\r\n\r\n/** @public */\r\nexport interface ListDatabasesOptions extends CommandOperationOptions {\r\n  /** A query predicate that determines which databases are listed */\r\n  filter?: Document;\r\n  /** A flag to indicate whether the command should return just the database names, or return both database names and size information */\r\n  nameOnly?: boolean;\r\n  /** A flag that determines which databases are returned based on the user privileges when access control is enabled */\r\n  authorizedDatabases?: boolean;\r\n}\r\n\r\n/** @internal */\r\nexport class ListDatabasesOperation extends CommandOperation<ListDatabasesResult> {\r\n  override options: ListDatabasesOptions;\r\n\r\n  constructor(db: Db, options?: ListDatabasesOptions) {\r\n    super(db, options);\r\n    this.options = options ?? {};\r\n    this.ns = new MongoDBNamespace('admin', '$cmd');\r\n  }\r\n\r\n  override get commandName() {\r\n    return 'listDatabases' as const;\r\n  }\r\n\r\n  override async execute(\r\n    server: Server,\r\n    session: ClientSession | undefined\r\n  ): Promise<ListDatabasesResult> {\r\n    const cmd: Document = { listDatabases: 1 };\r\n\r\n    if (typeof this.options.nameOnly === 'boolean') {\r\n      cmd.nameOnly = this.options.nameOnly;\r\n    }\r\n\r\n    if (this.options.filter) {\r\n      cmd.filter = this.options.filter;\r\n    }\r\n\r\n    if (typeof this.options.authorizedDatabases === 'boolean') {\r\n      cmd.authorizedDatabases = this.options.authorizedDatabases;\r\n    }\r\n\r\n    // we check for undefined specifically here to allow falsy values\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    if (maxWireVersion(server) >= 9 && this.options.comment !== undefined) {\r\n      cmd.comment = this.options.comment;\r\n    }\r\n\r\n    return super.executeCommand(server, session, cmd) as TODO_NODE_3286;\r\n  }\r\n}\r\n\r\ndefineAspects(ListDatabasesOperation, [Aspect.READ_OPERATION, Aspect.RETRYABLE]);\r\n"],"mappings":";;;;;;AAKA,MAAAA,OAAA,GAAAC,OAAA;AACA,MAAAC,SAAA,GAAAD,OAAA;AACA,MAAAE,WAAA,GAAAF,OAAA;AAoBA;AACA,MAAaG,sBAAuB,SAAQF,SAAA,CAAAG,gBAAqC;EAG/EC,YAAYC,EAAM,EAAEC,OAA8B;IAChD,KAAK,CAACD,EAAE,EAAEC,OAAO,CAAC;IAClB,IAAI,CAACA,OAAO,GAAGA,OAAO,IAAI,EAAE;IAC5B,IAAI,CAACC,EAAE,GAAG,IAAIT,OAAA,CAAAU,gBAAgB,CAAC,OAAO,EAAE,MAAM,CAAC;EACjD;EAEA,IAAaC,WAAWA,CAAA;IACtB,OAAO,eAAwB;EACjC;EAES,MAAMC,OAAOA,CACpBC,MAAc,EACdC,OAAkC;IAElC,MAAMC,GAAG,GAAa;MAAEC,aAAa,EAAE;IAAC,CAAE;IAE1C,IAAI,OAAO,IAAI,CAACR,OAAO,CAACS,QAAQ,KAAK,SAAS,EAAE;MAC9CF,GAAG,CAACE,QAAQ,GAAG,IAAI,CAACT,OAAO,CAACS,QAAQ;;IAGtC,IAAI,IAAI,CAACT,OAAO,CAACU,MAAM,EAAE;MACvBH,GAAG,CAACG,MAAM,GAAG,IAAI,CAACV,OAAO,CAACU,MAAM;;IAGlC,IAAI,OAAO,IAAI,CAACV,OAAO,CAACW,mBAAmB,KAAK,SAAS,EAAE;MACzDJ,GAAG,CAACI,mBAAmB,GAAG,IAAI,CAACX,OAAO,CAACW,mBAAmB;;IAG5D;IACA;IACA,IAAI,IAAAnB,OAAA,CAAAoB,cAAc,EAACP,MAAM,CAAC,IAAI,CAAC,IAAI,IAAI,CAACL,OAAO,CAACa,OAAO,KAAKC,SAAS,EAAE;MACrEP,GAAG,CAACM,OAAO,GAAG,IAAI,CAACb,OAAO,CAACa,OAAO;;IAGpC,OAAO,KAAK,CAACE,cAAc,CAACV,MAAM,EAAEC,OAAO,EAAEC,GAAG,CAAmB;EACrE;;AAtCFS,OAAA,CAAApB,sBAAA,GAAAA,sBAAA;AAyCA,IAAAD,WAAA,CAAAsB,aAAa,EAACrB,sBAAsB,EAAE,CAACD,WAAA,CAAAuB,MAAM,CAACC,cAAc,EAAExB,WAAA,CAAAuB,MAAM,CAACE,SAAS,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}