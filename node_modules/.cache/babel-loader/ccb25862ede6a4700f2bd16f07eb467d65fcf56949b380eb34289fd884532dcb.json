{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BulkWriteOperation = void 0;\nconst operation_1 = require(\"./operation\");\n/** @internal */\nclass BulkWriteOperation extends operation_1.AbstractOperation {\n  constructor(collection, operations, options) {\n    super(options);\n    this.options = options;\n    this.collection = collection;\n    this.operations = operations;\n  }\n  get commandName() {\n    return 'bulkWrite';\n  }\n  async execute(server, session) {\n    const coll = this.collection;\n    const operations = this.operations;\n    const options = {\n      ...this.options,\n      ...this.bsonOptions,\n      readPreference: this.readPreference\n    };\n    // Create the bulk operation\n    const bulk = options.ordered === false ? coll.initializeUnorderedBulkOp(options) : coll.initializeOrderedBulkOp(options);\n    // for each op go through and add to the bulk\n    for (let i = 0; i < operations.length; i++) {\n      bulk.raw(operations[i]);\n    }\n    // Execute the bulk\n    const result = await bulk.execute({\n      ...options,\n      session\n    });\n    return result;\n  }\n}\nexports.BulkWriteOperation = BulkWriteOperation;\n(0, operation_1.defineAspects)(BulkWriteOperation, [operation_1.Aspect.WRITE_OPERATION]);","map":{"version":3,"names":["operation_1","require","BulkWriteOperation","AbstractOperation","constructor","collection","operations","options","commandName","execute","server","session","coll","bsonOptions","readPreference","bulk","ordered","initializeUnorderedBulkOp","initializeOrderedBulkOp","i","length","raw","result","exports","defineAspects","Aspect","WRITE_OPERATION"],"sources":["C:\\Users\\sumit\\Desktop\\Final project\\Expense-Tracker-Springboot-Frontend\\node_modules\\mongodb\\src\\operations\\bulk_write.ts"],"sourcesContent":["import type {\r\n  AnyBulkWriteOperation,\r\n  BulkOperationBase,\r\n  BulkWriteOptions,\r\n  BulkWriteResult\r\n} from '../bulk/common';\r\nimport type { Collection } from '../collection';\r\nimport type { Server } from '../sdam/server';\r\nimport type { ClientSession } from '../sessions';\r\nimport { AbstractOperation, Aspect, defineAspects } from './operation';\r\n\r\n/** @internal */\r\nexport class BulkWriteOperation extends AbstractOperation<BulkWriteResult> {\r\n  override options: BulkWriteOptions;\r\n  collection: Collection;\r\n  operations: AnyBulkWriteOperation[];\r\n\r\n  constructor(\r\n    collection: Collection,\r\n    operations: AnyBulkWriteOperation[],\r\n    options: BulkWriteOptions\r\n  ) {\r\n    super(options);\r\n    this.options = options;\r\n    this.collection = collection;\r\n    this.operations = operations;\r\n  }\r\n\r\n  override get commandName() {\r\n    return 'bulkWrite' as const;\r\n  }\r\n\r\n  override async execute(\r\n    server: Server,\r\n    session: ClientSession | undefined\r\n  ): Promise<BulkWriteResult> {\r\n    const coll = this.collection;\r\n    const operations = this.operations;\r\n    const options = { ...this.options, ...this.bsonOptions, readPreference: this.readPreference };\r\n\r\n    // Create the bulk operation\r\n    const bulk: BulkOperationBase =\r\n      options.ordered === false\r\n        ? coll.initializeUnorderedBulkOp(options)\r\n        : coll.initializeOrderedBulkOp(options);\r\n\r\n    // for each op go through and add to the bulk\r\n    for (let i = 0; i < operations.length; i++) {\r\n      bulk.raw(operations[i]);\r\n    }\r\n\r\n    // Execute the bulk\r\n    const result = await bulk.execute({ ...options, session });\r\n    return result;\r\n  }\r\n}\r\n\r\ndefineAspects(BulkWriteOperation, [Aspect.WRITE_OPERATION]);\r\n"],"mappings":";;;;;;AASA,MAAAA,WAAA,GAAAC,OAAA;AAEA;AACA,MAAaC,kBAAmB,SAAQF,WAAA,CAAAG,iBAAkC;EAKxEC,YACEC,UAAsB,EACtBC,UAAmC,EACnCC,OAAyB;IAEzB,KAAK,CAACA,OAAO,CAAC;IACd,IAAI,CAACA,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACF,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,UAAU,GAAGA,UAAU;EAC9B;EAEA,IAAaE,WAAWA,CAAA;IACtB,OAAO,WAAoB;EAC7B;EAES,MAAMC,OAAOA,CACpBC,MAAc,EACdC,OAAkC;IAElC,MAAMC,IAAI,GAAG,IAAI,CAACP,UAAU;IAC5B,MAAMC,UAAU,GAAG,IAAI,CAACA,UAAU;IAClC,MAAMC,OAAO,GAAG;MAAE,GAAG,IAAI,CAACA,OAAO;MAAE,GAAG,IAAI,CAACM,WAAW;MAAEC,cAAc,EAAE,IAAI,CAACA;IAAc,CAAE;IAE7F;IACA,MAAMC,IAAI,GACRR,OAAO,CAACS,OAAO,KAAK,KAAK,GACrBJ,IAAI,CAACK,yBAAyB,CAACV,OAAO,CAAC,GACvCK,IAAI,CAACM,uBAAuB,CAACX,OAAO,CAAC;IAE3C;IACA,KAAK,IAAIY,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGb,UAAU,CAACc,MAAM,EAAED,CAAC,EAAE,EAAE;MAC1CJ,IAAI,CAACM,GAAG,CAACf,UAAU,CAACa,CAAC,CAAC,CAAC;;IAGzB;IACA,MAAMG,MAAM,GAAG,MAAMP,IAAI,CAACN,OAAO,CAAC;MAAE,GAAGF,OAAO;MAAEI;IAAO,CAAE,CAAC;IAC1D,OAAOW,MAAM;EACf;;AA1CFC,OAAA,CAAArB,kBAAA,GAAAA,kBAAA;AA6CA,IAAAF,WAAA,CAAAwB,aAAa,EAACtB,kBAAkB,EAAE,CAACF,WAAA,CAAAyB,MAAM,CAACC,eAAe,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}