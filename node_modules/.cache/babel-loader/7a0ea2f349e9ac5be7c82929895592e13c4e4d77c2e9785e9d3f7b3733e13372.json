{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MongoCR = void 0;\nconst crypto = require(\"crypto\");\nconst error_1 = require(\"../../error\");\nconst utils_1 = require(\"../../utils\");\nconst auth_provider_1 = require(\"./auth_provider\");\nclass MongoCR extends auth_provider_1.AuthProvider {\n  async auth(authContext) {\n    const {\n      connection,\n      credentials\n    } = authContext;\n    if (!credentials) {\n      throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n    }\n    const {\n      username,\n      password,\n      source\n    } = credentials;\n    const {\n      nonce\n    } = await connection.command((0, utils_1.ns)(`${source}.$cmd`), {\n      getnonce: 1\n    }, undefined);\n    const hashPassword = crypto.createHash('md5').update(`${username}:mongo:${password}`, 'utf8').digest('hex');\n    // Final key\n    const key = crypto.createHash('md5').update(`${nonce}${username}${hashPassword}`, 'utf8').digest('hex');\n    const authenticateCommand = {\n      authenticate: 1,\n      user: username,\n      nonce,\n      key\n    };\n    await connection.command((0, utils_1.ns)(`${source}.$cmd`), authenticateCommand, undefined);\n  }\n}\nexports.MongoCR = MongoCR;","map":{"version":3,"names":["crypto","require","error_1","utils_1","auth_provider_1","MongoCR","AuthProvider","auth","authContext","connection","credentials","MongoMissingCredentialsError","username","password","source","nonce","command","ns","getnonce","undefined","hashPassword","createHash","update","digest","key","authenticateCommand","authenticate","user","exports"],"sources":["C:\\Users\\sumit\\Desktop\\Final project\\Expense-Tracker-Springboot-Frontend\\node_modules\\mongodb\\src\\cmap\\auth\\mongocr.ts"],"sourcesContent":["import * as crypto from 'crypto';\r\n\r\nimport { MongoMissingCredentialsError } from '../../error';\r\nimport { ns } from '../../utils';\r\nimport { type AuthContext, AuthProvider } from './auth_provider';\r\n\r\nexport class MongoCR extends AuthProvider {\r\n  override async auth(authContext: AuthContext): Promise<void> {\r\n    const { connection, credentials } = authContext;\r\n    if (!credentials) {\r\n      throw new MongoMissingCredentialsError('AuthContext must provide credentials.');\r\n    }\r\n\r\n    const { username, password, source } = credentials;\r\n\r\n    const { nonce } = await connection.command(ns(`${source}.$cmd`), { getnonce: 1 }, undefined);\r\n\r\n    const hashPassword = crypto\r\n      .createHash('md5')\r\n      .update(`${username}:mongo:${password}`, 'utf8')\r\n      .digest('hex');\r\n\r\n    // Final key\r\n    const key = crypto\r\n      .createHash('md5')\r\n      .update(`${nonce}${username}${hashPassword}`, 'utf8')\r\n      .digest('hex');\r\n\r\n    const authenticateCommand = {\r\n      authenticate: 1,\r\n      user: username,\r\n      nonce,\r\n      key\r\n    };\r\n\r\n    await connection.command(ns(`${source}.$cmd`), authenticateCommand, undefined);\r\n  }\r\n}\r\n"],"mappings":";;;;;;AAAA,MAAAA,MAAA,GAAAC,OAAA;AAEA,MAAAC,OAAA,GAAAD,OAAA;AACA,MAAAE,OAAA,GAAAF,OAAA;AACA,MAAAG,eAAA,GAAAH,OAAA;AAEA,MAAaI,OAAQ,SAAQD,eAAA,CAAAE,YAAY;EAC9B,MAAMC,IAAIA,CAACC,WAAwB;IAC1C,MAAM;MAAEC,UAAU;MAAEC;IAAW,CAAE,GAAGF,WAAW;IAC/C,IAAI,CAACE,WAAW,EAAE;MAChB,MAAM,IAAIR,OAAA,CAAAS,4BAA4B,CAAC,uCAAuC,CAAC;;IAGjF,MAAM;MAAEC,QAAQ;MAAEC,QAAQ;MAAEC;IAAM,CAAE,GAAGJ,WAAW;IAElD,MAAM;MAAEK;IAAK,CAAE,GAAG,MAAMN,UAAU,CAACO,OAAO,CAAC,IAAAb,OAAA,CAAAc,EAAE,EAAC,GAAGH,MAAM,OAAO,CAAC,EAAE;MAAEI,QAAQ,EAAE;IAAC,CAAE,EAAEC,SAAS,CAAC;IAE5F,MAAMC,YAAY,GAAGpB,MAAM,CACxBqB,UAAU,CAAC,KAAK,CAAC,CACjBC,MAAM,CAAC,GAAGV,QAAQ,UAAUC,QAAQ,EAAE,EAAE,MAAM,CAAC,CAC/CU,MAAM,CAAC,KAAK,CAAC;IAEhB;IACA,MAAMC,GAAG,GAAGxB,MAAM,CACfqB,UAAU,CAAC,KAAK,CAAC,CACjBC,MAAM,CAAC,GAAGP,KAAK,GAAGH,QAAQ,GAAGQ,YAAY,EAAE,EAAE,MAAM,CAAC,CACpDG,MAAM,CAAC,KAAK,CAAC;IAEhB,MAAME,mBAAmB,GAAG;MAC1BC,YAAY,EAAE,CAAC;MACfC,IAAI,EAAEf,QAAQ;MACdG,KAAK;MACLS;KACD;IAED,MAAMf,UAAU,CAACO,OAAO,CAAC,IAAAb,OAAA,CAAAc,EAAE,EAAC,GAAGH,MAAM,OAAO,CAAC,EAAEW,mBAAmB,EAAEN,SAAS,CAAC;EAChF;;AA9BFS,OAAA,CAAAvB,OAAA,GAAAA,OAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}