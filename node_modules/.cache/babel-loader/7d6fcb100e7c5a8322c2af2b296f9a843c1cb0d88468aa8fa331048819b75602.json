{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.refreshKMSCredentials = exports.isEmptyCredentials = void 0;\nconst aws_1 = require(\"./aws\");\nconst azure_1 = require(\"./azure\");\nconst gcp_1 = require(\"./gcp\");\n/**\r\n * Auto credential fetching should only occur when the provider is defined on the kmsProviders map\r\n * and the settings are an empty object.\r\n *\r\n * This is distinct from a nullish provider key.\r\n *\r\n * @internal - exposed for testing purposes only\r\n */\nfunction isEmptyCredentials(providerName, kmsProviders) {\n  const provider = kmsProviders[providerName];\n  if (provider == null) {\n    return false;\n  }\n  return typeof provider === 'object' && Object.keys(provider).length === 0;\n}\nexports.isEmptyCredentials = isEmptyCredentials;\n/**\r\n * Load cloud provider credentials for the user provided KMS providers.\r\n * Credentials will only attempt to get loaded if they do not exist\r\n * and no existing credentials will get overwritten.\r\n *\r\n * @internal\r\n */\nasync function refreshKMSCredentials(kmsProviders) {\n  let finalKMSProviders = kmsProviders;\n  if (isEmptyCredentials('aws', kmsProviders)) {\n    finalKMSProviders = await (0, aws_1.loadAWSCredentials)(finalKMSProviders);\n  }\n  if (isEmptyCredentials('gcp', kmsProviders)) {\n    finalKMSProviders = await (0, gcp_1.loadGCPCredentials)(finalKMSProviders);\n  }\n  if (isEmptyCredentials('azure', kmsProviders)) {\n    finalKMSProviders = await (0, azure_1.loadAzureCredentials)(finalKMSProviders);\n  }\n  return finalKMSProviders;\n}\nexports.refreshKMSCredentials = refreshKMSCredentials;","map":{"version":3,"names":["aws_1","require","azure_1","gcp_1","isEmptyCredentials","providerName","kmsProviders","provider","Object","keys","length","exports","refreshKMSCredentials","finalKMSProviders","loadAWSCredentials","loadGCPCredentials","loadAzureCredentials"],"sources":["C:\\Users\\sumit\\Desktop\\Final project\\Expense-Tracker-Springboot-Frontend\\node_modules\\mongodb\\src\\client-side-encryption\\providers\\index.ts"],"sourcesContent":["import { loadAWSCredentials } from './aws';\r\nimport { loadAzureCredentials } from './azure';\r\nimport { loadGCPCredentials } from './gcp';\r\n\r\n/**\r\n * @public\r\n */\r\nexport type ClientEncryptionDataKeyProvider = 'aws' | 'azure' | 'gcp' | 'local' | 'kmip';\r\n\r\n/**\r\n * @public\r\n * Configuration options that are used by specific KMS providers during key generation, encryption, and decryption.\r\n */\r\nexport interface KMSProviders {\r\n  /**\r\n   * Configuration options for using 'aws' as your KMS provider\r\n   */\r\n  aws?:\r\n    | {\r\n        /**\r\n         * The access key used for the AWS KMS provider\r\n         */\r\n        accessKeyId: string;\r\n\r\n        /**\r\n         * The secret access key used for the AWS KMS provider\r\n         */\r\n        secretAccessKey: string;\r\n\r\n        /**\r\n         * An optional AWS session token that will be used as the\r\n         * X-Amz-Security-Token header for AWS requests.\r\n         */\r\n        sessionToken?: string;\r\n      }\r\n    | Record<string, never>;\r\n\r\n  /**\r\n   * Configuration options for using 'local' as your KMS provider\r\n   */\r\n  local?: {\r\n    /**\r\n     * The master key used to encrypt/decrypt data keys.\r\n     * A 96-byte long Buffer or base64 encoded string.\r\n     */\r\n    key: Buffer | string;\r\n  };\r\n\r\n  /**\r\n   * Configuration options for using 'kmip' as your KMS provider\r\n   */\r\n  kmip?: {\r\n    /**\r\n     * The output endpoint string.\r\n     * The endpoint consists of a hostname and port separated by a colon.\r\n     * E.g. \"example.com:123\". A port is always present.\r\n     */\r\n    endpoint?: string;\r\n  };\r\n\r\n  /**\r\n   * Configuration options for using 'azure' as your KMS provider\r\n   */\r\n  azure?:\r\n    | {\r\n        /**\r\n         * The tenant ID identifies the organization for the account\r\n         */\r\n        tenantId: string;\r\n\r\n        /**\r\n         * The client ID to authenticate a registered application\r\n         */\r\n        clientId: string;\r\n\r\n        /**\r\n         * The client secret to authenticate a registered application\r\n         */\r\n        clientSecret: string;\r\n\r\n        /**\r\n         * If present, a host with optional port. E.g. \"example.com\" or \"example.com:443\".\r\n         * This is optional, and only needed if customer is using a non-commercial Azure instance\r\n         * (e.g. a government or China account, which use different URLs).\r\n         * Defaults to \"login.microsoftonline.com\"\r\n         */\r\n        identityPlatformEndpoint?: string | undefined;\r\n      }\r\n    | {\r\n        /**\r\n         * If present, an access token to authenticate with Azure.\r\n         */\r\n        accessToken: string;\r\n      }\r\n    | Record<string, never>;\r\n\r\n  /**\r\n   * Configuration options for using 'gcp' as your KMS provider\r\n   */\r\n  gcp?:\r\n    | {\r\n        /**\r\n         * The service account email to authenticate\r\n         */\r\n        email: string;\r\n\r\n        /**\r\n         * A PKCS#8 encrypted key. This can either be a base64 string or a binary representation\r\n         */\r\n        privateKey: string | Buffer;\r\n\r\n        /**\r\n         * If present, a host with optional port. E.g. \"example.com\" or \"example.com:443\".\r\n         * Defaults to \"oauth2.googleapis.com\"\r\n         */\r\n        endpoint?: string | undefined;\r\n      }\r\n    | {\r\n        /**\r\n         * If present, an access token to authenticate with GCP.\r\n         */\r\n        accessToken: string;\r\n      }\r\n    | Record<string, never>;\r\n}\r\n\r\n/**\r\n * Auto credential fetching should only occur when the provider is defined on the kmsProviders map\r\n * and the settings are an empty object.\r\n *\r\n * This is distinct from a nullish provider key.\r\n *\r\n * @internal - exposed for testing purposes only\r\n */\r\nexport function isEmptyCredentials(\r\n  providerName: ClientEncryptionDataKeyProvider,\r\n  kmsProviders: KMSProviders\r\n): boolean {\r\n  const provider = kmsProviders[providerName];\r\n  if (provider == null) {\r\n    return false;\r\n  }\r\n  return typeof provider === 'object' && Object.keys(provider).length === 0;\r\n}\r\n\r\n/**\r\n * Load cloud provider credentials for the user provided KMS providers.\r\n * Credentials will only attempt to get loaded if they do not exist\r\n * and no existing credentials will get overwritten.\r\n *\r\n * @internal\r\n */\r\nexport async function refreshKMSCredentials(kmsProviders: KMSProviders): Promise<KMSProviders> {\r\n  let finalKMSProviders = kmsProviders;\r\n\r\n  if (isEmptyCredentials('aws', kmsProviders)) {\r\n    finalKMSProviders = await loadAWSCredentials(finalKMSProviders);\r\n  }\r\n\r\n  if (isEmptyCredentials('gcp', kmsProviders)) {\r\n    finalKMSProviders = await loadGCPCredentials(finalKMSProviders);\r\n  }\r\n\r\n  if (isEmptyCredentials('azure', kmsProviders)) {\r\n    finalKMSProviders = await loadAzureCredentials(finalKMSProviders);\r\n  }\r\n  return finalKMSProviders;\r\n}\r\n"],"mappings":";;;;;;AAAA,MAAAA,KAAA,GAAAC,OAAA;AACA,MAAAC,OAAA,GAAAD,OAAA;AACA,MAAAE,KAAA,GAAAF,OAAA;AA4HA;;;;;;;;AAQA,SAAgBG,kBAAkBA,CAChCC,YAA6C,EAC7CC,YAA0B;EAE1B,MAAMC,QAAQ,GAAGD,YAAY,CAACD,YAAY,CAAC;EAC3C,IAAIE,QAAQ,IAAI,IAAI,EAAE;IACpB,OAAO,KAAK;;EAEd,OAAO,OAAOA,QAAQ,KAAK,QAAQ,IAAIC,MAAM,CAACC,IAAI,CAACF,QAAQ,CAAC,CAACG,MAAM,KAAK,CAAC;AAC3E;AATAC,OAAA,CAAAP,kBAAA,GAAAA,kBAAA;AAWA;;;;;;;AAOO,eAAeQ,qBAAqBA,CAACN,YAA0B;EACpE,IAAIO,iBAAiB,GAAGP,YAAY;EAEpC,IAAIF,kBAAkB,CAAC,KAAK,EAAEE,YAAY,CAAC,EAAE;IAC3CO,iBAAiB,GAAG,MAAM,IAAAb,KAAA,CAAAc,kBAAkB,EAACD,iBAAiB,CAAC;;EAGjE,IAAIT,kBAAkB,CAAC,KAAK,EAAEE,YAAY,CAAC,EAAE;IAC3CO,iBAAiB,GAAG,MAAM,IAAAV,KAAA,CAAAY,kBAAkB,EAACF,iBAAiB,CAAC;;EAGjE,IAAIT,kBAAkB,CAAC,OAAO,EAAEE,YAAY,CAAC,EAAE;IAC7CO,iBAAiB,GAAG,MAAM,IAAAX,OAAA,CAAAc,oBAAoB,EAACH,iBAAiB,CAAC;;EAEnE,OAAOA,iBAAiB;AAC1B;AAfAF,OAAA,CAAAC,qBAAA,GAAAA,qBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}