{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getMongoDBClientEncryption = exports.aws4 = exports.getSocks = exports.getSnappy = exports.getGcpMetadata = exports.getAwsCredentialProvider = exports.getZstdLibrary = exports.ZStandard = exports.getKerberos = exports.Kerberos = void 0;\nconst error_1 = require(\"./error\");\nfunction makeErrorModule(error) {\n  const props = error ? {\n    kModuleError: error\n  } : {};\n  return new Proxy(props, {\n    get: (_, key) => {\n      if (key === 'kModuleError') {\n        return error;\n      }\n      throw error;\n    },\n    set: () => {\n      throw error;\n    }\n  });\n}\nexports.Kerberos = makeErrorModule(new error_1.MongoMissingDependencyError('Optional module `kerberos` not found. Please install it to enable kerberos authentication'));\nfunction getKerberos() {\n  try {\n    // Ensure you always wrap an optional require in the try block NODE-3199\n    exports.Kerberos = require('kerberos');\n    return exports.Kerberos;\n  } catch {\n    return exports.Kerberos;\n  }\n}\nexports.getKerberos = getKerberos;\nexports.ZStandard = makeErrorModule(new error_1.MongoMissingDependencyError('Optional module `@mongodb-js/zstd` not found. Please install it to enable zstd compression'));\nfunction getZstdLibrary() {\n  try {\n    exports.ZStandard = require('@mongodb-js/zstd');\n    return exports.ZStandard;\n  } catch {\n    return exports.ZStandard;\n  }\n}\nexports.getZstdLibrary = getZstdLibrary;\nfunction getAwsCredentialProvider() {\n  try {\n    // Ensure you always wrap an optional require in the try block NODE-3199\n    const credentialProvider = require('@aws-sdk/credential-providers');\n    return credentialProvider;\n  } catch {\n    return makeErrorModule(new error_1.MongoMissingDependencyError('Optional module `@aws-sdk/credential-providers` not found.' + ' Please install it to enable getting aws credentials via the official sdk.'));\n  }\n}\nexports.getAwsCredentialProvider = getAwsCredentialProvider;\nfunction getGcpMetadata() {\n  try {\n    // Ensure you always wrap an optional require in the try block NODE-3199\n    const credentialProvider = require('gcp-metadata');\n    return credentialProvider;\n  } catch {\n    return makeErrorModule(new error_1.MongoMissingDependencyError('Optional module `gcp-metadata` not found.' + ' Please install it to enable getting gcp credentials via the official sdk.'));\n  }\n}\nexports.getGcpMetadata = getGcpMetadata;\nfunction getSnappy() {\n  try {\n    // Ensure you always wrap an optional require in the try block NODE-3199\n    const value = require('snappy');\n    return value;\n  } catch (cause) {\n    const kModuleError = new error_1.MongoMissingDependencyError('Optional module `snappy` not found. Please install it to enable snappy compression', {\n      cause\n    });\n    return {\n      kModuleError\n    };\n  }\n}\nexports.getSnappy = getSnappy;\nfunction getSocks() {\n  try {\n    // Ensure you always wrap an optional require in the try block NODE-3199\n    const value = require('socks');\n    return value;\n  } catch (cause) {\n    const kModuleError = new error_1.MongoMissingDependencyError('Optional module `socks` not found. Please install it to connections over a SOCKS5 proxy', {\n      cause\n    });\n    return {\n      kModuleError\n    };\n  }\n}\nexports.getSocks = getSocks;\nexports.aws4 = makeErrorModule(new error_1.MongoMissingDependencyError('Optional module `aws4` not found. Please install it to enable AWS authentication'));\ntry {\n  // Ensure you always wrap an optional require in the try block NODE-3199\n  exports.aws4 = require('aws4');\n} catch {} // eslint-disable-line\n/** A utility function to get the instance of mongodb-client-encryption, if it exists. */\nfunction getMongoDBClientEncryption() {\n  let mongodbClientEncryption = null;\n  try {\n    // NOTE(NODE-3199): Ensure you always wrap an optional require literally in the try block\n    // Cannot be moved to helper utility function, bundlers search and replace the actual require call\n    // in a way that makes this line throw at bundle time, not runtime, catching here will make bundling succeed\n    mongodbClientEncryption = require('mongodb-client-encryption');\n  } catch (cause) {\n    const kModuleError = new error_1.MongoMissingDependencyError('Optional module `mongodb-client-encryption` not found. Please install it to use auto encryption or ClientEncryption.', {\n      cause\n    });\n    return {\n      kModuleError\n    };\n  }\n  return mongodbClientEncryption;\n}\nexports.getMongoDBClientEncryption = getMongoDBClientEncryption;","map":{"version":3,"names":["error_1","require","makeErrorModule","error","props","kModuleError","Proxy","get","_","key","set","exports","Kerberos","MongoMissingDependencyError","getKerberos","ZStandard","getZstdLibrary","getAwsCredentialProvider","credentialProvider","getGcpMetadata","getSnappy","value","cause","getSocks","aws4","getMongoDBClientEncryption","mongodbClientEncryption"],"sources":["C:\\Users\\sumit\\Desktop\\Final project\\Expense-Tracker-Springboot-Frontend\\node_modules\\mongodb\\src\\deps.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-var-requires */\r\nimport { type Stream } from './cmap/connect';\r\nimport { MongoMissingDependencyError } from './error';\r\nimport type { Callback } from './utils';\r\n\r\nfunction makeErrorModule(error: any) {\r\n  const props = error ? { kModuleError: error } : {};\r\n  return new Proxy(props, {\r\n    get: (_: any, key: any) => {\r\n      if (key === 'kModuleError') {\r\n        return error;\r\n      }\r\n      throw error;\r\n    },\r\n    set: () => {\r\n      throw error;\r\n    }\r\n  });\r\n}\r\n\r\nexport let Kerberos: typeof import('kerberos') | { kModuleError: MongoMissingDependencyError } =\r\n  makeErrorModule(\r\n    new MongoMissingDependencyError(\r\n      'Optional module `kerberos` not found. Please install it to enable kerberos authentication'\r\n    )\r\n  );\r\n\r\nexport function getKerberos(): typeof Kerberos | { kModuleError: MongoMissingDependencyError } {\r\n  try {\r\n    // Ensure you always wrap an optional require in the try block NODE-3199\r\n    Kerberos = require('kerberos');\r\n    return Kerberos;\r\n  } catch {\r\n    return Kerberos;\r\n  }\r\n}\r\n\r\nexport interface KerberosClient {\r\n  step(challenge: string): Promise<string>;\r\n  step(challenge: string, callback: Callback<string>): void;\r\n  wrap(challenge: string, options: { user: string }): Promise<string>;\r\n  wrap(challenge: string, options: { user: string }, callback: Callback<string>): void;\r\n  unwrap(challenge: string): Promise<string>;\r\n  unwrap(challenge: string, callback: Callback<string>): void;\r\n}\r\n\r\ntype ZStandardLib = {\r\n  /**\r\n   * Compress using zstd.\r\n   * @param buf - Buffer to be compressed.\r\n   */\r\n  compress(buf: Buffer, level?: number): Promise<Buffer>;\r\n\r\n  /**\r\n   * Decompress using zstd.\r\n   */\r\n  decompress(buf: Buffer): Promise<Buffer>;\r\n};\r\n\r\nexport let ZStandard: ZStandardLib | { kModuleError: MongoMissingDependencyError } =\r\n  makeErrorModule(\r\n    new MongoMissingDependencyError(\r\n      'Optional module `@mongodb-js/zstd` not found. Please install it to enable zstd compression'\r\n    )\r\n  );\r\n\r\nexport function getZstdLibrary(): typeof ZStandard | { kModuleError: MongoMissingDependencyError } {\r\n  try {\r\n    ZStandard = require('@mongodb-js/zstd');\r\n    return ZStandard;\r\n  } catch {\r\n    return ZStandard;\r\n  }\r\n}\r\n\r\n/**\r\n * @internal\r\n * Copy of the AwsCredentialIdentityProvider interface from [`smithy/types`](https://socket.dev/npm/package/\\@smithy/types/files/1.1.1/dist-types/identity/awsCredentialIdentity.d.ts),\r\n * the return type of the aws-sdk's `fromNodeProviderChain().provider()`.\r\n */\r\nexport interface AWSCredentials {\r\n  accessKeyId: string;\r\n  secretAccessKey: string;\r\n  sessionToken: string;\r\n  expiration?: Date;\r\n}\r\n\r\ntype CredentialProvider = {\r\n  fromNodeProviderChain(\r\n    this: void,\r\n    options: { clientConfig: { region: string } }\r\n  ): () => Promise<AWSCredentials>;\r\n  fromNodeProviderChain(this: void): () => Promise<AWSCredentials>;\r\n};\r\n\r\nexport function getAwsCredentialProvider():\r\n  | CredentialProvider\r\n  | { kModuleError: MongoMissingDependencyError } {\r\n  try {\r\n    // Ensure you always wrap an optional require in the try block NODE-3199\r\n    const credentialProvider = require('@aws-sdk/credential-providers');\r\n    return credentialProvider;\r\n  } catch {\r\n    return makeErrorModule(\r\n      new MongoMissingDependencyError(\r\n        'Optional module `@aws-sdk/credential-providers` not found.' +\r\n          ' Please install it to enable getting aws credentials via the official sdk.'\r\n      )\r\n    );\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport type GcpMetadata =\r\n  | typeof import('gcp-metadata')\r\n  | { kModuleError: MongoMissingDependencyError };\r\n\r\nexport function getGcpMetadata(): GcpMetadata {\r\n  try {\r\n    // Ensure you always wrap an optional require in the try block NODE-3199\r\n    const credentialProvider = require('gcp-metadata');\r\n    return credentialProvider;\r\n  } catch {\r\n    return makeErrorModule(\r\n      new MongoMissingDependencyError(\r\n        'Optional module `gcp-metadata` not found.' +\r\n          ' Please install it to enable getting gcp credentials via the official sdk.'\r\n      )\r\n    );\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport type SnappyLib = {\r\n  /**\r\n   * In order to support both we must check the return value of the function\r\n   * @param buf - Buffer to be compressed\r\n   */\r\n  compress(buf: Buffer): Promise<Buffer>;\r\n\r\n  /**\r\n   * In order to support both we must check the return value of the function\r\n   * @param buf - Buffer to be compressed\r\n   */\r\n  uncompress(buf: Buffer, opt: { asBuffer: true }): Promise<Buffer>;\r\n};\r\n\r\nexport function getSnappy(): SnappyLib | { kModuleError: MongoMissingDependencyError } {\r\n  try {\r\n    // Ensure you always wrap an optional require in the try block NODE-3199\r\n    const value = require('snappy');\r\n    return value;\r\n  } catch (cause) {\r\n    const kModuleError = new MongoMissingDependencyError(\r\n      'Optional module `snappy` not found. Please install it to enable snappy compression',\r\n      { cause }\r\n    );\r\n    return { kModuleError };\r\n  }\r\n}\r\n\r\nexport type SocksLib = {\r\n  SocksClient: {\r\n    createConnection(options: {\r\n      command: 'connect';\r\n      destination: { host: string; port: number };\r\n      proxy: {\r\n        /** host and port are ignored because we pass existing_socket */\r\n        host: 'iLoveJavaScript';\r\n        port: 0;\r\n        type: 5;\r\n        userId?: string;\r\n        password?: string;\r\n      };\r\n      timeout?: number;\r\n      /** We always create our own socket, and pass it to this API for proxy negotiation */\r\n      existing_socket: Stream;\r\n    }): Promise<{ socket: Stream }>;\r\n  };\r\n};\r\n\r\nexport function getSocks(): SocksLib | { kModuleError: MongoMissingDependencyError } {\r\n  try {\r\n    // Ensure you always wrap an optional require in the try block NODE-3199\r\n    const value = require('socks');\r\n    return value;\r\n  } catch (cause) {\r\n    const kModuleError = new MongoMissingDependencyError(\r\n      'Optional module `socks` not found. Please install it to connections over a SOCKS5 proxy',\r\n      { cause }\r\n    );\r\n    return { kModuleError };\r\n  }\r\n}\r\n\r\ninterface AWS4 {\r\n  /**\r\n   * Created these inline types to better assert future usage of this API\r\n   * @param options - options for request\r\n   * @param credentials - AWS credential details, sessionToken should be omitted entirely if its false-y\r\n   */\r\n  sign(\r\n    this: void,\r\n    options: {\r\n      path: '/';\r\n      body: string;\r\n      host: string;\r\n      method: 'POST';\r\n      headers: {\r\n        'Content-Type': 'application/x-www-form-urlencoded';\r\n        'Content-Length': number;\r\n        'X-MongoDB-Server-Nonce': string;\r\n        'X-MongoDB-GS2-CB-Flag': 'n';\r\n      };\r\n      service: string;\r\n      region: string;\r\n    },\r\n    credentials:\r\n      | {\r\n          accessKeyId: string;\r\n          secretAccessKey: string;\r\n          sessionToken: string;\r\n        }\r\n      | {\r\n          accessKeyId: string;\r\n          secretAccessKey: string;\r\n        }\r\n      | undefined\r\n  ): {\r\n    headers: {\r\n      Authorization: string;\r\n      'X-Amz-Date': string;\r\n    };\r\n  };\r\n}\r\n\r\nexport let aws4: AWS4 | { kModuleError: MongoMissingDependencyError } = makeErrorModule(\r\n  new MongoMissingDependencyError(\r\n    'Optional module `aws4` not found. Please install it to enable AWS authentication'\r\n  )\r\n);\r\n\r\ntry {\r\n  // Ensure you always wrap an optional require in the try block NODE-3199\r\n  aws4 = require('aws4');\r\n} catch {} // eslint-disable-line\r\n\r\n/** A utility function to get the instance of mongodb-client-encryption, if it exists. */\r\nexport function getMongoDBClientEncryption():\r\n  | typeof import('mongodb-client-encryption')\r\n  | { kModuleError: MongoMissingDependencyError } {\r\n  let mongodbClientEncryption = null;\r\n\r\n  try {\r\n    // NOTE(NODE-3199): Ensure you always wrap an optional require literally in the try block\r\n    // Cannot be moved to helper utility function, bundlers search and replace the actual require call\r\n    // in a way that makes this line throw at bundle time, not runtime, catching here will make bundling succeed\r\n    mongodbClientEncryption = require('mongodb-client-encryption');\r\n  } catch (cause) {\r\n    const kModuleError = new MongoMissingDependencyError(\r\n      'Optional module `mongodb-client-encryption` not found. Please install it to use auto encryption or ClientEncryption.',\r\n      { cause }\r\n    );\r\n    return { kModuleError };\r\n  }\r\n\r\n  return mongodbClientEncryption;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}