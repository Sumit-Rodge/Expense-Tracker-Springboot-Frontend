{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DropDatabaseOperation = exports.DropCollectionOperation = void 0;\nconst error_1 = require(\"../error\");\nconst command_1 = require(\"./command\");\nconst operation_1 = require(\"./operation\");\n/** @internal */\nclass DropCollectionOperation extends command_1.CommandOperation {\n  constructor(db, name, options = {}) {\n    super(db, options);\n    this.db = db;\n    this.options = options;\n    this.name = name;\n  }\n  get commandName() {\n    return 'drop';\n  }\n  async execute(server, session) {\n    const db = this.db;\n    const options = this.options;\n    const name = this.name;\n    const encryptedFieldsMap = db.client.options.autoEncryption?.encryptedFieldsMap;\n    let encryptedFields = options.encryptedFields ?? encryptedFieldsMap?.[`${db.databaseName}.${name}`];\n    if (!encryptedFields && encryptedFieldsMap) {\n      // If the MongoClient was configured with an encryptedFieldsMap,\n      // and no encryptedFields config was available in it or explicitly\n      // passed as an argument, the spec tells us to look one up using\n      // listCollections().\n      const listCollectionsResult = await db.listCollections({\n        name\n      }, {\n        nameOnly: false\n      }).toArray();\n      encryptedFields = listCollectionsResult?.[0]?.options?.encryptedFields;\n    }\n    if (encryptedFields) {\n      const escCollection = encryptedFields.escCollection || `enxcol_.${name}.esc`;\n      const ecocCollection = encryptedFields.ecocCollection || `enxcol_.${name}.ecoc`;\n      for (const collectionName of [escCollection, ecocCollection]) {\n        // Drop auxilliary collections, ignoring potential NamespaceNotFound errors.\n        const dropOp = new DropCollectionOperation(db, collectionName);\n        try {\n          await dropOp.executeWithoutEncryptedFieldsCheck(server, session);\n        } catch (err) {\n          if (!(err instanceof error_1.MongoServerError) || err.code !== error_1.MONGODB_ERROR_CODES.NamespaceNotFound) {\n            throw err;\n          }\n        }\n      }\n    }\n    return this.executeWithoutEncryptedFieldsCheck(server, session);\n  }\n  async executeWithoutEncryptedFieldsCheck(server, session) {\n    await super.executeCommand(server, session, {\n      drop: this.name\n    });\n    return true;\n  }\n}\nexports.DropCollectionOperation = DropCollectionOperation;\n/** @internal */\nclass DropDatabaseOperation extends command_1.CommandOperation {\n  constructor(db, options) {\n    super(db, options);\n    this.options = options;\n  }\n  get commandName() {\n    return 'dropDatabase';\n  }\n  async execute(server, session) {\n    await super.executeCommand(server, session, {\n      dropDatabase: 1\n    });\n    return true;\n  }\n}\nexports.DropDatabaseOperation = DropDatabaseOperation;\n(0, operation_1.defineAspects)(DropCollectionOperation, [operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(DropDatabaseOperation, [operation_1.Aspect.WRITE_OPERATION]);","map":{"version":3,"names":["error_1","require","command_1","operation_1","DropCollectionOperation","CommandOperation","constructor","db","name","options","commandName","execute","server","session","encryptedFieldsMap","client","autoEncryption","encryptedFields","databaseName","listCollectionsResult","listCollections","nameOnly","toArray","escCollection","ecocCollection","collectionName","dropOp","executeWithoutEncryptedFieldsCheck","err","MongoServerError","code","MONGODB_ERROR_CODES","NamespaceNotFound","executeCommand","drop","exports","DropDatabaseOperation","dropDatabase","defineAspects","Aspect","WRITE_OPERATION"],"sources":["C:\\Users\\sumit\\Desktop\\Final project\\Expense-Tracker-Springboot-Frontend\\node_modules\\mongodb\\src\\operations\\drop.ts"],"sourcesContent":["import type { Document } from '../bson';\r\nimport type { Db } from '../db';\r\nimport { MONGODB_ERROR_CODES, MongoServerError } from '../error';\r\nimport type { Server } from '../sdam/server';\r\nimport type { ClientSession } from '../sessions';\r\nimport { CommandOperation, type CommandOperationOptions } from './command';\r\nimport { Aspect, defineAspects } from './operation';\r\n\r\n/** @public */\r\nexport interface DropCollectionOptions extends CommandOperationOptions {\r\n  /** @experimental */\r\n  encryptedFields?: Document;\r\n}\r\n\r\n/** @internal */\r\nexport class DropCollectionOperation extends CommandOperation<boolean> {\r\n  override options: DropCollectionOptions;\r\n  db: Db;\r\n  name: string;\r\n\r\n  constructor(db: Db, name: string, options: DropCollectionOptions = {}) {\r\n    super(db, options);\r\n    this.db = db;\r\n    this.options = options;\r\n    this.name = name;\r\n  }\r\n\r\n  override get commandName() {\r\n    return 'drop' as const;\r\n  }\r\n\r\n  override async execute(server: Server, session: ClientSession | undefined): Promise<boolean> {\r\n    const db = this.db;\r\n    const options = this.options;\r\n    const name = this.name;\r\n\r\n    const encryptedFieldsMap = db.client.options.autoEncryption?.encryptedFieldsMap;\r\n    let encryptedFields: Document | undefined =\r\n      options.encryptedFields ?? encryptedFieldsMap?.[`${db.databaseName}.${name}`];\r\n\r\n    if (!encryptedFields && encryptedFieldsMap) {\r\n      // If the MongoClient was configured with an encryptedFieldsMap,\r\n      // and no encryptedFields config was available in it or explicitly\r\n      // passed as an argument, the spec tells us to look one up using\r\n      // listCollections().\r\n      const listCollectionsResult = await db\r\n        .listCollections({ name }, { nameOnly: false })\r\n        .toArray();\r\n      encryptedFields = listCollectionsResult?.[0]?.options?.encryptedFields;\r\n    }\r\n\r\n    if (encryptedFields) {\r\n      const escCollection = encryptedFields.escCollection || `enxcol_.${name}.esc`;\r\n      const ecocCollection = encryptedFields.ecocCollection || `enxcol_.${name}.ecoc`;\r\n\r\n      for (const collectionName of [escCollection, ecocCollection]) {\r\n        // Drop auxilliary collections, ignoring potential NamespaceNotFound errors.\r\n        const dropOp = new DropCollectionOperation(db, collectionName);\r\n        try {\r\n          await dropOp.executeWithoutEncryptedFieldsCheck(server, session);\r\n        } catch (err) {\r\n          if (\r\n            !(err instanceof MongoServerError) ||\r\n            err.code !== MONGODB_ERROR_CODES.NamespaceNotFound\r\n          ) {\r\n            throw err;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return this.executeWithoutEncryptedFieldsCheck(server, session);\r\n  }\r\n\r\n  private async executeWithoutEncryptedFieldsCheck(\r\n    server: Server,\r\n    session: ClientSession | undefined\r\n  ): Promise<boolean> {\r\n    await super.executeCommand(server, session, { drop: this.name });\r\n    return true;\r\n  }\r\n}\r\n\r\n/** @public */\r\nexport type DropDatabaseOptions = CommandOperationOptions;\r\n\r\n/** @internal */\r\nexport class DropDatabaseOperation extends CommandOperation<boolean> {\r\n  override options: DropDatabaseOptions;\r\n\r\n  constructor(db: Db, options: DropDatabaseOptions) {\r\n    super(db, options);\r\n    this.options = options;\r\n  }\r\n  override get commandName() {\r\n    return 'dropDatabase' as const;\r\n  }\r\n\r\n  override async execute(server: Server, session: ClientSession | undefined): Promise<boolean> {\r\n    await super.executeCommand(server, session, { dropDatabase: 1 });\r\n    return true;\r\n  }\r\n}\r\n\r\ndefineAspects(DropCollectionOperation, [Aspect.WRITE_OPERATION]);\r\ndefineAspects(DropDatabaseOperation, [Aspect.WRITE_OPERATION]);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}