{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MongoDBAWS = void 0;\nconst process = require(\"process\");\nconst BSON = require(\"../../bson\");\nconst deps_1 = require(\"../../deps\");\nconst error_1 = require(\"../../error\");\nconst utils_1 = require(\"../../utils\");\nconst auth_provider_1 = require(\"./auth_provider\");\nconst mongo_credentials_1 = require(\"./mongo_credentials\");\nconst providers_1 = require(\"./providers\");\n/**\r\n * The following regions use the global AWS STS endpoint, sts.amazonaws.com, by default\r\n * https://docs.aws.amazon.com/sdkref/latest/guide/feature-sts-regionalized-endpoints.html\r\n */\nconst LEGACY_REGIONS = new Set(['ap-northeast-1', 'ap-south-1', 'ap-southeast-1', 'ap-southeast-2', 'aws-global', 'ca-central-1', 'eu-central-1', 'eu-north-1', 'eu-west-1', 'eu-west-2', 'eu-west-3', 'sa-east-1', 'us-east-1', 'us-east-2', 'us-west-1', 'us-west-2']);\nconst ASCII_N = 110;\nconst AWS_RELATIVE_URI = 'http://169.254.170.2';\nconst AWS_EC2_URI = 'http://169.254.169.254';\nconst AWS_EC2_PATH = '/latest/meta-data/iam/security-credentials';\nconst bsonOptions = {\n  useBigInt64: false,\n  promoteLongs: true,\n  promoteValues: true,\n  promoteBuffers: false,\n  bsonRegExp: false\n};\nclass MongoDBAWS extends auth_provider_1.AuthProvider {\n  constructor() {\n    super();\n    MongoDBAWS.credentialProvider ??= (0, deps_1.getAwsCredentialProvider)();\n    let {\n      AWS_STS_REGIONAL_ENDPOINTS = '',\n      AWS_REGION = ''\n    } = process.env;\n    AWS_STS_REGIONAL_ENDPOINTS = AWS_STS_REGIONAL_ENDPOINTS.toLowerCase();\n    AWS_REGION = AWS_REGION.toLowerCase();\n    /** The option setting should work only for users who have explicit settings in their environment, the driver should not encode \"defaults\" */\n    const awsRegionSettingsExist = AWS_REGION.length !== 0 && AWS_STS_REGIONAL_ENDPOINTS.length !== 0;\n    /**\r\n     * If AWS_STS_REGIONAL_ENDPOINTS is set to regional, users are opting into the new behavior of respecting the region settings\r\n     *\r\n     * If AWS_STS_REGIONAL_ENDPOINTS is set to legacy, then \"old\" regions need to keep using the global setting.\r\n     * Technically the SDK gets this wrong, it reaches out to 'sts.us-east-1.amazonaws.com' when it should be 'sts.amazonaws.com'.\r\n     * That is not our bug to fix here. We leave that up to the SDK.\r\n     */\n    const useRegionalSts = AWS_STS_REGIONAL_ENDPOINTS === 'regional' || AWS_STS_REGIONAL_ENDPOINTS === 'legacy' && !LEGACY_REGIONS.has(AWS_REGION);\n    if ('fromNodeProviderChain' in MongoDBAWS.credentialProvider) {\n      this.provider = awsRegionSettingsExist && useRegionalSts ? MongoDBAWS.credentialProvider.fromNodeProviderChain({\n        clientConfig: {\n          region: AWS_REGION\n        }\n      }) : MongoDBAWS.credentialProvider.fromNodeProviderChain();\n    }\n  }\n  async auth(authContext) {\n    const {\n      connection\n    } = authContext;\n    if (!authContext.credentials) {\n      throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n    }\n    if ('kModuleError' in deps_1.aws4) {\n      throw deps_1.aws4['kModuleError'];\n    }\n    const {\n      sign\n    } = deps_1.aws4;\n    if ((0, utils_1.maxWireVersion)(connection) < 9) {\n      throw new error_1.MongoCompatibilityError('MONGODB-AWS authentication requires MongoDB version 4.4 or later');\n    }\n    if (!authContext.credentials.username) {\n      authContext.credentials = await makeTempCredentials(authContext.credentials, this.provider);\n    }\n    const {\n      credentials\n    } = authContext;\n    const accessKeyId = credentials.username;\n    const secretAccessKey = credentials.password;\n    // Allow the user to specify an AWS session token for authentication with temporary credentials.\n    const sessionToken = credentials.mechanismProperties.AWS_SESSION_TOKEN;\n    // If all three defined, include sessionToken, else include username and pass, else no credentials\n    const awsCredentials = accessKeyId && secretAccessKey && sessionToken ? {\n      accessKeyId,\n      secretAccessKey,\n      sessionToken\n    } : accessKeyId && secretAccessKey ? {\n      accessKeyId,\n      secretAccessKey\n    } : undefined;\n    const db = credentials.source;\n    const nonce = await (0, utils_1.randomBytes)(32);\n    // All messages between MongoDB clients and servers are sent as BSON objects\n    // in the payload field of saslStart and saslContinue.\n    const saslStart = {\n      saslStart: 1,\n      mechanism: 'MONGODB-AWS',\n      payload: BSON.serialize({\n        r: nonce,\n        p: ASCII_N\n      }, bsonOptions)\n    };\n    const saslStartResponse = await connection.command((0, utils_1.ns)(`${db}.$cmd`), saslStart, undefined);\n    const serverResponse = BSON.deserialize(saslStartResponse.payload.buffer, bsonOptions);\n    const host = serverResponse.h;\n    const serverNonce = serverResponse.s.buffer;\n    if (serverNonce.length !== 64) {\n      // TODO(NODE-3483)\n      throw new error_1.MongoRuntimeError(`Invalid server nonce length ${serverNonce.length}, expected 64`);\n    }\n    if (!utils_1.ByteUtils.equals(serverNonce.subarray(0, nonce.byteLength), nonce)) {\n      // throw because the serverNonce's leading 32 bytes must equal the client nonce's 32 bytes\n      // https://github.com/mongodb/specifications/blob/875446db44aade414011731840831f38a6c668df/source/auth/auth.rst#id11\n      // TODO(NODE-3483)\n      throw new error_1.MongoRuntimeError('Server nonce does not begin with client nonce');\n    }\n    if (host.length < 1 || host.length > 255 || host.indexOf('..') !== -1) {\n      // TODO(NODE-3483)\n      throw new error_1.MongoRuntimeError(`Server returned an invalid host: \"${host}\"`);\n    }\n    const body = 'Action=GetCallerIdentity&Version=2011-06-15';\n    const options = sign({\n      method: 'POST',\n      host,\n      region: deriveRegion(serverResponse.h),\n      service: 'sts',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Content-Length': body.length,\n        'X-MongoDB-Server-Nonce': utils_1.ByteUtils.toBase64(serverNonce),\n        'X-MongoDB-GS2-CB-Flag': 'n'\n      },\n      path: '/',\n      body\n    }, awsCredentials);\n    const payload = {\n      a: options.headers.Authorization,\n      d: options.headers['X-Amz-Date']\n    };\n    if (sessionToken) {\n      payload.t = sessionToken;\n    }\n    const saslContinue = {\n      saslContinue: 1,\n      conversationId: 1,\n      payload: BSON.serialize(payload, bsonOptions)\n    };\n    await connection.command((0, utils_1.ns)(`${db}.$cmd`), saslContinue, undefined);\n  }\n}\nexports.MongoDBAWS = MongoDBAWS;\nasync function makeTempCredentials(credentials, provider) {\n  function makeMongoCredentialsFromAWSTemp(creds) {\n    // The AWS session token (creds.Token) may or may not be set.\n    if (!creds.AccessKeyId || !creds.SecretAccessKey) {\n      throw new error_1.MongoMissingCredentialsError('Could not obtain temporary MONGODB-AWS credentials');\n    }\n    return new mongo_credentials_1.MongoCredentials({\n      username: creds.AccessKeyId,\n      password: creds.SecretAccessKey,\n      source: credentials.source,\n      mechanism: providers_1.AuthMechanism.MONGODB_AWS,\n      mechanismProperties: {\n        AWS_SESSION_TOKEN: creds.Token\n      }\n    });\n  }\n  // Check if the AWS credential provider from the SDK is present. If not,\n  // use the old method.\n  if (provider && !('kModuleError' in MongoDBAWS.credentialProvider)) {\n    /*\r\n     * Creates a credential provider that will attempt to find credentials from the\r\n     * following sources (listed in order of precedence):\r\n     *\r\n     * - Environment variables exposed via process.env\r\n     * - SSO credentials from token cache\r\n     * - Web identity token credentials\r\n     * - Shared credentials and config ini files\r\n     * - The EC2/ECS Instance Metadata Service\r\n     */\n    try {\n      const creds = await provider();\n      return makeMongoCredentialsFromAWSTemp({\n        AccessKeyId: creds.accessKeyId,\n        SecretAccessKey: creds.secretAccessKey,\n        Token: creds.sessionToken,\n        Expiration: creds.expiration\n      });\n    } catch (error) {\n      throw new error_1.MongoAWSError(error.message);\n    }\n  } else {\n    // If the environment variable AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\n    // is set then drivers MUST assume that it was set by an AWS ECS agent\n    if (process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI) {\n      return makeMongoCredentialsFromAWSTemp(await (0, utils_1.request)(`${AWS_RELATIVE_URI}${process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI}`));\n    }\n    // Otherwise assume we are on an EC2 instance\n    // get a token\n    const token = await (0, utils_1.request)(`${AWS_EC2_URI}/latest/api/token`, {\n      method: 'PUT',\n      json: false,\n      headers: {\n        'X-aws-ec2-metadata-token-ttl-seconds': 30\n      }\n    });\n    // get role name\n    const roleName = await (0, utils_1.request)(`${AWS_EC2_URI}/${AWS_EC2_PATH}`, {\n      json: false,\n      headers: {\n        'X-aws-ec2-metadata-token': token\n      }\n    });\n    // get temp credentials\n    const creds = await (0, utils_1.request)(`${AWS_EC2_URI}/${AWS_EC2_PATH}/${roleName}`, {\n      headers: {\n        'X-aws-ec2-metadata-token': token\n      }\n    });\n    return makeMongoCredentialsFromAWSTemp(creds);\n  }\n}\nfunction deriveRegion(host) {\n  const parts = host.split('.');\n  if (parts.length === 1 || parts[1] === 'amazonaws') {\n    return 'us-east-1';\n  }\n  return parts[1];\n}","map":{"version":3,"names":["process","require","BSON","deps_1","error_1","utils_1","auth_provider_1","mongo_credentials_1","providers_1","LEGACY_REGIONS","Set","ASCII_N","AWS_RELATIVE_URI","AWS_EC2_URI","AWS_EC2_PATH","bsonOptions","useBigInt64","promoteLongs","promoteValues","promoteBuffers","bsonRegExp","MongoDBAWS","AuthProvider","constructor","credentialProvider","getAwsCredentialProvider","AWS_STS_REGIONAL_ENDPOINTS","AWS_REGION","env","toLowerCase","awsRegionSettingsExist","length","useRegionalSts","has","provider","fromNodeProviderChain","clientConfig","region","auth","authContext","connection","credentials","MongoMissingCredentialsError","aws4","sign","maxWireVersion","MongoCompatibilityError","username","makeTempCredentials","accessKeyId","secretAccessKey","password","sessionToken","mechanismProperties","AWS_SESSION_TOKEN","awsCredentials","undefined","db","source","nonce","randomBytes","saslStart","mechanism","payload","serialize","r","p","saslStartResponse","command","ns","serverResponse","deserialize","buffer","host","h","serverNonce","s","MongoRuntimeError","ByteUtils","equals","subarray","byteLength","indexOf","body","options","method","deriveRegion","service","headers","toBase64","path","a","Authorization","d","t","saslContinue","conversationId","exports","makeMongoCredentialsFromAWSTemp","creds","AccessKeyId","SecretAccessKey","MongoCredentials","AuthMechanism","MONGODB_AWS","Token","Expiration","expiration","error","MongoAWSError","message","AWS_CONTAINER_CREDENTIALS_RELATIVE_URI","request","token","json","roleName","parts","split"],"sources":["C:\\Users\\sumit\\Desktop\\Final project\\Expense-Tracker-Springboot-Frontend\\node_modules\\mongodb\\src\\cmap\\auth\\mongodb_aws.ts"],"sourcesContent":["import * as process from 'process';\r\n\r\nimport type { Binary, BSONSerializeOptions } from '../../bson';\r\nimport * as BSON from '../../bson';\r\nimport { aws4, type AWSCredentials, getAwsCredentialProvider } from '../../deps';\r\nimport {\r\n  MongoAWSError,\r\n  MongoCompatibilityError,\r\n  MongoMissingCredentialsError,\r\n  MongoRuntimeError\r\n} from '../../error';\r\nimport { ByteUtils, maxWireVersion, ns, randomBytes, request } from '../../utils';\r\nimport { type AuthContext, AuthProvider } from './auth_provider';\r\nimport { MongoCredentials } from './mongo_credentials';\r\nimport { AuthMechanism } from './providers';\r\n\r\n/**\r\n * The following regions use the global AWS STS endpoint, sts.amazonaws.com, by default\r\n * https://docs.aws.amazon.com/sdkref/latest/guide/feature-sts-regionalized-endpoints.html\r\n */\r\nconst LEGACY_REGIONS = new Set([\r\n  'ap-northeast-1',\r\n  'ap-south-1',\r\n  'ap-southeast-1',\r\n  'ap-southeast-2',\r\n  'aws-global',\r\n  'ca-central-1',\r\n  'eu-central-1',\r\n  'eu-north-1',\r\n  'eu-west-1',\r\n  'eu-west-2',\r\n  'eu-west-3',\r\n  'sa-east-1',\r\n  'us-east-1',\r\n  'us-east-2',\r\n  'us-west-1',\r\n  'us-west-2'\r\n]);\r\nconst ASCII_N = 110;\r\nconst AWS_RELATIVE_URI = 'http://169.254.170.2';\r\nconst AWS_EC2_URI = 'http://169.254.169.254';\r\nconst AWS_EC2_PATH = '/latest/meta-data/iam/security-credentials';\r\nconst bsonOptions: BSONSerializeOptions = {\r\n  useBigInt64: false,\r\n  promoteLongs: true,\r\n  promoteValues: true,\r\n  promoteBuffers: false,\r\n  bsonRegExp: false\r\n};\r\n\r\ninterface AWSSaslContinuePayload {\r\n  a: string;\r\n  d: string;\r\n  t?: string;\r\n}\r\n\r\nexport class MongoDBAWS extends AuthProvider {\r\n  static credentialProvider: ReturnType<typeof getAwsCredentialProvider>;\r\n  provider?: () => Promise<AWSCredentials>;\r\n\r\n  constructor() {\r\n    super();\r\n    MongoDBAWS.credentialProvider ??= getAwsCredentialProvider();\r\n\r\n    let { AWS_STS_REGIONAL_ENDPOINTS = '', AWS_REGION = '' } = process.env;\r\n    AWS_STS_REGIONAL_ENDPOINTS = AWS_STS_REGIONAL_ENDPOINTS.toLowerCase();\r\n    AWS_REGION = AWS_REGION.toLowerCase();\r\n\r\n    /** The option setting should work only for users who have explicit settings in their environment, the driver should not encode \"defaults\" */\r\n    const awsRegionSettingsExist =\r\n      AWS_REGION.length !== 0 && AWS_STS_REGIONAL_ENDPOINTS.length !== 0;\r\n\r\n    /**\r\n     * If AWS_STS_REGIONAL_ENDPOINTS is set to regional, users are opting into the new behavior of respecting the region settings\r\n     *\r\n     * If AWS_STS_REGIONAL_ENDPOINTS is set to legacy, then \"old\" regions need to keep using the global setting.\r\n     * Technically the SDK gets this wrong, it reaches out to 'sts.us-east-1.amazonaws.com' when it should be 'sts.amazonaws.com'.\r\n     * That is not our bug to fix here. We leave that up to the SDK.\r\n     */\r\n    const useRegionalSts =\r\n      AWS_STS_REGIONAL_ENDPOINTS === 'regional' ||\r\n      (AWS_STS_REGIONAL_ENDPOINTS === 'legacy' && !LEGACY_REGIONS.has(AWS_REGION));\r\n\r\n    if ('fromNodeProviderChain' in MongoDBAWS.credentialProvider) {\r\n      this.provider =\r\n        awsRegionSettingsExist && useRegionalSts\r\n          ? MongoDBAWS.credentialProvider.fromNodeProviderChain({\r\n              clientConfig: { region: AWS_REGION }\r\n            })\r\n          : MongoDBAWS.credentialProvider.fromNodeProviderChain();\r\n    }\r\n  }\r\n\r\n  override async auth(authContext: AuthContext): Promise<void> {\r\n    const { connection } = authContext;\r\n    if (!authContext.credentials) {\r\n      throw new MongoMissingCredentialsError('AuthContext must provide credentials.');\r\n    }\r\n\r\n    if ('kModuleError' in aws4) {\r\n      throw aws4['kModuleError'];\r\n    }\r\n    const { sign } = aws4;\r\n\r\n    if (maxWireVersion(connection) < 9) {\r\n      throw new MongoCompatibilityError(\r\n        'MONGODB-AWS authentication requires MongoDB version 4.4 or later'\r\n      );\r\n    }\r\n\r\n    if (!authContext.credentials.username) {\r\n      authContext.credentials = await makeTempCredentials(authContext.credentials, this.provider);\r\n    }\r\n\r\n    const { credentials } = authContext;\r\n\r\n    const accessKeyId = credentials.username;\r\n    const secretAccessKey = credentials.password;\r\n    // Allow the user to specify an AWS session token for authentication with temporary credentials.\r\n    const sessionToken = credentials.mechanismProperties.AWS_SESSION_TOKEN;\r\n\r\n    // If all three defined, include sessionToken, else include username and pass, else no credentials\r\n    const awsCredentials =\r\n      accessKeyId && secretAccessKey && sessionToken\r\n        ? { accessKeyId, secretAccessKey, sessionToken }\r\n        : accessKeyId && secretAccessKey\r\n        ? { accessKeyId, secretAccessKey }\r\n        : undefined;\r\n\r\n    const db = credentials.source;\r\n    const nonce = await randomBytes(32);\r\n\r\n    // All messages between MongoDB clients and servers are sent as BSON objects\r\n    // in the payload field of saslStart and saslContinue.\r\n    const saslStart = {\r\n      saslStart: 1,\r\n      mechanism: 'MONGODB-AWS',\r\n      payload: BSON.serialize({ r: nonce, p: ASCII_N }, bsonOptions)\r\n    };\r\n\r\n    const saslStartResponse = await connection.command(ns(`${db}.$cmd`), saslStart, undefined);\r\n\r\n    const serverResponse = BSON.deserialize(saslStartResponse.payload.buffer, bsonOptions) as {\r\n      s: Binary;\r\n      h: string;\r\n    };\r\n    const host = serverResponse.h;\r\n    const serverNonce = serverResponse.s.buffer;\r\n    if (serverNonce.length !== 64) {\r\n      // TODO(NODE-3483)\r\n      throw new MongoRuntimeError(`Invalid server nonce length ${serverNonce.length}, expected 64`);\r\n    }\r\n\r\n    if (!ByteUtils.equals(serverNonce.subarray(0, nonce.byteLength), nonce)) {\r\n      // throw because the serverNonce's leading 32 bytes must equal the client nonce's 32 bytes\r\n      // https://github.com/mongodb/specifications/blob/875446db44aade414011731840831f38a6c668df/source/auth/auth.rst#id11\r\n\r\n      // TODO(NODE-3483)\r\n      throw new MongoRuntimeError('Server nonce does not begin with client nonce');\r\n    }\r\n\r\n    if (host.length < 1 || host.length > 255 || host.indexOf('..') !== -1) {\r\n      // TODO(NODE-3483)\r\n      throw new MongoRuntimeError(`Server returned an invalid host: \"${host}\"`);\r\n    }\r\n\r\n    const body = 'Action=GetCallerIdentity&Version=2011-06-15';\r\n    const options = sign(\r\n      {\r\n        method: 'POST',\r\n        host,\r\n        region: deriveRegion(serverResponse.h),\r\n        service: 'sts',\r\n        headers: {\r\n          'Content-Type': 'application/x-www-form-urlencoded',\r\n          'Content-Length': body.length,\r\n          'X-MongoDB-Server-Nonce': ByteUtils.toBase64(serverNonce),\r\n          'X-MongoDB-GS2-CB-Flag': 'n'\r\n        },\r\n        path: '/',\r\n        body\r\n      },\r\n      awsCredentials\r\n    );\r\n\r\n    const payload: AWSSaslContinuePayload = {\r\n      a: options.headers.Authorization,\r\n      d: options.headers['X-Amz-Date']\r\n    };\r\n\r\n    if (sessionToken) {\r\n      payload.t = sessionToken;\r\n    }\r\n\r\n    const saslContinue = {\r\n      saslContinue: 1,\r\n      conversationId: 1,\r\n      payload: BSON.serialize(payload, bsonOptions)\r\n    };\r\n\r\n    await connection.command(ns(`${db}.$cmd`), saslContinue, undefined);\r\n  }\r\n}\r\n\r\ninterface AWSTempCredentials {\r\n  AccessKeyId?: string;\r\n  SecretAccessKey?: string;\r\n  Token?: string;\r\n  RoleArn?: string;\r\n  Expiration?: Date;\r\n}\r\n\r\nasync function makeTempCredentials(\r\n  credentials: MongoCredentials,\r\n  provider?: () => Promise<AWSCredentials>\r\n): Promise<MongoCredentials> {\r\n  function makeMongoCredentialsFromAWSTemp(creds: AWSTempCredentials) {\r\n    // The AWS session token (creds.Token) may or may not be set.\r\n    if (!creds.AccessKeyId || !creds.SecretAccessKey) {\r\n      throw new MongoMissingCredentialsError('Could not obtain temporary MONGODB-AWS credentials');\r\n    }\r\n\r\n    return new MongoCredentials({\r\n      username: creds.AccessKeyId,\r\n      password: creds.SecretAccessKey,\r\n      source: credentials.source,\r\n      mechanism: AuthMechanism.MONGODB_AWS,\r\n      mechanismProperties: {\r\n        AWS_SESSION_TOKEN: creds.Token\r\n      }\r\n    });\r\n  }\r\n\r\n  // Check if the AWS credential provider from the SDK is present. If not,\r\n  // use the old method.\r\n  if (provider && !('kModuleError' in MongoDBAWS.credentialProvider)) {\r\n    /*\r\n     * Creates a credential provider that will attempt to find credentials from the\r\n     * following sources (listed in order of precedence):\r\n     *\r\n     * - Environment variables exposed via process.env\r\n     * - SSO credentials from token cache\r\n     * - Web identity token credentials\r\n     * - Shared credentials and config ini files\r\n     * - The EC2/ECS Instance Metadata Service\r\n     */\r\n    try {\r\n      const creds = await provider();\r\n      return makeMongoCredentialsFromAWSTemp({\r\n        AccessKeyId: creds.accessKeyId,\r\n        SecretAccessKey: creds.secretAccessKey,\r\n        Token: creds.sessionToken,\r\n        Expiration: creds.expiration\r\n      });\r\n    } catch (error) {\r\n      throw new MongoAWSError(error.message);\r\n    }\r\n  } else {\r\n    // If the environment variable AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\r\n    // is set then drivers MUST assume that it was set by an AWS ECS agent\r\n    if (process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI) {\r\n      return makeMongoCredentialsFromAWSTemp(\r\n        await request(`${AWS_RELATIVE_URI}${process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI}`)\r\n      );\r\n    }\r\n\r\n    // Otherwise assume we are on an EC2 instance\r\n\r\n    // get a token\r\n    const token = await request(`${AWS_EC2_URI}/latest/api/token`, {\r\n      method: 'PUT',\r\n      json: false,\r\n      headers: { 'X-aws-ec2-metadata-token-ttl-seconds': 30 }\r\n    });\r\n\r\n    // get role name\r\n    const roleName = await request(`${AWS_EC2_URI}/${AWS_EC2_PATH}`, {\r\n      json: false,\r\n      headers: { 'X-aws-ec2-metadata-token': token }\r\n    });\r\n\r\n    // get temp credentials\r\n    const creds = await request(`${AWS_EC2_URI}/${AWS_EC2_PATH}/${roleName}`, {\r\n      headers: { 'X-aws-ec2-metadata-token': token }\r\n    });\r\n\r\n    return makeMongoCredentialsFromAWSTemp(creds);\r\n  }\r\n}\r\n\r\nfunction deriveRegion(host: string) {\r\n  const parts = host.split('.');\r\n  if (parts.length === 1 || parts[1] === 'amazonaws') {\r\n    return 'us-east-1';\r\n  }\r\n\r\n  return parts[1];\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}