{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MongocryptdManager = void 0;\nconst error_1 = require(\"../error\");\n/**\r\n * @internal\r\n * An internal class that handles spawning a mongocryptd.\r\n */\nclass MongocryptdManager {\n  constructor(extraOptions = {}) {\n    this.uri = typeof extraOptions.mongocryptdURI === 'string' && extraOptions.mongocryptdURI.length > 0 ? extraOptions.mongocryptdURI : MongocryptdManager.DEFAULT_MONGOCRYPTD_URI;\n    this.bypassSpawn = !!extraOptions.mongocryptdBypassSpawn;\n    this.spawnPath = extraOptions.mongocryptdSpawnPath || '';\n    this.spawnArgs = [];\n    if (Array.isArray(extraOptions.mongocryptdSpawnArgs)) {\n      this.spawnArgs = this.spawnArgs.concat(extraOptions.mongocryptdSpawnArgs);\n    }\n    if (this.spawnArgs.filter(arg => typeof arg === 'string').every(arg => arg.indexOf('--idleShutdownTimeoutSecs') < 0)) {\n      this.spawnArgs.push('--idleShutdownTimeoutSecs', '60');\n    }\n  }\n  /**\r\n   * Will check to see if a mongocryptd is up. If it is not up, it will attempt\r\n   * to spawn a mongocryptd in a detached process, and then wait for it to be up.\r\n   */\n  async spawn() {\n    const cmdName = this.spawnPath || 'mongocryptd';\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const {\n      spawn\n    } = require('child_process');\n    // Spawned with stdio: ignore and detached: true\n    // to ensure child can outlive parent.\n    this._child = spawn(cmdName, this.spawnArgs, {\n      stdio: 'ignore',\n      detached: true\n    });\n    this._child.on('error', () => {\n      // From the FLE spec:\n      // \"The stdout and stderr of the spawned process MUST not be exposed in the driver\n      // (e.g. redirect to /dev/null). Users can pass the argument --logpath to\n      // extraOptions.mongocryptdSpawnArgs if they need to inspect mongocryptd logs.\n      // If spawning is necessary, the driver MUST spawn mongocryptd whenever server\n      // selection on the MongoClient to mongocryptd fails. If the MongoClient fails to\n      // connect after spawning, the server selection error is propagated to the user.\"\n      // The AutoEncrypter and MongoCryptdManager should work together to spawn\n      // mongocryptd whenever necessary.  Additionally, the `mongocryptd` intentionally\n      // shuts down after 60s and gets respawned when necessary.  We rely on server\n      // selection timeouts when connecting to the `mongocryptd` to inform users that something\n      // has been configured incorrectly.  For those reasons, we suppress stderr from\n      // the `mongocryptd` process and immediately unref the process.\n    });\n    // unref child to remove handle from event loop\n    this._child.unref();\n  }\n  /**\r\n   * @returns the result of `fn` or rejects with an error.\r\n   */\n  async withRespawn(fn) {\n    try {\n      const result = await fn();\n      return result;\n    } catch (err) {\n      // If we are not bypassing spawning, then we should retry once on a MongoTimeoutError (server selection error)\n      const shouldSpawn = err instanceof error_1.MongoNetworkTimeoutError && !this.bypassSpawn;\n      if (!shouldSpawn) {\n        throw err;\n      }\n    }\n    await this.spawn();\n    const result = await fn();\n    return result;\n  }\n}\nMongocryptdManager.DEFAULT_MONGOCRYPTD_URI = 'mongodb://localhost:27020';\nexports.MongocryptdManager = MongocryptdManager;","map":{"version":3,"names":["error_1","require","MongocryptdManager","constructor","extraOptions","uri","mongocryptdURI","length","DEFAULT_MONGOCRYPTD_URI","bypassSpawn","mongocryptdBypassSpawn","spawnPath","mongocryptdSpawnPath","spawnArgs","Array","isArray","mongocryptdSpawnArgs","concat","filter","arg","every","indexOf","push","spawn","cmdName","_child","stdio","detached","on","unref","withRespawn","fn","result","err","shouldSpawn","MongoNetworkTimeoutError","exports"],"sources":["C:\\Users\\sumit\\Desktop\\Final project\\Expense-Tracker-Springboot-Frontend\\node_modules\\mongodb\\src\\client-side-encryption\\mongocryptd_manager.ts"],"sourcesContent":["import type { ChildProcess } from 'child_process';\r\n\r\nimport { MongoNetworkTimeoutError } from '../error';\r\nimport { type AutoEncryptionExtraOptions } from './auto_encrypter';\r\n\r\n/**\r\n * @internal\r\n * An internal class that handles spawning a mongocryptd.\r\n */\r\nexport class MongocryptdManager {\r\n  static DEFAULT_MONGOCRYPTD_URI = 'mongodb://localhost:27020';\r\n\r\n  uri: string;\r\n  bypassSpawn: boolean;\r\n  spawnPath: string;\r\n  spawnArgs: Array<string>;\r\n  _child?: ChildProcess;\r\n\r\n  constructor(extraOptions: AutoEncryptionExtraOptions = {}) {\r\n    this.uri =\r\n      typeof extraOptions.mongocryptdURI === 'string' && extraOptions.mongocryptdURI.length > 0\r\n        ? extraOptions.mongocryptdURI\r\n        : MongocryptdManager.DEFAULT_MONGOCRYPTD_URI;\r\n\r\n    this.bypassSpawn = !!extraOptions.mongocryptdBypassSpawn;\r\n\r\n    this.spawnPath = extraOptions.mongocryptdSpawnPath || '';\r\n    this.spawnArgs = [];\r\n    if (Array.isArray(extraOptions.mongocryptdSpawnArgs)) {\r\n      this.spawnArgs = this.spawnArgs.concat(extraOptions.mongocryptdSpawnArgs);\r\n    }\r\n    if (\r\n      this.spawnArgs\r\n        .filter(arg => typeof arg === 'string')\r\n        .every(arg => arg.indexOf('--idleShutdownTimeoutSecs') < 0)\r\n    ) {\r\n      this.spawnArgs.push('--idleShutdownTimeoutSecs', '60');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Will check to see if a mongocryptd is up. If it is not up, it will attempt\r\n   * to spawn a mongocryptd in a detached process, and then wait for it to be up.\r\n   */\r\n  async spawn(): Promise<void> {\r\n    const cmdName = this.spawnPath || 'mongocryptd';\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\r\n    const { spawn } = require('child_process') as typeof import('child_process');\r\n\r\n    // Spawned with stdio: ignore and detached: true\r\n    // to ensure child can outlive parent.\r\n    this._child = spawn(cmdName, this.spawnArgs, {\r\n      stdio: 'ignore',\r\n      detached: true\r\n    });\r\n\r\n    this._child.on('error', () => {\r\n      // From the FLE spec:\r\n      // \"The stdout and stderr of the spawned process MUST not be exposed in the driver\r\n      // (e.g. redirect to /dev/null). Users can pass the argument --logpath to\r\n      // extraOptions.mongocryptdSpawnArgs if they need to inspect mongocryptd logs.\r\n      // If spawning is necessary, the driver MUST spawn mongocryptd whenever server\r\n      // selection on the MongoClient to mongocryptd fails. If the MongoClient fails to\r\n      // connect after spawning, the server selection error is propagated to the user.\"\r\n      // The AutoEncrypter and MongoCryptdManager should work together to spawn\r\n      // mongocryptd whenever necessary.  Additionally, the `mongocryptd` intentionally\r\n      // shuts down after 60s and gets respawned when necessary.  We rely on server\r\n      // selection timeouts when connecting to the `mongocryptd` to inform users that something\r\n      // has been configured incorrectly.  For those reasons, we suppress stderr from\r\n      // the `mongocryptd` process and immediately unref the process.\r\n    });\r\n\r\n    // unref child to remove handle from event loop\r\n    this._child.unref();\r\n  }\r\n\r\n  /**\r\n   * @returns the result of `fn` or rejects with an error.\r\n   */\r\n  async withRespawn<T>(fn: () => Promise<T>): ReturnType<typeof fn> {\r\n    try {\r\n      const result = await fn();\r\n      return result;\r\n    } catch (err) {\r\n      // If we are not bypassing spawning, then we should retry once on a MongoTimeoutError (server selection error)\r\n      const shouldSpawn = err instanceof MongoNetworkTimeoutError && !this.bypassSpawn;\r\n      if (!shouldSpawn) {\r\n        throw err;\r\n      }\r\n    }\r\n    await this.spawn();\r\n    const result = await fn();\r\n    return result;\r\n  }\r\n}\r\n"],"mappings":";;;;;;AAEA,MAAAA,OAAA,GAAAC,OAAA;AAGA;;;;AAIA,MAAaC,kBAAkB;EAS7BC,YAAYC,YAAA,GAA2C,EAAE;IACvD,IAAI,CAACC,GAAG,GACN,OAAOD,YAAY,CAACE,cAAc,KAAK,QAAQ,IAAIF,YAAY,CAACE,cAAc,CAACC,MAAM,GAAG,CAAC,GACrFH,YAAY,CAACE,cAAc,GAC3BJ,kBAAkB,CAACM,uBAAuB;IAEhD,IAAI,CAACC,WAAW,GAAG,CAAC,CAACL,YAAY,CAACM,sBAAsB;IAExD,IAAI,CAACC,SAAS,GAAGP,YAAY,CAACQ,oBAAoB,IAAI,EAAE;IACxD,IAAI,CAACC,SAAS,GAAG,EAAE;IACnB,IAAIC,KAAK,CAACC,OAAO,CAACX,YAAY,CAACY,oBAAoB,CAAC,EAAE;MACpD,IAAI,CAACH,SAAS,GAAG,IAAI,CAACA,SAAS,CAACI,MAAM,CAACb,YAAY,CAACY,oBAAoB,CAAC;;IAE3E,IACE,IAAI,CAACH,SAAS,CACXK,MAAM,CAACC,GAAG,IAAI,OAAOA,GAAG,KAAK,QAAQ,CAAC,CACtCC,KAAK,CAACD,GAAG,IAAIA,GAAG,CAACE,OAAO,CAAC,2BAA2B,CAAC,GAAG,CAAC,CAAC,EAC7D;MACA,IAAI,CAACR,SAAS,CAACS,IAAI,CAAC,2BAA2B,EAAE,IAAI,CAAC;;EAE1D;EAEA;;;;EAIA,MAAMC,KAAKA,CAAA;IACT,MAAMC,OAAO,GAAG,IAAI,CAACb,SAAS,IAAI,aAAa;IAE/C;IACA,MAAM;MAAEY;IAAK,CAAE,GAAGtB,OAAO,CAAC,eAAe,CAAmC;IAE5E;IACA;IACA,IAAI,CAACwB,MAAM,GAAGF,KAAK,CAACC,OAAO,EAAE,IAAI,CAACX,SAAS,EAAE;MAC3Ca,KAAK,EAAE,QAAQ;MACfC,QAAQ,EAAE;KACX,CAAC;IAEF,IAAI,CAACF,MAAM,CAACG,EAAE,CAAC,OAAO,EAAE,MAAK;MAC3B;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IAAA,CACD,CAAC;IAEF;IACA,IAAI,CAACH,MAAM,CAACI,KAAK,EAAE;EACrB;EAEA;;;EAGA,MAAMC,WAAWA,CAAIC,EAAoB;IACvC,IAAI;MACF,MAAMC,MAAM,GAAG,MAAMD,EAAE,EAAE;MACzB,OAAOC,MAAM;KACd,CAAC,OAAOC,GAAG,EAAE;MACZ;MACA,MAAMC,WAAW,GAAGD,GAAG,YAAYjC,OAAA,CAAAmC,wBAAwB,IAAI,CAAC,IAAI,CAAC1B,WAAW;MAChF,IAAI,CAACyB,WAAW,EAAE;QAChB,MAAMD,GAAG;;;IAGb,MAAM,IAAI,CAACV,KAAK,EAAE;IAClB,MAAMS,MAAM,GAAG,MAAMD,EAAE,EAAE;IACzB,OAAOC,MAAM;EACf;;AApFO9B,kBAAA,CAAAM,uBAAuB,GAAG,2BAA2B;AADjD4B,OAAA,CAAAlC,kBAAA,GAAAA,kBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}