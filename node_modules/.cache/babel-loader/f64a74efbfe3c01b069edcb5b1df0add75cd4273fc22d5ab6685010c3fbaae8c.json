{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WaitQueueTimeoutError = exports.PoolClearedOnNetworkError = exports.PoolClearedError = exports.PoolClosedError = void 0;\nconst error_1 = require(\"../error\");\n/**\r\n * An error indicating a connection pool is closed\r\n * @category Error\r\n */\nclass PoolClosedError extends error_1.MongoDriverError {\n  /**\r\n   * **Do not use this constructor!**\r\n   *\r\n   * Meant for internal use only.\r\n   *\r\n   * @remarks\r\n   * This class is only meant to be constructed within the driver. This constructor is\r\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\r\n   *\r\n   * @public\r\n   **/\n  constructor(pool) {\n    super('Attempted to check out a connection from closed connection pool');\n    this.address = pool.address;\n  }\n  get name() {\n    return 'MongoPoolClosedError';\n  }\n}\nexports.PoolClosedError = PoolClosedError;\n/**\r\n * An error indicating a connection pool is currently paused\r\n * @category Error\r\n */\nclass PoolClearedError extends error_1.MongoNetworkError {\n  /**\r\n   * **Do not use this constructor!**\r\n   *\r\n   * Meant for internal use only.\r\n   *\r\n   * @remarks\r\n   * This class is only meant to be constructed within the driver. This constructor is\r\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\r\n   *\r\n   * @public\r\n   **/\n  constructor(pool, message) {\n    const errorMessage = message ? message : `Connection pool for ${pool.address} was cleared because another operation failed with: \"${pool.serverError?.message}\"`;\n    super(errorMessage, pool.serverError ? {\n      cause: pool.serverError\n    } : undefined);\n    this.address = pool.address;\n    this.addErrorLabel(error_1.MongoErrorLabel.PoolRequstedRetry);\n  }\n  get name() {\n    return 'MongoPoolClearedError';\n  }\n}\nexports.PoolClearedError = PoolClearedError;\n/**\r\n * An error indicating that a connection pool has been cleared after the monitor for that server timed out.\r\n * @category Error\r\n */\nclass PoolClearedOnNetworkError extends PoolClearedError {\n  /**\r\n   * **Do not use this constructor!**\r\n   *\r\n   * Meant for internal use only.\r\n   *\r\n   * @remarks\r\n   * This class is only meant to be constructed within the driver. This constructor is\r\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\r\n   *\r\n   * @public\r\n   **/\n  constructor(pool) {\n    super(pool, `Connection to ${pool.address} interrupted due to server monitor timeout`);\n  }\n  get name() {\n    return 'PoolClearedOnNetworkError';\n  }\n}\nexports.PoolClearedOnNetworkError = PoolClearedOnNetworkError;\n/**\r\n * An error thrown when a request to check out a connection times out\r\n * @category Error\r\n */\nclass WaitQueueTimeoutError extends error_1.MongoDriverError {\n  /**\r\n   * **Do not use this constructor!**\r\n   *\r\n   * Meant for internal use only.\r\n   *\r\n   * @remarks\r\n   * This class is only meant to be constructed within the driver. This constructor is\r\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\r\n   *\r\n   * @public\r\n   **/\n  constructor(message, address) {\n    super(message);\n    this.address = address;\n  }\n  get name() {\n    return 'MongoWaitQueueTimeoutError';\n  }\n}\nexports.WaitQueueTimeoutError = WaitQueueTimeoutError;","map":{"version":3,"names":["error_1","require","PoolClosedError","MongoDriverError","constructor","pool","address","name","exports","PoolClearedError","MongoNetworkError","message","errorMessage","serverError","cause","undefined","addErrorLabel","MongoErrorLabel","PoolRequstedRetry","PoolClearedOnNetworkError","WaitQueueTimeoutError"],"sources":["C:\\Users\\sumit\\Desktop\\Final project\\Expense-Tracker-Springboot-Frontend\\node_modules\\mongodb\\src\\cmap\\errors.ts"],"sourcesContent":["import { MongoDriverError, MongoErrorLabel, MongoNetworkError } from '../error';\r\nimport type { ConnectionPool } from './connection_pool';\r\n\r\n/**\r\n * An error indicating a connection pool is closed\r\n * @category Error\r\n */\r\nexport class PoolClosedError extends MongoDriverError {\r\n  /** The address of the connection pool */\r\n  address: string;\r\n\r\n  /**\r\n   * **Do not use this constructor!**\r\n   *\r\n   * Meant for internal use only.\r\n   *\r\n   * @remarks\r\n   * This class is only meant to be constructed within the driver. This constructor is\r\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\r\n   *\r\n   * @public\r\n   **/\r\n  constructor(pool: ConnectionPool) {\r\n    super('Attempted to check out a connection from closed connection pool');\r\n    this.address = pool.address;\r\n  }\r\n\r\n  override get name(): string {\r\n    return 'MongoPoolClosedError';\r\n  }\r\n}\r\n\r\n/**\r\n * An error indicating a connection pool is currently paused\r\n * @category Error\r\n */\r\nexport class PoolClearedError extends MongoNetworkError {\r\n  /** The address of the connection pool */\r\n  address: string;\r\n\r\n  /**\r\n   * **Do not use this constructor!**\r\n   *\r\n   * Meant for internal use only.\r\n   *\r\n   * @remarks\r\n   * This class is only meant to be constructed within the driver. This constructor is\r\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\r\n   *\r\n   * @public\r\n   **/\r\n  constructor(pool: ConnectionPool, message?: string) {\r\n    const errorMessage = message\r\n      ? message\r\n      : `Connection pool for ${pool.address} was cleared because another operation failed with: \"${pool.serverError?.message}\"`;\r\n    super(errorMessage, pool.serverError ? { cause: pool.serverError } : undefined);\r\n    this.address = pool.address;\r\n\r\n    this.addErrorLabel(MongoErrorLabel.PoolRequstedRetry);\r\n  }\r\n\r\n  override get name(): string {\r\n    return 'MongoPoolClearedError';\r\n  }\r\n}\r\n\r\n/**\r\n * An error indicating that a connection pool has been cleared after the monitor for that server timed out.\r\n * @category Error\r\n */\r\nexport class PoolClearedOnNetworkError extends PoolClearedError {\r\n  /**\r\n   * **Do not use this constructor!**\r\n   *\r\n   * Meant for internal use only.\r\n   *\r\n   * @remarks\r\n   * This class is only meant to be constructed within the driver. This constructor is\r\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\r\n   *\r\n   * @public\r\n   **/\r\n  constructor(pool: ConnectionPool) {\r\n    super(pool, `Connection to ${pool.address} interrupted due to server monitor timeout`);\r\n  }\r\n\r\n  override get name(): string {\r\n    return 'PoolClearedOnNetworkError';\r\n  }\r\n}\r\n\r\n/**\r\n * An error thrown when a request to check out a connection times out\r\n * @category Error\r\n */\r\nexport class WaitQueueTimeoutError extends MongoDriverError {\r\n  /** The address of the connection pool */\r\n  address: string;\r\n\r\n  /**\r\n   * **Do not use this constructor!**\r\n   *\r\n   * Meant for internal use only.\r\n   *\r\n   * @remarks\r\n   * This class is only meant to be constructed within the driver. This constructor is\r\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\r\n   *\r\n   * @public\r\n   **/\r\n  constructor(message: string, address: string) {\r\n    super(message);\r\n    this.address = address;\r\n  }\r\n\r\n  override get name(): string {\r\n    return 'MongoWaitQueueTimeoutError';\r\n  }\r\n}\r\n"],"mappings":";;;;;;AAAA,MAAAA,OAAA,GAAAC,OAAA;AAGA;;;;AAIA,MAAaC,eAAgB,SAAQF,OAAA,CAAAG,gBAAgB;EAInD;;;;;;;;;;;EAWAC,YAAYC,IAAoB;IAC9B,KAAK,CAAC,iEAAiE,CAAC;IACxE,IAAI,CAACC,OAAO,GAAGD,IAAI,CAACC,OAAO;EAC7B;EAEA,IAAaC,IAAIA,CAAA;IACf,OAAO,sBAAsB;EAC/B;;AAtBFC,OAAA,CAAAN,eAAA,GAAAA,eAAA;AAyBA;;;;AAIA,MAAaO,gBAAiB,SAAQT,OAAA,CAAAU,iBAAiB;EAIrD;;;;;;;;;;;EAWAN,YAAYC,IAAoB,EAAEM,OAAgB;IAChD,MAAMC,YAAY,GAAGD,OAAO,GACxBA,OAAO,GACP,uBAAuBN,IAAI,CAACC,OAAO,wDAAwDD,IAAI,CAACQ,WAAW,EAAEF,OAAO,GAAG;IAC3H,KAAK,CAACC,YAAY,EAAEP,IAAI,CAACQ,WAAW,GAAG;MAAEC,KAAK,EAAET,IAAI,CAACQ;IAAW,CAAE,GAAGE,SAAS,CAAC;IAC/E,IAAI,CAACT,OAAO,GAAGD,IAAI,CAACC,OAAO;IAE3B,IAAI,CAACU,aAAa,CAAChB,OAAA,CAAAiB,eAAe,CAACC,iBAAiB,CAAC;EACvD;EAEA,IAAaX,IAAIA,CAAA;IACf,OAAO,uBAAuB;EAChC;;AA3BFC,OAAA,CAAAC,gBAAA,GAAAA,gBAAA;AA8BA;;;;AAIA,MAAaU,yBAA0B,SAAQV,gBAAgB;EAC7D;;;;;;;;;;;EAWAL,YAAYC,IAAoB;IAC9B,KAAK,CAACA,IAAI,EAAE,iBAAiBA,IAAI,CAACC,OAAO,4CAA4C,CAAC;EACxF;EAEA,IAAaC,IAAIA,CAAA;IACf,OAAO,2BAA2B;EACpC;;AAlBFC,OAAA,CAAAW,yBAAA,GAAAA,yBAAA;AAqBA;;;;AAIA,MAAaC,qBAAsB,SAAQpB,OAAA,CAAAG,gBAAgB;EAIzD;;;;;;;;;;;EAWAC,YAAYO,OAAe,EAAEL,OAAe;IAC1C,KAAK,CAACK,OAAO,CAAC;IACd,IAAI,CAACL,OAAO,GAAGA,OAAO;EACxB;EAEA,IAAaC,IAAIA,CAAA;IACf,OAAO,4BAA4B;EACrC;;AAtBFC,OAAA,CAAAY,qBAAA,GAAAA,qBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}