{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assertUninitialized = exports.AbstractCursor = exports.CURSOR_FLAGS = void 0;\nconst stream_1 = require(\"stream\");\nconst bson_1 = require(\"../bson\");\nconst error_1 = require(\"../error\");\nconst mongo_types_1 = require(\"../mongo_types\");\nconst execute_operation_1 = require(\"../operations/execute_operation\");\nconst get_more_1 = require(\"../operations/get_more\");\nconst kill_cursors_1 = require(\"../operations/kill_cursors\");\nconst read_concern_1 = require(\"../read_concern\");\nconst read_preference_1 = require(\"../read_preference\");\nconst sessions_1 = require(\"../sessions\");\nconst utils_1 = require(\"../utils\");\n/** @internal */\nconst kId = Symbol('id');\n/** @internal */\nconst kDocuments = Symbol('documents');\n/** @internal */\nconst kServer = Symbol('server');\n/** @internal */\nconst kNamespace = Symbol('namespace');\n/** @internal */\nconst kClient = Symbol('client');\n/** @internal */\nconst kSession = Symbol('session');\n/** @internal */\nconst kOptions = Symbol('options');\n/** @internal */\nconst kTransform = Symbol('transform');\n/** @internal */\nconst kInitialized = Symbol('initialized');\n/** @internal */\nconst kClosed = Symbol('closed');\n/** @internal */\nconst kKilled = Symbol('killed');\n/** @internal */\nconst kInit = Symbol('kInit');\n/** @public */\nexports.CURSOR_FLAGS = ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'exhaust', 'partial'];\n/** @public */\nclass AbstractCursor extends mongo_types_1.TypedEventEmitter {\n  /** @internal */\n  constructor(client, namespace, options = {}) {\n    super();\n    if (!client.s.isMongoClient) {\n      throw new error_1.MongoRuntimeError('Cursor must be constructed with MongoClient');\n    }\n    this[kClient] = client;\n    this[kNamespace] = namespace;\n    this[kId] = null;\n    this[kDocuments] = new utils_1.List();\n    this[kInitialized] = false;\n    this[kClosed] = false;\n    this[kKilled] = false;\n    this[kOptions] = {\n      readPreference: options.readPreference && options.readPreference instanceof read_preference_1.ReadPreference ? options.readPreference : read_preference_1.ReadPreference.primary,\n      ...(0, bson_1.pluckBSONSerializeOptions)(options)\n    };\n    const readConcern = read_concern_1.ReadConcern.fromOptions(options);\n    if (readConcern) {\n      this[kOptions].readConcern = readConcern;\n    }\n    if (typeof options.batchSize === 'number') {\n      this[kOptions].batchSize = options.batchSize;\n    }\n    // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n    if (options.comment !== undefined) {\n      this[kOptions].comment = options.comment;\n    }\n    if (typeof options.maxTimeMS === 'number') {\n      this[kOptions].maxTimeMS = options.maxTimeMS;\n    }\n    if (typeof options.maxAwaitTimeMS === 'number') {\n      this[kOptions].maxAwaitTimeMS = options.maxAwaitTimeMS;\n    }\n    if (options.session instanceof sessions_1.ClientSession) {\n      this[kSession] = options.session;\n    } else {\n      this[kSession] = this[kClient].startSession({\n        owner: this,\n        explicit: false\n      });\n    }\n  }\n  get id() {\n    return this[kId] ?? undefined;\n  }\n  /** @internal */\n  get isDead() {\n    return (this[kId]?.isZero() ?? false) || this[kClosed] || this[kKilled];\n  }\n  /** @internal */\n  get client() {\n    return this[kClient];\n  }\n  /** @internal */\n  get server() {\n    return this[kServer];\n  }\n  get namespace() {\n    return this[kNamespace];\n  }\n  get readPreference() {\n    return this[kOptions].readPreference;\n  }\n  get readConcern() {\n    return this[kOptions].readConcern;\n  }\n  /** @internal */\n  get session() {\n    return this[kSession];\n  }\n  set session(clientSession) {\n    this[kSession] = clientSession;\n  }\n  /** @internal */\n  get cursorOptions() {\n    return this[kOptions];\n  }\n  get closed() {\n    return this[kClosed];\n  }\n  get killed() {\n    return this[kKilled];\n  }\n  get loadBalanced() {\n    return !!this[kClient].topology?.loadBalanced;\n  }\n  /** Returns current buffered documents length */\n  bufferedCount() {\n    return this[kDocuments].length;\n  }\n  /** Returns current buffered documents */\n  readBufferedDocuments(number) {\n    const bufferedDocs = [];\n    const documentsToRead = Math.min(number ?? this[kDocuments].length, this[kDocuments].length);\n    for (let count = 0; count < documentsToRead; count++) {\n      const document = this[kDocuments].shift();\n      if (document != null) {\n        bufferedDocs.push(document);\n      }\n    }\n    return bufferedDocs;\n  }\n  async *[Symbol.asyncIterator]() {\n    if (this.closed) {\n      return;\n    }\n    try {\n      while (true) {\n        const document = await this.next();\n        // Intentional strict null check, because users can map cursors to falsey values.\n        // We allow mapping to all values except for null.\n        // eslint-disable-next-line no-restricted-syntax\n        if (document === null) {\n          if (!this.closed) {\n            const message = 'Cursor returned a `null` document, but the cursor is not exhausted.  Mapping documents to `null` is not supported in the cursor transform.';\n            await cleanupCursor(this, {\n              needsToEmitClosed: true\n            }).catch(() => null);\n            throw new error_1.MongoAPIError(message);\n          }\n          break;\n        }\n        yield document;\n        if (this[kId] === bson_1.Long.ZERO) {\n          // Cursor exhausted\n          break;\n        }\n      }\n    } finally {\n      // Only close the cursor if it has not already been closed. This finally clause handles\n      // the case when a user would break out of a for await of loop early.\n      if (!this.closed) {\n        await this.close().catch(() => null);\n      }\n    }\n  }\n  stream(options) {\n    if (options?.transform) {\n      const transform = options.transform;\n      const readable = new ReadableCursorStream(this);\n      const transformedStream = readable.pipe(new stream_1.Transform({\n        objectMode: true,\n        highWaterMark: 1,\n        transform(chunk, _, callback) {\n          try {\n            const transformed = transform(chunk);\n            callback(undefined, transformed);\n          } catch (err) {\n            callback(err);\n          }\n        }\n      }));\n      // Bubble errors to transformed stream, because otherwise no way\n      // to handle this error.\n      readable.on('error', err => transformedStream.emit('error', err));\n      return transformedStream;\n    }\n    return new ReadableCursorStream(this);\n  }\n  async hasNext() {\n    if (this[kId] === bson_1.Long.ZERO) {\n      return false;\n    }\n    if (this[kDocuments].length !== 0) {\n      return true;\n    }\n    const doc = await next(this, {\n      blocking: true,\n      transform: false\n    });\n    if (doc) {\n      this[kDocuments].unshift(doc);\n      return true;\n    }\n    return false;\n  }\n  /** Get the next available document from the cursor, returns null if no more documents are available. */\n  async next() {\n    if (this[kId] === bson_1.Long.ZERO) {\n      throw new error_1.MongoCursorExhaustedError();\n    }\n    return next(this, {\n      blocking: true,\n      transform: true\n    });\n  }\n  /**\r\n   * Try to get the next available document from the cursor or `null` if an empty batch is returned\r\n   */\n  async tryNext() {\n    if (this[kId] === bson_1.Long.ZERO) {\n      throw new error_1.MongoCursorExhaustedError();\n    }\n    return next(this, {\n      blocking: false,\n      transform: true\n    });\n  }\n  /**\r\n   * Iterates over all the documents for this cursor using the iterator, callback pattern.\r\n   *\r\n   * If the iterator returns `false`, iteration will stop.\r\n   *\r\n   * @param iterator - The iteration callback.\r\n   * @deprecated - Will be removed in a future release. Use for await...of instead.\r\n   */\n  async forEach(iterator) {\n    if (typeof iterator !== 'function') {\n      throw new error_1.MongoInvalidArgumentError('Argument \"iterator\" must be a function');\n    }\n    for await (const document of this) {\n      const result = iterator(document);\n      if (result === false) {\n        break;\n      }\n    }\n  }\n  async close() {\n    const needsToEmitClosed = !this[kClosed];\n    this[kClosed] = true;\n    await cleanupCursor(this, {\n      needsToEmitClosed\n    });\n  }\n  /**\r\n   * Returns an array of documents. The caller is responsible for making sure that there\r\n   * is enough memory to store the results. Note that the array only contains partial\r\n   * results when this cursor had been previously accessed. In that case,\r\n   * cursor.rewind() can be used to reset the cursor.\r\n   */\n  async toArray() {\n    const array = [];\n    for await (const document of this) {\n      array.push(document);\n    }\n    return array;\n  }\n  /**\r\n   * Add a cursor flag to the cursor\r\n   *\r\n   * @param flag - The flag to set, must be one of following ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'partial' -.\r\n   * @param value - The flag boolean value.\r\n   */\n  addCursorFlag(flag, value) {\n    assertUninitialized(this);\n    if (!exports.CURSOR_FLAGS.includes(flag)) {\n      throw new error_1.MongoInvalidArgumentError(`Flag ${flag} is not one of ${exports.CURSOR_FLAGS}`);\n    }\n    if (typeof value !== 'boolean') {\n      throw new error_1.MongoInvalidArgumentError(`Flag ${flag} must be a boolean value`);\n    }\n    this[kOptions][flag] = value;\n    return this;\n  }\n  /**\r\n   * Map all documents using the provided function\r\n   * If there is a transform set on the cursor, that will be called first and the result passed to\r\n   * this function's transform.\r\n   *\r\n   * @remarks\r\n   *\r\n   * **Note** Cursors use `null` internally to indicate that there are no more documents in the cursor. Providing a mapping\r\n   * function that maps values to `null` will result in the cursor closing itself before it has finished iterating\r\n   * all documents.  This will **not** result in a memory leak, just surprising behavior.  For example:\r\n   *\r\n   * ```typescript\r\n   * const cursor = collection.find({});\r\n   * cursor.map(() => null);\r\n   *\r\n   * const documents = await cursor.toArray();\r\n   * // documents is always [], regardless of how many documents are in the collection.\r\n   * ```\r\n   *\r\n   * Other falsey values are allowed:\r\n   *\r\n   * ```typescript\r\n   * const cursor = collection.find({});\r\n   * cursor.map(() => '');\r\n   *\r\n   * const documents = await cursor.toArray();\r\n   * // documents is now an array of empty strings\r\n   * ```\r\n   *\r\n   * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\r\n   * it **does not** return a new instance of a cursor. This means when calling map,\r\n   * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\r\n   * Take note of the following example:\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const cursor: FindCursor<Document> = coll.find();\r\n   * const mappedCursor: FindCursor<number> = cursor.map(doc => Object.keys(doc).length);\r\n   * const keyCounts: number[] = await mappedCursor.toArray(); // cursor.toArray() still returns Document[]\r\n   * ```\r\n   * @param transform - The mapping transformation method.\r\n   */\n  map(transform) {\n    assertUninitialized(this);\n    const oldTransform = this[kTransform]; // TODO(NODE-3283): Improve transform typing\n    if (oldTransform) {\n      this[kTransform] = doc => {\n        return transform(oldTransform(doc));\n      };\n    } else {\n      this[kTransform] = transform;\n    }\n    return this;\n  }\n  /**\r\n   * Set the ReadPreference for the cursor.\r\n   *\r\n   * @param readPreference - The new read preference for the cursor.\r\n   */\n  withReadPreference(readPreference) {\n    assertUninitialized(this);\n    if (readPreference instanceof read_preference_1.ReadPreference) {\n      this[kOptions].readPreference = readPreference;\n    } else if (typeof readPreference === 'string') {\n      this[kOptions].readPreference = read_preference_1.ReadPreference.fromString(readPreference);\n    } else {\n      throw new error_1.MongoInvalidArgumentError(`Invalid read preference: ${readPreference}`);\n    }\n    return this;\n  }\n  /**\r\n   * Set the ReadPreference for the cursor.\r\n   *\r\n   * @param readPreference - The new read preference for the cursor.\r\n   */\n  withReadConcern(readConcern) {\n    assertUninitialized(this);\n    const resolvedReadConcern = read_concern_1.ReadConcern.fromOptions({\n      readConcern\n    });\n    if (resolvedReadConcern) {\n      this[kOptions].readConcern = resolvedReadConcern;\n    }\n    return this;\n  }\n  /**\r\n   * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)\r\n   *\r\n   * @param value - Number of milliseconds to wait before aborting the query.\r\n   */\n  maxTimeMS(value) {\n    assertUninitialized(this);\n    if (typeof value !== 'number') {\n      throw new error_1.MongoInvalidArgumentError('Argument for maxTimeMS must be a number');\n    }\n    this[kOptions].maxTimeMS = value;\n    return this;\n  }\n  /**\r\n   * Set the batch size for the cursor.\r\n   *\r\n   * @param value - The number of documents to return per batch. See {@link https://www.mongodb.com/docs/manual/reference/command/find/|find command documentation}.\r\n   */\n  batchSize(value) {\n    assertUninitialized(this);\n    if (this[kOptions].tailable) {\n      throw new error_1.MongoTailableCursorError('Tailable cursor does not support batchSize');\n    }\n    if (typeof value !== 'number') {\n      throw new error_1.MongoInvalidArgumentError('Operation \"batchSize\" requires an integer');\n    }\n    this[kOptions].batchSize = value;\n    return this;\n  }\n  /**\r\n   * Rewind this cursor to its uninitialized state. Any options that are present on the cursor will\r\n   * remain in effect. Iterating this cursor will cause new queries to be sent to the server, even\r\n   * if the resultant data has already been retrieved by this cursor.\r\n   */\n  rewind() {\n    if (!this[kInitialized]) {\n      return;\n    }\n    this[kId] = null;\n    this[kDocuments].clear();\n    this[kClosed] = false;\n    this[kKilled] = false;\n    this[kInitialized] = false;\n    const session = this[kSession];\n    if (session) {\n      // We only want to end this session if we created it, and it hasn't ended yet\n      if (session.explicit === false) {\n        if (!session.hasEnded) {\n          session.endSession().catch(() => null);\n        }\n        this[kSession] = this.client.startSession({\n          owner: this,\n          explicit: false\n        });\n      }\n    }\n  }\n  /** @internal */\n  async getMore(batchSize) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const getMoreOperation = new get_more_1.GetMoreOperation(this[kNamespace], this[kId], this[kServer], {\n      ...this[kOptions],\n      session: this[kSession],\n      batchSize\n    });\n    return (0, execute_operation_1.executeOperation)(this[kClient], getMoreOperation);\n  }\n  /**\r\n   * @internal\r\n   *\r\n   * This function is exposed for the unified test runner's createChangeStream\r\n   * operation.  We cannot refactor to use the abstract _initialize method without\r\n   * a significant refactor.\r\n   */\n  async [kInit]() {\n    try {\n      const state = await this._initialize(this[kSession]);\n      const response = state.response;\n      this[kServer] = state.server;\n      if (response.cursor) {\n        // TODO(NODE-2674): Preserve int64 sent from MongoDB\n        this[kId] = typeof response.cursor.id === 'number' ? bson_1.Long.fromNumber(response.cursor.id) : typeof response.cursor.id === 'bigint' ? bson_1.Long.fromBigInt(response.cursor.id) : response.cursor.id;\n        if (response.cursor.ns) {\n          this[kNamespace] = (0, utils_1.ns)(response.cursor.ns);\n        }\n        this[kDocuments].pushMany(response.cursor.firstBatch);\n      }\n      // When server responses return without a cursor document, we close this cursor\n      // and return the raw server response. This is often the case for explain commands\n      // for example\n      if (this[kId] == null) {\n        this[kId] = bson_1.Long.ZERO;\n        // TODO(NODE-3286): ExecutionResult needs to accept a generic parameter\n        this[kDocuments].push(state.response);\n      }\n      // the cursor is now initialized, even if it is dead\n      this[kInitialized] = true;\n    } catch (error) {\n      // the cursor is now initialized, even if an error occurred\n      this[kInitialized] = true;\n      await cleanupCursor(this, {\n        error\n      });\n      throw error;\n    }\n    if (this.isDead) {\n      await cleanupCursor(this, undefined);\n    }\n    return;\n  }\n}\n/** @event */\nAbstractCursor.CLOSE = 'close';\nexports.AbstractCursor = AbstractCursor;\n/**\r\n * @param cursor - the cursor on which to call `next`\r\n * @param blocking - a boolean indicating whether or not the cursor should `block` until data\r\n *     is available.  Generally, this flag is set to `false` because if the getMore returns no documents,\r\n *     the cursor has been exhausted.  In certain scenarios (ChangeStreams, tailable await cursors and\r\n *     `tryNext`, for example) blocking is necessary because a getMore returning no documents does\r\n *     not indicate the end of the cursor.\r\n * @param transform - if true, the cursor's transform function is applied to the result document (if the transform exists)\r\n * @returns the next document in the cursor, or `null`.  When `blocking` is `true`, a `null` document means\r\n * the cursor has been exhausted.  Otherwise, it means that there is no document available in the cursor's buffer.\r\n */\nasync function next(cursor, {\n  blocking,\n  transform\n}) {\n  if (cursor.closed) {\n    return null;\n  }\n  do {\n    if (cursor[kId] == null) {\n      // All cursors must operate within a session, one must be made implicitly if not explicitly provided\n      await cursor[kInit]();\n    }\n    if (cursor[kDocuments].length !== 0) {\n      const doc = cursor[kDocuments].shift();\n      if (doc != null && transform && cursor[kTransform]) {\n        try {\n          return cursor[kTransform](doc);\n        } catch (error) {\n          // `cleanupCursorAsync` should never throw, but if it does we want to throw the original\n          // error instead.\n          await cleanupCursor(cursor, {\n            error,\n            needsToEmitClosed: true\n          }).catch(() => null);\n          throw error;\n        }\n      }\n      return doc;\n    }\n    if (cursor.isDead) {\n      // if the cursor is dead, we clean it up\n      // cleanupCursorAsync should never throw, but if it does it indicates a bug in the driver\n      // and we should surface the error\n      await cleanupCursor(cursor, {});\n      return null;\n    }\n    // otherwise need to call getMore\n    const batchSize = cursor[kOptions].batchSize || 1000;\n    try {\n      const response = await cursor.getMore(batchSize);\n      if (response) {\n        const cursorId = typeof response.cursor.id === 'number' ? bson_1.Long.fromNumber(response.cursor.id) : typeof response.cursor.id === 'bigint' ? bson_1.Long.fromBigInt(response.cursor.id) : response.cursor.id;\n        cursor[kDocuments].pushMany(response.cursor.nextBatch);\n        cursor[kId] = cursorId;\n      }\n    } catch (error) {\n      // `cleanupCursorAsync` should never throw, but if it does we want to throw the original\n      // error instead.\n      await cleanupCursor(cursor, {\n        error\n      }).catch(() => null);\n      throw error;\n    }\n    if (cursor.isDead) {\n      // If we successfully received a response from a cursor BUT the cursor indicates that it is exhausted,\n      // we intentionally clean up the cursor to release its session back into the pool before the cursor\n      // is iterated.  This prevents a cursor that is exhausted on the server from holding\n      // onto a session indefinitely until the AbstractCursor is iterated.\n      //\n      // cleanupCursorAsync should never throw, but if it does it indicates a bug in the driver\n      // and we should surface the error\n      await cleanupCursor(cursor, {});\n    }\n    if (cursor[kDocuments].length === 0 && blocking === false) {\n      return null;\n    }\n  } while (!cursor.isDead || cursor[kDocuments].length !== 0);\n  return null;\n}\nasync function cleanupCursor(cursor, options) {\n  const cursorId = cursor[kId];\n  const cursorNs = cursor[kNamespace];\n  const server = cursor[kServer];\n  const session = cursor[kSession];\n  const error = options?.error;\n  // Cursors only emit closed events once the client-side cursor has been exhausted fully or there\n  // was an error.  Notably, when the server returns a cursor id of 0 and a non-empty batch, we\n  // cleanup the cursor but don't emit a `close` event.\n  const needsToEmitClosed = options?.needsToEmitClosed ?? cursor[kDocuments].length === 0;\n  if (error) {\n    if (cursor.loadBalanced && error instanceof error_1.MongoNetworkError) {\n      return completeCleanup();\n    }\n  }\n  if (cursorId == null || server == null || cursorId.isZero() || cursorNs == null) {\n    if (needsToEmitClosed) {\n      cursor[kClosed] = true;\n      cursor[kId] = bson_1.Long.ZERO;\n      cursor.emit(AbstractCursor.CLOSE);\n    }\n    if (session) {\n      if (session.owner === cursor) {\n        await session.endSession({\n          error\n        });\n        return;\n      }\n      if (!session.inTransaction()) {\n        (0, sessions_1.maybeClearPinnedConnection)(session, {\n          error\n        });\n      }\n    }\n    return;\n  }\n  async function completeCleanup() {\n    if (session) {\n      if (session.owner === cursor) {\n        try {\n          await session.endSession({\n            error\n          });\n        } finally {\n          cursor.emit(AbstractCursor.CLOSE);\n        }\n        return;\n      }\n      if (!session.inTransaction()) {\n        (0, sessions_1.maybeClearPinnedConnection)(session, {\n          error\n        });\n      }\n    }\n    cursor.emit(AbstractCursor.CLOSE);\n    return;\n  }\n  cursor[kKilled] = true;\n  if (session.hasEnded) {\n    return completeCleanup();\n  }\n  try {\n    await (0, execute_operation_1.executeOperation)(cursor[kClient], new kill_cursors_1.KillCursorsOperation(cursorId, cursorNs, server, {\n      session\n    })).catch(() => null);\n  } finally {\n    await completeCleanup();\n  }\n}\n/** @internal */\nfunction assertUninitialized(cursor) {\n  if (cursor[kInitialized]) {\n    throw new error_1.MongoCursorInUseError();\n  }\n}\nexports.assertUninitialized = assertUninitialized;\nclass ReadableCursorStream extends stream_1.Readable {\n  constructor(cursor) {\n    super({\n      objectMode: true,\n      autoDestroy: false,\n      highWaterMark: 1\n    });\n    this._readInProgress = false;\n    this._cursor = cursor;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  _read(size) {\n    if (!this._readInProgress) {\n      this._readInProgress = true;\n      this._readNext();\n    }\n  }\n  _destroy(error, callback) {\n    this._cursor.close().then(() => callback(error), closeError => callback(closeError));\n  }\n  _readNext() {\n    next(this._cursor, {\n      blocking: true,\n      transform: true\n    }).then(result => {\n      if (result == null) {\n        this.push(null);\n      } else if (this.destroyed) {\n        this._cursor.close().catch(() => null);\n      } else {\n        if (this.push(result)) {\n          return this._readNext();\n        }\n        this._readInProgress = false;\n      }\n    }, err => {\n      // NOTE: This is questionable, but we have a test backing the behavior. It seems the\n      //       desired behavior is that a stream ends cleanly when a user explicitly closes\n      //       a client during iteration. Alternatively, we could do the \"right\" thing and\n      //       propagate the error message by removing this special case.\n      if (err.message.match(/server is closed/)) {\n        this._cursor.close().catch(() => null);\n        return this.push(null);\n      }\n      // NOTE: This is also perhaps questionable. The rationale here is that these errors tend\n      //       to be \"operation was interrupted\", where a cursor has been closed but there is an\n      //       active getMore in-flight. This used to check if the cursor was killed but once\n      //       that changed to happen in cleanup legitimate errors would not destroy the\n      //       stream. There are change streams test specifically test these cases.\n      if (err.message.match(/operation was interrupted/)) {\n        return this.push(null);\n      }\n      // NOTE: The two above checks on the message of the error will cause a null to be pushed\n      //       to the stream, thus closing the stream before the destroy call happens. This means\n      //       that either of those error messages on a change stream will not get a proper\n      //       'error' event to be emitted (the error passed to destroy). Change stream resumability\n      //       relies on that error event to be emitted to create its new cursor and thus was not\n      //       working on 4.4 servers because the error emitted on failover was \"interrupted at\n      //       shutdown\" while on 5.0+ it is \"The server is in quiesce mode and will shut down\".\n      //       See NODE-4475.\n      return this.destroy(err);\n    });\n  }\n}","map":{"version":3,"names":["stream_1","require","bson_1","error_1","mongo_types_1","execute_operation_1","get_more_1","kill_cursors_1","read_concern_1","read_preference_1","sessions_1","utils_1","kId","Symbol","kDocuments","kServer","kNamespace","kClient","kSession","kOptions","kTransform","kInitialized","kClosed","kKilled","kInit","exports","CURSOR_FLAGS","AbstractCursor","TypedEventEmitter","constructor","client","namespace","options","s","isMongoClient","MongoRuntimeError","List","readPreference","ReadPreference","primary","pluckBSONSerializeOptions","readConcern","ReadConcern","fromOptions","batchSize","comment","undefined","maxTimeMS","maxAwaitTimeMS","session","ClientSession","startSession","owner","explicit","id","isDead","isZero","server","clientSession","cursorOptions","closed","killed","loadBalanced","topology","bufferedCount","length","readBufferedDocuments","number","bufferedDocs","documentsToRead","Math","min","count","document","shift","push","asyncIterator","next","message","cleanupCursor","needsToEmitClosed","catch","MongoAPIError","Long","ZERO","close","stream","transform","readable","ReadableCursorStream","transformedStream","pipe","Transform","objectMode","highWaterMark","chunk","_","callback","transformed","err","on","emit","hasNext","doc","blocking","unshift","MongoCursorExhaustedError","tryNext","forEach","iterator","MongoInvalidArgumentError","result","toArray","array","addCursorFlag","flag","value","assertUninitialized","includes","map","oldTransform","withReadPreference","fromString","withReadConcern","resolvedReadConcern","tailable","MongoTailableCursorError","rewind","clear","hasEnded","endSession","getMore","getMoreOperation","GetMoreOperation","executeOperation","state","_initialize","response","cursor","fromNumber","fromBigInt","ns","pushMany","firstBatch","error","CLOSE","cursorId","nextBatch","cursorNs","MongoNetworkError","completeCleanup","inTransaction","maybeClearPinnedConnection","KillCursorsOperation","MongoCursorInUseError","Readable","autoDestroy","_readInProgress","_cursor","_read","size","_readNext","_destroy","then","closeError","destroyed","match","destroy"],"sources":["C:\\Users\\sumit\\Desktop\\Final project\\Expense-Tracker-Springboot-Frontend\\node_modules\\mongodb\\src\\cursor\\abstract_cursor.ts"],"sourcesContent":["import { Readable, Transform } from 'stream';\r\n\r\nimport { type BSONSerializeOptions, type Document, Long, pluckBSONSerializeOptions } from '../bson';\r\nimport {\r\n  type AnyError,\r\n  MongoAPIError,\r\n  MongoCursorExhaustedError,\r\n  MongoCursorInUseError,\r\n  MongoInvalidArgumentError,\r\n  MongoNetworkError,\r\n  MongoRuntimeError,\r\n  MongoTailableCursorError\r\n} from '../error';\r\nimport type { MongoClient } from '../mongo_client';\r\nimport { type TODO_NODE_3286, TypedEventEmitter } from '../mongo_types';\r\nimport { executeOperation, type ExecutionResult } from '../operations/execute_operation';\r\nimport { GetMoreOperation } from '../operations/get_more';\r\nimport { KillCursorsOperation } from '../operations/kill_cursors';\r\nimport { ReadConcern, type ReadConcernLike } from '../read_concern';\r\nimport { ReadPreference, type ReadPreferenceLike } from '../read_preference';\r\nimport type { Server } from '../sdam/server';\r\nimport { ClientSession, maybeClearPinnedConnection } from '../sessions';\r\nimport { List, type MongoDBNamespace, ns } from '../utils';\r\n\r\n/** @internal */\r\nconst kId = Symbol('id');\r\n/** @internal */\r\nconst kDocuments = Symbol('documents');\r\n/** @internal */\r\nconst kServer = Symbol('server');\r\n/** @internal */\r\nconst kNamespace = Symbol('namespace');\r\n/** @internal */\r\nconst kClient = Symbol('client');\r\n/** @internal */\r\nconst kSession = Symbol('session');\r\n/** @internal */\r\nconst kOptions = Symbol('options');\r\n/** @internal */\r\nconst kTransform = Symbol('transform');\r\n/** @internal */\r\nconst kInitialized = Symbol('initialized');\r\n/** @internal */\r\nconst kClosed = Symbol('closed');\r\n/** @internal */\r\nconst kKilled = Symbol('killed');\r\n/** @internal */\r\nconst kInit = Symbol('kInit');\r\n\r\n/** @public */\r\nexport const CURSOR_FLAGS = [\r\n  'tailable',\r\n  'oplogReplay',\r\n  'noCursorTimeout',\r\n  'awaitData',\r\n  'exhaust',\r\n  'partial'\r\n] as const;\r\n\r\n/** @public */\r\nexport interface CursorStreamOptions {\r\n  /** A transformation method applied to each document emitted by the stream */\r\n  transform?(this: void, doc: Document): Document;\r\n}\r\n\r\n/** @public */\r\nexport type CursorFlag = (typeof CURSOR_FLAGS)[number];\r\n\r\n/** @public */\r\nexport interface AbstractCursorOptions extends BSONSerializeOptions {\r\n  session?: ClientSession;\r\n  readPreference?: ReadPreferenceLike;\r\n  readConcern?: ReadConcernLike;\r\n  /**\r\n   * Specifies the number of documents to return in each response from MongoDB\r\n   */\r\n  batchSize?: number;\r\n  /**\r\n   * When applicable `maxTimeMS` controls the amount of time the initial command\r\n   * that constructs a cursor should take. (ex. find, aggregate, listCollections)\r\n   */\r\n  maxTimeMS?: number;\r\n  /**\r\n   * When applicable `maxAwaitTimeMS` controls the amount of time subsequent getMores\r\n   * that a cursor uses to fetch more data should take. (ex. cursor.next())\r\n   */\r\n  maxAwaitTimeMS?: number;\r\n  /**\r\n   * Comment to apply to the operation.\r\n   *\r\n   * In server versions pre-4.4, 'comment' must be string.  A server\r\n   * error will be thrown if any other type is provided.\r\n   *\r\n   * In server versions 4.4 and above, 'comment' can be any valid BSON type.\r\n   */\r\n  comment?: unknown;\r\n  /**\r\n   * By default, MongoDB will automatically close a cursor when the\r\n   * client has exhausted all results in the cursor. However, for [capped collections](https://www.mongodb.com/docs/manual/core/capped-collections)\r\n   * you may use a Tailable Cursor that remains open after the client exhausts\r\n   * the results in the initial cursor.\r\n   */\r\n  tailable?: boolean;\r\n  /**\r\n   * If awaitData is set to true, when the cursor reaches the end of the capped collection,\r\n   * MongoDB blocks the query thread for a period of time waiting for new data to arrive.\r\n   * When new data is inserted into the capped collection, the blocked thread is signaled\r\n   * to wake up and return the next batch to the client.\r\n   */\r\n  awaitData?: boolean;\r\n  noCursorTimeout?: boolean;\r\n}\r\n\r\n/** @internal */\r\nexport type InternalAbstractCursorOptions = Omit<AbstractCursorOptions, 'readPreference'> & {\r\n  // resolved\r\n  readPreference: ReadPreference;\r\n  readConcern?: ReadConcern;\r\n\r\n  // cursor flags, some are deprecated\r\n  oplogReplay?: boolean;\r\n  exhaust?: boolean;\r\n  partial?: boolean;\r\n};\r\n\r\n/** @public */\r\nexport type AbstractCursorEvents = {\r\n  [AbstractCursor.CLOSE](): void;\r\n};\r\n\r\n/** @public */\r\nexport abstract class AbstractCursor<\r\n  TSchema = any,\r\n  CursorEvents extends AbstractCursorEvents = AbstractCursorEvents\r\n> extends TypedEventEmitter<CursorEvents> {\r\n  /** @internal */\r\n  [kId]: Long | null;\r\n  /** @internal */\r\n  [kSession]: ClientSession;\r\n  /** @internal */\r\n  [kServer]?: Server;\r\n  /** @internal */\r\n  [kNamespace]: MongoDBNamespace;\r\n  /** @internal */\r\n  [kDocuments]: List<TSchema>;\r\n  /** @internal */\r\n  [kClient]: MongoClient;\r\n  /** @internal */\r\n  [kTransform]?: (doc: TSchema) => any;\r\n  /** @internal */\r\n  [kInitialized]: boolean;\r\n  /** @internal */\r\n  [kClosed]: boolean;\r\n  /** @internal */\r\n  [kKilled]: boolean;\r\n  /** @internal */\r\n  [kOptions]: InternalAbstractCursorOptions;\r\n\r\n  /** @event */\r\n  static readonly CLOSE = 'close' as const;\r\n\r\n  /** @internal */\r\n  constructor(\r\n    client: MongoClient,\r\n    namespace: MongoDBNamespace,\r\n    options: AbstractCursorOptions = {}\r\n  ) {\r\n    super();\r\n\r\n    if (!client.s.isMongoClient) {\r\n      throw new MongoRuntimeError('Cursor must be constructed with MongoClient');\r\n    }\r\n    this[kClient] = client;\r\n    this[kNamespace] = namespace;\r\n    this[kId] = null;\r\n    this[kDocuments] = new List();\r\n    this[kInitialized] = false;\r\n    this[kClosed] = false;\r\n    this[kKilled] = false;\r\n    this[kOptions] = {\r\n      readPreference:\r\n        options.readPreference && options.readPreference instanceof ReadPreference\r\n          ? options.readPreference\r\n          : ReadPreference.primary,\r\n      ...pluckBSONSerializeOptions(options)\r\n    };\r\n\r\n    const readConcern = ReadConcern.fromOptions(options);\r\n    if (readConcern) {\r\n      this[kOptions].readConcern = readConcern;\r\n    }\r\n\r\n    if (typeof options.batchSize === 'number') {\r\n      this[kOptions].batchSize = options.batchSize;\r\n    }\r\n\r\n    // we check for undefined specifically here to allow falsy values\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    if (options.comment !== undefined) {\r\n      this[kOptions].comment = options.comment;\r\n    }\r\n\r\n    if (typeof options.maxTimeMS === 'number') {\r\n      this[kOptions].maxTimeMS = options.maxTimeMS;\r\n    }\r\n\r\n    if (typeof options.maxAwaitTimeMS === 'number') {\r\n      this[kOptions].maxAwaitTimeMS = options.maxAwaitTimeMS;\r\n    }\r\n\r\n    if (options.session instanceof ClientSession) {\r\n      this[kSession] = options.session;\r\n    } else {\r\n      this[kSession] = this[kClient].startSession({ owner: this, explicit: false });\r\n    }\r\n  }\r\n\r\n  get id(): Long | undefined {\r\n    return this[kId] ?? undefined;\r\n  }\r\n\r\n  /** @internal */\r\n  get isDead() {\r\n    return (this[kId]?.isZero() ?? false) || this[kClosed] || this[kKilled];\r\n  }\r\n\r\n  /** @internal */\r\n  get client(): MongoClient {\r\n    return this[kClient];\r\n  }\r\n\r\n  /** @internal */\r\n  get server(): Server | undefined {\r\n    return this[kServer];\r\n  }\r\n\r\n  get namespace(): MongoDBNamespace {\r\n    return this[kNamespace];\r\n  }\r\n\r\n  get readPreference(): ReadPreference {\r\n    return this[kOptions].readPreference;\r\n  }\r\n\r\n  get readConcern(): ReadConcern | undefined {\r\n    return this[kOptions].readConcern;\r\n  }\r\n\r\n  /** @internal */\r\n  get session(): ClientSession {\r\n    return this[kSession];\r\n  }\r\n\r\n  set session(clientSession: ClientSession) {\r\n    this[kSession] = clientSession;\r\n  }\r\n\r\n  /** @internal */\r\n  get cursorOptions(): InternalAbstractCursorOptions {\r\n    return this[kOptions];\r\n  }\r\n\r\n  get closed(): boolean {\r\n    return this[kClosed];\r\n  }\r\n\r\n  get killed(): boolean {\r\n    return this[kKilled];\r\n  }\r\n\r\n  get loadBalanced(): boolean {\r\n    return !!this[kClient].topology?.loadBalanced;\r\n  }\r\n\r\n  /** Returns current buffered documents length */\r\n  bufferedCount(): number {\r\n    return this[kDocuments].length;\r\n  }\r\n\r\n  /** Returns current buffered documents */\r\n  readBufferedDocuments(number?: number): TSchema[] {\r\n    const bufferedDocs: TSchema[] = [];\r\n    const documentsToRead = Math.min(number ?? this[kDocuments].length, this[kDocuments].length);\r\n\r\n    for (let count = 0; count < documentsToRead; count++) {\r\n      const document = this[kDocuments].shift();\r\n      if (document != null) {\r\n        bufferedDocs.push(document);\r\n      }\r\n    }\r\n\r\n    return bufferedDocs;\r\n  }\r\n\r\n  async *[Symbol.asyncIterator](): AsyncGenerator<TSchema, void, void> {\r\n    if (this.closed) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      while (true) {\r\n        const document = await this.next();\r\n\r\n        // Intentional strict null check, because users can map cursors to falsey values.\r\n        // We allow mapping to all values except for null.\r\n        // eslint-disable-next-line no-restricted-syntax\r\n        if (document === null) {\r\n          if (!this.closed) {\r\n            const message =\r\n              'Cursor returned a `null` document, but the cursor is not exhausted.  Mapping documents to `null` is not supported in the cursor transform.';\r\n\r\n            await cleanupCursor(this, { needsToEmitClosed: true }).catch(() => null);\r\n\r\n            throw new MongoAPIError(message);\r\n          }\r\n          break;\r\n        }\r\n\r\n        yield document;\r\n\r\n        if (this[kId] === Long.ZERO) {\r\n          // Cursor exhausted\r\n          break;\r\n        }\r\n      }\r\n    } finally {\r\n      // Only close the cursor if it has not already been closed. This finally clause handles\r\n      // the case when a user would break out of a for await of loop early.\r\n      if (!this.closed) {\r\n        await this.close().catch(() => null);\r\n      }\r\n    }\r\n  }\r\n\r\n  stream(options?: CursorStreamOptions): Readable & AsyncIterable<TSchema> {\r\n    if (options?.transform) {\r\n      const transform = options.transform;\r\n      const readable = new ReadableCursorStream(this);\r\n\r\n      const transformedStream = readable.pipe(\r\n        new Transform({\r\n          objectMode: true,\r\n          highWaterMark: 1,\r\n          transform(chunk, _, callback) {\r\n            try {\r\n              const transformed = transform(chunk);\r\n              callback(undefined, transformed);\r\n            } catch (err) {\r\n              callback(err);\r\n            }\r\n          }\r\n        })\r\n      );\r\n\r\n      // Bubble errors to transformed stream, because otherwise no way\r\n      // to handle this error.\r\n      readable.on('error', err => transformedStream.emit('error', err));\r\n\r\n      return transformedStream;\r\n    }\r\n\r\n    return new ReadableCursorStream(this);\r\n  }\r\n\r\n  async hasNext(): Promise<boolean> {\r\n    if (this[kId] === Long.ZERO) {\r\n      return false;\r\n    }\r\n\r\n    if (this[kDocuments].length !== 0) {\r\n      return true;\r\n    }\r\n\r\n    const doc = await next<TSchema>(this, { blocking: true, transform: false });\r\n\r\n    if (doc) {\r\n      this[kDocuments].unshift(doc);\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /** Get the next available document from the cursor, returns null if no more documents are available. */\r\n  async next(): Promise<TSchema | null> {\r\n    if (this[kId] === Long.ZERO) {\r\n      throw new MongoCursorExhaustedError();\r\n    }\r\n\r\n    return next(this, { blocking: true, transform: true });\r\n  }\r\n\r\n  /**\r\n   * Try to get the next available document from the cursor or `null` if an empty batch is returned\r\n   */\r\n  async tryNext(): Promise<TSchema | null> {\r\n    if (this[kId] === Long.ZERO) {\r\n      throw new MongoCursorExhaustedError();\r\n    }\r\n\r\n    return next(this, { blocking: false, transform: true });\r\n  }\r\n\r\n  /**\r\n   * Iterates over all the documents for this cursor using the iterator, callback pattern.\r\n   *\r\n   * If the iterator returns `false`, iteration will stop.\r\n   *\r\n   * @param iterator - The iteration callback.\r\n   * @deprecated - Will be removed in a future release. Use for await...of instead.\r\n   */\r\n  async forEach(iterator: (doc: TSchema) => boolean | void): Promise<void> {\r\n    if (typeof iterator !== 'function') {\r\n      throw new MongoInvalidArgumentError('Argument \"iterator\" must be a function');\r\n    }\r\n    for await (const document of this) {\r\n      const result = iterator(document);\r\n      if (result === false) {\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  async close(): Promise<void> {\r\n    const needsToEmitClosed = !this[kClosed];\r\n    this[kClosed] = true;\r\n    await cleanupCursor(this, { needsToEmitClosed });\r\n  }\r\n\r\n  /**\r\n   * Returns an array of documents. The caller is responsible for making sure that there\r\n   * is enough memory to store the results. Note that the array only contains partial\r\n   * results when this cursor had been previously accessed. In that case,\r\n   * cursor.rewind() can be used to reset the cursor.\r\n   */\r\n  async toArray(): Promise<TSchema[]> {\r\n    const array = [];\r\n    for await (const document of this) {\r\n      array.push(document);\r\n    }\r\n    return array;\r\n  }\r\n\r\n  /**\r\n   * Add a cursor flag to the cursor\r\n   *\r\n   * @param flag - The flag to set, must be one of following ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'partial' -.\r\n   * @param value - The flag boolean value.\r\n   */\r\n  addCursorFlag(flag: CursorFlag, value: boolean): this {\r\n    assertUninitialized(this);\r\n    if (!CURSOR_FLAGS.includes(flag)) {\r\n      throw new MongoInvalidArgumentError(`Flag ${flag} is not one of ${CURSOR_FLAGS}`);\r\n    }\r\n\r\n    if (typeof value !== 'boolean') {\r\n      throw new MongoInvalidArgumentError(`Flag ${flag} must be a boolean value`);\r\n    }\r\n\r\n    this[kOptions][flag] = value;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Map all documents using the provided function\r\n   * If there is a transform set on the cursor, that will be called first and the result passed to\r\n   * this function's transform.\r\n   *\r\n   * @remarks\r\n   *\r\n   * **Note** Cursors use `null` internally to indicate that there are no more documents in the cursor. Providing a mapping\r\n   * function that maps values to `null` will result in the cursor closing itself before it has finished iterating\r\n   * all documents.  This will **not** result in a memory leak, just surprising behavior.  For example:\r\n   *\r\n   * ```typescript\r\n   * const cursor = collection.find({});\r\n   * cursor.map(() => null);\r\n   *\r\n   * const documents = await cursor.toArray();\r\n   * // documents is always [], regardless of how many documents are in the collection.\r\n   * ```\r\n   *\r\n   * Other falsey values are allowed:\r\n   *\r\n   * ```typescript\r\n   * const cursor = collection.find({});\r\n   * cursor.map(() => '');\r\n   *\r\n   * const documents = await cursor.toArray();\r\n   * // documents is now an array of empty strings\r\n   * ```\r\n   *\r\n   * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\r\n   * it **does not** return a new instance of a cursor. This means when calling map,\r\n   * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\r\n   * Take note of the following example:\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const cursor: FindCursor<Document> = coll.find();\r\n   * const mappedCursor: FindCursor<number> = cursor.map(doc => Object.keys(doc).length);\r\n   * const keyCounts: number[] = await mappedCursor.toArray(); // cursor.toArray() still returns Document[]\r\n   * ```\r\n   * @param transform - The mapping transformation method.\r\n   */\r\n  map<T = any>(transform: (doc: TSchema) => T): AbstractCursor<T> {\r\n    assertUninitialized(this);\r\n    const oldTransform = this[kTransform] as (doc: TSchema) => TSchema; // TODO(NODE-3283): Improve transform typing\r\n    if (oldTransform) {\r\n      this[kTransform] = doc => {\r\n        return transform(oldTransform(doc));\r\n      };\r\n    } else {\r\n      this[kTransform] = transform;\r\n    }\r\n\r\n    return this as unknown as AbstractCursor<T>;\r\n  }\r\n\r\n  /**\r\n   * Set the ReadPreference for the cursor.\r\n   *\r\n   * @param readPreference - The new read preference for the cursor.\r\n   */\r\n  withReadPreference(readPreference: ReadPreferenceLike): this {\r\n    assertUninitialized(this);\r\n    if (readPreference instanceof ReadPreference) {\r\n      this[kOptions].readPreference = readPreference;\r\n    } else if (typeof readPreference === 'string') {\r\n      this[kOptions].readPreference = ReadPreference.fromString(readPreference);\r\n    } else {\r\n      throw new MongoInvalidArgumentError(`Invalid read preference: ${readPreference}`);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set the ReadPreference for the cursor.\r\n   *\r\n   * @param readPreference - The new read preference for the cursor.\r\n   */\r\n  withReadConcern(readConcern: ReadConcernLike): this {\r\n    assertUninitialized(this);\r\n    const resolvedReadConcern = ReadConcern.fromOptions({ readConcern });\r\n    if (resolvedReadConcern) {\r\n      this[kOptions].readConcern = resolvedReadConcern;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)\r\n   *\r\n   * @param value - Number of milliseconds to wait before aborting the query.\r\n   */\r\n  maxTimeMS(value: number): this {\r\n    assertUninitialized(this);\r\n    if (typeof value !== 'number') {\r\n      throw new MongoInvalidArgumentError('Argument for maxTimeMS must be a number');\r\n    }\r\n\r\n    this[kOptions].maxTimeMS = value;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set the batch size for the cursor.\r\n   *\r\n   * @param value - The number of documents to return per batch. See {@link https://www.mongodb.com/docs/manual/reference/command/find/|find command documentation}.\r\n   */\r\n  batchSize(value: number): this {\r\n    assertUninitialized(this);\r\n    if (this[kOptions].tailable) {\r\n      throw new MongoTailableCursorError('Tailable cursor does not support batchSize');\r\n    }\r\n\r\n    if (typeof value !== 'number') {\r\n      throw new MongoInvalidArgumentError('Operation \"batchSize\" requires an integer');\r\n    }\r\n\r\n    this[kOptions].batchSize = value;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Rewind this cursor to its uninitialized state. Any options that are present on the cursor will\r\n   * remain in effect. Iterating this cursor will cause new queries to be sent to the server, even\r\n   * if the resultant data has already been retrieved by this cursor.\r\n   */\r\n  rewind(): void {\r\n    if (!this[kInitialized]) {\r\n      return;\r\n    }\r\n\r\n    this[kId] = null;\r\n    this[kDocuments].clear();\r\n    this[kClosed] = false;\r\n    this[kKilled] = false;\r\n    this[kInitialized] = false;\r\n\r\n    const session = this[kSession];\r\n    if (session) {\r\n      // We only want to end this session if we created it, and it hasn't ended yet\r\n      if (session.explicit === false) {\r\n        if (!session.hasEnded) {\r\n          session.endSession().catch(() => null);\r\n        }\r\n        this[kSession] = this.client.startSession({ owner: this, explicit: false });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns a new uninitialized copy of this cursor, with options matching those that have been set on the current instance\r\n   */\r\n  abstract clone(): AbstractCursor<TSchema>;\r\n\r\n  /** @internal */\r\n  protected abstract _initialize(session: ClientSession | undefined): Promise<ExecutionResult>;\r\n\r\n  /** @internal */\r\n  async getMore(batchSize: number): Promise<Document | null> {\r\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n    const getMoreOperation = new GetMoreOperation(this[kNamespace], this[kId]!, this[kServer]!, {\r\n      ...this[kOptions],\r\n      session: this[kSession],\r\n      batchSize\r\n    });\r\n\r\n    return executeOperation(this[kClient], getMoreOperation);\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   *\r\n   * This function is exposed for the unified test runner's createChangeStream\r\n   * operation.  We cannot refactor to use the abstract _initialize method without\r\n   * a significant refactor.\r\n   */\r\n  async [kInit](): Promise<void> {\r\n    try {\r\n      const state = await this._initialize(this[kSession]);\r\n      const response = state.response;\r\n      this[kServer] = state.server;\r\n      if (response.cursor) {\r\n        // TODO(NODE-2674): Preserve int64 sent from MongoDB\r\n        this[kId] =\r\n          typeof response.cursor.id === 'number'\r\n            ? Long.fromNumber(response.cursor.id)\r\n            : typeof response.cursor.id === 'bigint'\r\n            ? Long.fromBigInt(response.cursor.id)\r\n            : response.cursor.id;\r\n\r\n        if (response.cursor.ns) {\r\n          this[kNamespace] = ns(response.cursor.ns);\r\n        }\r\n\r\n        this[kDocuments].pushMany(response.cursor.firstBatch);\r\n      }\r\n\r\n      // When server responses return without a cursor document, we close this cursor\r\n      // and return the raw server response. This is often the case for explain commands\r\n      // for example\r\n      if (this[kId] == null) {\r\n        this[kId] = Long.ZERO;\r\n        // TODO(NODE-3286): ExecutionResult needs to accept a generic parameter\r\n        this[kDocuments].push(state.response as TODO_NODE_3286);\r\n      }\r\n\r\n      // the cursor is now initialized, even if it is dead\r\n      this[kInitialized] = true;\r\n    } catch (error) {\r\n      // the cursor is now initialized, even if an error occurred\r\n      this[kInitialized] = true;\r\n      await cleanupCursor(this, { error });\r\n      throw error;\r\n    }\r\n\r\n    if (this.isDead) {\r\n      await cleanupCursor(this, undefined);\r\n    }\r\n\r\n    return;\r\n  }\r\n}\r\n\r\n/**\r\n * @param cursor - the cursor on which to call `next`\r\n * @param blocking - a boolean indicating whether or not the cursor should `block` until data\r\n *     is available.  Generally, this flag is set to `false` because if the getMore returns no documents,\r\n *     the cursor has been exhausted.  In certain scenarios (ChangeStreams, tailable await cursors and\r\n *     `tryNext`, for example) blocking is necessary because a getMore returning no documents does\r\n *     not indicate the end of the cursor.\r\n * @param transform - if true, the cursor's transform function is applied to the result document (if the transform exists)\r\n * @returns the next document in the cursor, or `null`.  When `blocking` is `true`, a `null` document means\r\n * the cursor has been exhausted.  Otherwise, it means that there is no document available in the cursor's buffer.\r\n */\r\nasync function next<T>(\r\n  cursor: AbstractCursor<T>,\r\n  {\r\n    blocking,\r\n    transform\r\n  }: {\r\n    blocking: boolean;\r\n    transform: boolean;\r\n  }\r\n): Promise<T | null> {\r\n  if (cursor.closed) {\r\n    return null;\r\n  }\r\n\r\n  do {\r\n    if (cursor[kId] == null) {\r\n      // All cursors must operate within a session, one must be made implicitly if not explicitly provided\r\n      await cursor[kInit]();\r\n    }\r\n\r\n    if (cursor[kDocuments].length !== 0) {\r\n      const doc = cursor[kDocuments].shift();\r\n\r\n      if (doc != null && transform && cursor[kTransform]) {\r\n        try {\r\n          return cursor[kTransform](doc);\r\n        } catch (error) {\r\n          // `cleanupCursorAsync` should never throw, but if it does we want to throw the original\r\n          // error instead.\r\n          await cleanupCursor(cursor, { error, needsToEmitClosed: true }).catch(() => null);\r\n          throw error;\r\n        }\r\n      }\r\n\r\n      return doc;\r\n    }\r\n\r\n    if (cursor.isDead) {\r\n      // if the cursor is dead, we clean it up\r\n      // cleanupCursorAsync should never throw, but if it does it indicates a bug in the driver\r\n      // and we should surface the error\r\n      await cleanupCursor(cursor, {});\r\n      return null;\r\n    }\r\n\r\n    // otherwise need to call getMore\r\n    const batchSize = cursor[kOptions].batchSize || 1000;\r\n\r\n    try {\r\n      const response = await cursor.getMore(batchSize);\r\n\r\n      if (response) {\r\n        const cursorId =\r\n          typeof response.cursor.id === 'number'\r\n            ? Long.fromNumber(response.cursor.id)\r\n            : typeof response.cursor.id === 'bigint'\r\n            ? Long.fromBigInt(response.cursor.id)\r\n            : response.cursor.id;\r\n\r\n        cursor[kDocuments].pushMany(response.cursor.nextBatch);\r\n        cursor[kId] = cursorId;\r\n      }\r\n    } catch (error) {\r\n      // `cleanupCursorAsync` should never throw, but if it does we want to throw the original\r\n      // error instead.\r\n      await cleanupCursor(cursor, { error }).catch(() => null);\r\n      throw error;\r\n    }\r\n\r\n    if (cursor.isDead) {\r\n      // If we successfully received a response from a cursor BUT the cursor indicates that it is exhausted,\r\n      // we intentionally clean up the cursor to release its session back into the pool before the cursor\r\n      // is iterated.  This prevents a cursor that is exhausted on the server from holding\r\n      // onto a session indefinitely until the AbstractCursor is iterated.\r\n      //\r\n      // cleanupCursorAsync should never throw, but if it does it indicates a bug in the driver\r\n      // and we should surface the error\r\n      await cleanupCursor(cursor, {});\r\n    }\r\n\r\n    if (cursor[kDocuments].length === 0 && blocking === false) {\r\n      return null;\r\n    }\r\n  } while (!cursor.isDead || cursor[kDocuments].length !== 0);\r\n\r\n  return null;\r\n}\r\n\r\nasync function cleanupCursor(\r\n  cursor: AbstractCursor,\r\n  options: { error?: AnyError | undefined; needsToEmitClosed?: boolean } | undefined\r\n): Promise<void> {\r\n  const cursorId = cursor[kId];\r\n  const cursorNs = cursor[kNamespace];\r\n  const server = cursor[kServer];\r\n  const session = cursor[kSession];\r\n  const error = options?.error;\r\n\r\n  // Cursors only emit closed events once the client-side cursor has been exhausted fully or there\r\n  // was an error.  Notably, when the server returns a cursor id of 0 and a non-empty batch, we\r\n  // cleanup the cursor but don't emit a `close` event.\r\n  const needsToEmitClosed = options?.needsToEmitClosed ?? cursor[kDocuments].length === 0;\r\n\r\n  if (error) {\r\n    if (cursor.loadBalanced && error instanceof MongoNetworkError) {\r\n      return completeCleanup();\r\n    }\r\n  }\r\n\r\n  if (cursorId == null || server == null || cursorId.isZero() || cursorNs == null) {\r\n    if (needsToEmitClosed) {\r\n      cursor[kClosed] = true;\r\n      cursor[kId] = Long.ZERO;\r\n      cursor.emit(AbstractCursor.CLOSE);\r\n    }\r\n\r\n    if (session) {\r\n      if (session.owner === cursor) {\r\n        await session.endSession({ error });\r\n        return;\r\n      }\r\n\r\n      if (!session.inTransaction()) {\r\n        maybeClearPinnedConnection(session, { error });\r\n      }\r\n    }\r\n\r\n    return;\r\n  }\r\n\r\n  async function completeCleanup() {\r\n    if (session) {\r\n      if (session.owner === cursor) {\r\n        try {\r\n          await session.endSession({ error });\r\n        } finally {\r\n          cursor.emit(AbstractCursor.CLOSE);\r\n        }\r\n        return;\r\n      }\r\n\r\n      if (!session.inTransaction()) {\r\n        maybeClearPinnedConnection(session, { error });\r\n      }\r\n    }\r\n\r\n    cursor.emit(AbstractCursor.CLOSE);\r\n    return;\r\n  }\r\n\r\n  cursor[kKilled] = true;\r\n\r\n  if (session.hasEnded) {\r\n    return completeCleanup();\r\n  }\r\n\r\n  try {\r\n    await executeOperation(\r\n      cursor[kClient],\r\n      new KillCursorsOperation(cursorId, cursorNs, server, { session })\r\n    ).catch(() => null);\r\n  } finally {\r\n    await completeCleanup();\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport function assertUninitialized(cursor: AbstractCursor): void {\r\n  if (cursor[kInitialized]) {\r\n    throw new MongoCursorInUseError();\r\n  }\r\n}\r\n\r\nclass ReadableCursorStream extends Readable {\r\n  private _cursor: AbstractCursor;\r\n  private _readInProgress = false;\r\n\r\n  constructor(cursor: AbstractCursor) {\r\n    super({\r\n      objectMode: true,\r\n      autoDestroy: false,\r\n      highWaterMark: 1\r\n    });\r\n    this._cursor = cursor;\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  override _read(size: number): void {\r\n    if (!this._readInProgress) {\r\n      this._readInProgress = true;\r\n      this._readNext();\r\n    }\r\n  }\r\n\r\n  override _destroy(error: Error | null, callback: (error?: Error | null) => void): void {\r\n    this._cursor.close().then(\r\n      () => callback(error),\r\n      closeError => callback(closeError)\r\n    );\r\n  }\r\n\r\n  private _readNext() {\r\n    next(this._cursor, { blocking: true, transform: true }).then(\r\n      result => {\r\n        if (result == null) {\r\n          this.push(null);\r\n        } else if (this.destroyed) {\r\n          this._cursor.close().catch(() => null);\r\n        } else {\r\n          if (this.push(result)) {\r\n            return this._readNext();\r\n          }\r\n\r\n          this._readInProgress = false;\r\n        }\r\n      },\r\n      err => {\r\n        // NOTE: This is questionable, but we have a test backing the behavior. It seems the\r\n        //       desired behavior is that a stream ends cleanly when a user explicitly closes\r\n        //       a client during iteration. Alternatively, we could do the \"right\" thing and\r\n        //       propagate the error message by removing this special case.\r\n        if (err.message.match(/server is closed/)) {\r\n          this._cursor.close().catch(() => null);\r\n          return this.push(null);\r\n        }\r\n\r\n        // NOTE: This is also perhaps questionable. The rationale here is that these errors tend\r\n        //       to be \"operation was interrupted\", where a cursor has been closed but there is an\r\n        //       active getMore in-flight. This used to check if the cursor was killed but once\r\n        //       that changed to happen in cleanup legitimate errors would not destroy the\r\n        //       stream. There are change streams test specifically test these cases.\r\n        if (err.message.match(/operation was interrupted/)) {\r\n          return this.push(null);\r\n        }\r\n\r\n        // NOTE: The two above checks on the message of the error will cause a null to be pushed\r\n        //       to the stream, thus closing the stream before the destroy call happens. This means\r\n        //       that either of those error messages on a change stream will not get a proper\r\n        //       'error' event to be emitted (the error passed to destroy). Change stream resumability\r\n        //       relies on that error event to be emitted to create its new cursor and thus was not\r\n        //       working on 4.4 servers because the error emitted on failover was \"interrupted at\r\n        //       shutdown\" while on 5.0+ it is \"The server is in quiesce mode and will shut down\".\r\n        //       See NODE-4475.\r\n        return this.destroy(err);\r\n      }\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}