{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decompressResponse = exports.compressCommand = exports.decompress = exports.compress = exports.uncompressibleCommands = exports.Compressor = void 0;\nconst util_1 = require(\"util\");\nconst zlib = require(\"zlib\");\nconst constants_1 = require(\"../../constants\");\nconst deps_1 = require(\"../../deps\");\nconst error_1 = require(\"../../error\");\nconst commands_1 = require(\"../commands\");\nconst constants_2 = require(\"./constants\");\n/** @public */\nexports.Compressor = Object.freeze({\n  none: 0,\n  snappy: 1,\n  zlib: 2,\n  zstd: 3\n});\nexports.uncompressibleCommands = new Set([constants_1.LEGACY_HELLO_COMMAND, 'saslStart', 'saslContinue', 'getnonce', 'authenticate', 'createUser', 'updateUser', 'copydbSaslStart', 'copydbgetnonce', 'copydb']);\nconst ZSTD_COMPRESSION_LEVEL = 3;\nconst zlibInflate = (0, util_1.promisify)(zlib.inflate.bind(zlib));\nconst zlibDeflate = (0, util_1.promisify)(zlib.deflate.bind(zlib));\nlet zstd;\nlet Snappy = null;\nfunction loadSnappy() {\n  if (Snappy == null) {\n    const snappyImport = (0, deps_1.getSnappy)();\n    if ('kModuleError' in snappyImport) {\n      throw snappyImport.kModuleError;\n    }\n    Snappy = snappyImport;\n  }\n  return Snappy;\n}\n// Facilitate compressing a message using an agreed compressor\nasync function compress(options, dataToBeCompressed) {\n  const zlibOptions = {};\n  switch (options.agreedCompressor) {\n    case 'snappy':\n      {\n        Snappy ??= loadSnappy();\n        return Snappy.compress(dataToBeCompressed);\n      }\n    case 'zstd':\n      {\n        loadZstd();\n        if ('kModuleError' in zstd) {\n          throw zstd['kModuleError'];\n        }\n        return zstd.compress(dataToBeCompressed, ZSTD_COMPRESSION_LEVEL);\n      }\n    case 'zlib':\n      {\n        if (options.zlibCompressionLevel) {\n          zlibOptions.level = options.zlibCompressionLevel;\n        }\n        return zlibDeflate(dataToBeCompressed, zlibOptions);\n      }\n    default:\n      {\n        throw new error_1.MongoInvalidArgumentError(`Unknown compressor ${options.agreedCompressor} failed to compress`);\n      }\n  }\n}\nexports.compress = compress;\n// Decompress a message using the given compressor\nasync function decompress(compressorID, compressedData) {\n  if (compressorID !== exports.Compressor.snappy && compressorID !== exports.Compressor.zstd && compressorID !== exports.Compressor.zlib && compressorID !== exports.Compressor.none) {\n    throw new error_1.MongoDecompressionError(`Server sent message compressed using an unsupported compressor. (Received compressor ID ${compressorID})`);\n  }\n  switch (compressorID) {\n    case exports.Compressor.snappy:\n      {\n        Snappy ??= loadSnappy();\n        return Snappy.uncompress(compressedData, {\n          asBuffer: true\n        });\n      }\n    case exports.Compressor.zstd:\n      {\n        loadZstd();\n        if ('kModuleError' in zstd) {\n          throw zstd['kModuleError'];\n        }\n        return zstd.decompress(compressedData);\n      }\n    case exports.Compressor.zlib:\n      {\n        return zlibInflate(compressedData);\n      }\n    default:\n      {\n        return compressedData;\n      }\n  }\n}\nexports.decompress = decompress;\n/**\r\n * Load ZStandard if it is not already set.\r\n */\nfunction loadZstd() {\n  if (!zstd) {\n    zstd = (0, deps_1.getZstdLibrary)();\n  }\n}\nconst MESSAGE_HEADER_SIZE = 16;\n/**\r\n * @internal\r\n *\r\n * Compresses an OP_MSG or OP_QUERY message, if compression is configured.  This method\r\n * also serializes the command to BSON.\r\n */\nasync function compressCommand(command, description) {\n  const finalCommand = description.agreedCompressor === 'none' || !commands_1.OpCompressedRequest.canCompress(command) ? command : new commands_1.OpCompressedRequest(command, {\n    agreedCompressor: description.agreedCompressor ?? 'none',\n    zlibCompressionLevel: description.zlibCompressionLevel ?? 0\n  });\n  const data = await finalCommand.toBin();\n  return Buffer.concat(data);\n}\nexports.compressCommand = compressCommand;\n/**\r\n * @internal\r\n *\r\n * Decompresses an OP_MSG or OP_QUERY response from the server, if compression is configured.\r\n *\r\n * This method does not parse the response's BSON.\r\n */\nasync function decompressResponse(message) {\n  const messageHeader = {\n    length: message.readInt32LE(0),\n    requestId: message.readInt32LE(4),\n    responseTo: message.readInt32LE(8),\n    opCode: message.readInt32LE(12)\n  };\n  if (messageHeader.opCode !== constants_2.OP_COMPRESSED) {\n    const ResponseType = messageHeader.opCode === constants_2.OP_MSG ? commands_1.OpMsgResponse : commands_1.OpQueryResponse;\n    const messageBody = message.subarray(MESSAGE_HEADER_SIZE);\n    return new ResponseType(message, messageHeader, messageBody);\n  }\n  const header = {\n    ...messageHeader,\n    fromCompressed: true,\n    opCode: message.readInt32LE(MESSAGE_HEADER_SIZE),\n    length: message.readInt32LE(MESSAGE_HEADER_SIZE + 4)\n  };\n  const compressorID = message[MESSAGE_HEADER_SIZE + 8];\n  const compressedBuffer = message.slice(MESSAGE_HEADER_SIZE + 9);\n  // recalculate based on wrapped opcode\n  const ResponseType = header.opCode === constants_2.OP_MSG ? commands_1.OpMsgResponse : commands_1.OpQueryResponse;\n  const messageBody = await decompress(compressorID, compressedBuffer);\n  if (messageBody.length !== header.length) {\n    throw new error_1.MongoDecompressionError('Message body and message header must be the same length');\n  }\n  return new ResponseType(message, header, messageBody);\n}\nexports.decompressResponse = decompressResponse;","map":{"version":3,"names":["util_1","require","zlib","constants_1","deps_1","error_1","commands_1","constants_2","exports","Compressor","Object","freeze","none","snappy","zstd","uncompressibleCommands","Set","LEGACY_HELLO_COMMAND","ZSTD_COMPRESSION_LEVEL","zlibInflate","promisify","inflate","bind","zlibDeflate","deflate","Snappy","loadSnappy","snappyImport","getSnappy","kModuleError","compress","options","dataToBeCompressed","zlibOptions","agreedCompressor","loadZstd","zlibCompressionLevel","level","MongoInvalidArgumentError","decompress","compressorID","compressedData","MongoDecompressionError","uncompress","asBuffer","getZstdLibrary","MESSAGE_HEADER_SIZE","compressCommand","command","description","finalCommand","OpCompressedRequest","canCompress","data","toBin","Buffer","concat","decompressResponse","message","messageHeader","length","readInt32LE","requestId","responseTo","opCode","OP_COMPRESSED","ResponseType","OP_MSG","OpMsgResponse","OpQueryResponse","messageBody","subarray","header","fromCompressed","compressedBuffer","slice"],"sources":["C:\\Users\\sumit\\Desktop\\Final project\\Expense-Tracker-Springboot-Frontend\\node_modules\\mongodb\\src\\cmap\\wire_protocol\\compression.ts"],"sourcesContent":["import { promisify } from 'util';\r\nimport * as zlib from 'zlib';\r\n\r\nimport { LEGACY_HELLO_COMMAND } from '../../constants';\r\nimport { getSnappy, getZstdLibrary, type SnappyLib, type ZStandard } from '../../deps';\r\nimport { MongoDecompressionError, MongoInvalidArgumentError } from '../../error';\r\nimport {\r\n  type MessageHeader,\r\n  OpCompressedRequest,\r\n  OpMsgResponse,\r\n  OpQueryResponse,\r\n  type WriteProtocolMessageType\r\n} from '../commands';\r\nimport { OP_COMPRESSED, OP_MSG } from './constants';\r\n\r\n/** @public */\r\nexport const Compressor = Object.freeze({\r\n  none: 0,\r\n  snappy: 1,\r\n  zlib: 2,\r\n  zstd: 3\r\n} as const);\r\n\r\n/** @public */\r\nexport type Compressor = (typeof Compressor)[CompressorName];\r\n\r\n/** @public */\r\nexport type CompressorName = keyof typeof Compressor;\r\n\r\nexport const uncompressibleCommands = new Set([\r\n  LEGACY_HELLO_COMMAND,\r\n  'saslStart',\r\n  'saslContinue',\r\n  'getnonce',\r\n  'authenticate',\r\n  'createUser',\r\n  'updateUser',\r\n  'copydbSaslStart',\r\n  'copydbgetnonce',\r\n  'copydb'\r\n]);\r\n\r\nconst ZSTD_COMPRESSION_LEVEL = 3;\r\n\r\nconst zlibInflate = promisify(zlib.inflate.bind(zlib));\r\nconst zlibDeflate = promisify(zlib.deflate.bind(zlib));\r\n\r\nlet zstd: typeof ZStandard;\r\nlet Snappy: SnappyLib | null = null;\r\nfunction loadSnappy() {\r\n  if (Snappy == null) {\r\n    const snappyImport = getSnappy();\r\n    if ('kModuleError' in snappyImport) {\r\n      throw snappyImport.kModuleError;\r\n    }\r\n    Snappy = snappyImport;\r\n  }\r\n  return Snappy;\r\n}\r\n\r\n// Facilitate compressing a message using an agreed compressor\r\nexport async function compress(\r\n  options: { zlibCompressionLevel: number; agreedCompressor: CompressorName },\r\n  dataToBeCompressed: Buffer\r\n): Promise<Buffer> {\r\n  const zlibOptions = {} as zlib.ZlibOptions;\r\n  switch (options.agreedCompressor) {\r\n    case 'snappy': {\r\n      Snappy ??= loadSnappy();\r\n      return Snappy.compress(dataToBeCompressed);\r\n    }\r\n    case 'zstd': {\r\n      loadZstd();\r\n      if ('kModuleError' in zstd) {\r\n        throw zstd['kModuleError'];\r\n      }\r\n      return zstd.compress(dataToBeCompressed, ZSTD_COMPRESSION_LEVEL);\r\n    }\r\n    case 'zlib': {\r\n      if (options.zlibCompressionLevel) {\r\n        zlibOptions.level = options.zlibCompressionLevel;\r\n      }\r\n      return zlibDeflate(dataToBeCompressed, zlibOptions);\r\n    }\r\n    default: {\r\n      throw new MongoInvalidArgumentError(\r\n        `Unknown compressor ${options.agreedCompressor} failed to compress`\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\n// Decompress a message using the given compressor\r\nexport async function decompress(compressorID: number, compressedData: Buffer): Promise<Buffer> {\r\n  if (\r\n    compressorID !== Compressor.snappy &&\r\n    compressorID !== Compressor.zstd &&\r\n    compressorID !== Compressor.zlib &&\r\n    compressorID !== Compressor.none\r\n  ) {\r\n    throw new MongoDecompressionError(\r\n      `Server sent message compressed using an unsupported compressor. (Received compressor ID ${compressorID})`\r\n    );\r\n  }\r\n\r\n  switch (compressorID) {\r\n    case Compressor.snappy: {\r\n      Snappy ??= loadSnappy();\r\n      return Snappy.uncompress(compressedData, { asBuffer: true });\r\n    }\r\n    case Compressor.zstd: {\r\n      loadZstd();\r\n      if ('kModuleError' in zstd) {\r\n        throw zstd['kModuleError'];\r\n      }\r\n      return zstd.decompress(compressedData);\r\n    }\r\n    case Compressor.zlib: {\r\n      return zlibInflate(compressedData);\r\n    }\r\n    default: {\r\n      return compressedData;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Load ZStandard if it is not already set.\r\n */\r\nfunction loadZstd() {\r\n  if (!zstd) {\r\n    zstd = getZstdLibrary();\r\n  }\r\n}\r\n\r\nconst MESSAGE_HEADER_SIZE = 16;\r\n\r\n/**\r\n * @internal\r\n *\r\n * Compresses an OP_MSG or OP_QUERY message, if compression is configured.  This method\r\n * also serializes the command to BSON.\r\n */\r\nexport async function compressCommand(\r\n  command: WriteProtocolMessageType,\r\n  description: { agreedCompressor?: CompressorName; zlibCompressionLevel?: number }\r\n): Promise<Buffer> {\r\n  const finalCommand =\r\n    description.agreedCompressor === 'none' || !OpCompressedRequest.canCompress(command)\r\n      ? command\r\n      : new OpCompressedRequest(command, {\r\n          agreedCompressor: description.agreedCompressor ?? 'none',\r\n          zlibCompressionLevel: description.zlibCompressionLevel ?? 0\r\n        });\r\n  const data = await finalCommand.toBin();\r\n  return Buffer.concat(data);\r\n}\r\n\r\n/**\r\n * @internal\r\n *\r\n * Decompresses an OP_MSG or OP_QUERY response from the server, if compression is configured.\r\n *\r\n * This method does not parse the response's BSON.\r\n */\r\nexport async function decompressResponse(\r\n  message: Buffer\r\n): Promise<OpMsgResponse | OpQueryResponse> {\r\n  const messageHeader: MessageHeader = {\r\n    length: message.readInt32LE(0),\r\n    requestId: message.readInt32LE(4),\r\n    responseTo: message.readInt32LE(8),\r\n    opCode: message.readInt32LE(12)\r\n  };\r\n\r\n  if (messageHeader.opCode !== OP_COMPRESSED) {\r\n    const ResponseType = messageHeader.opCode === OP_MSG ? OpMsgResponse : OpQueryResponse;\r\n    const messageBody = message.subarray(MESSAGE_HEADER_SIZE);\r\n    return new ResponseType(message, messageHeader, messageBody);\r\n  }\r\n\r\n  const header: MessageHeader = {\r\n    ...messageHeader,\r\n    fromCompressed: true,\r\n    opCode: message.readInt32LE(MESSAGE_HEADER_SIZE),\r\n    length: message.readInt32LE(MESSAGE_HEADER_SIZE + 4)\r\n  };\r\n  const compressorID = message[MESSAGE_HEADER_SIZE + 8];\r\n  const compressedBuffer = message.slice(MESSAGE_HEADER_SIZE + 9);\r\n\r\n  // recalculate based on wrapped opcode\r\n  const ResponseType = header.opCode === OP_MSG ? OpMsgResponse : OpQueryResponse;\r\n  const messageBody = await decompress(compressorID, compressedBuffer);\r\n  if (messageBody.length !== header.length) {\r\n    throw new MongoDecompressionError('Message body and message header must be the same length');\r\n  }\r\n  return new ResponseType(message, header, messageBody);\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}