{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AzureServiceWorkflow = void 0;\nconst error_1 = require(\"../../../error\");\nconst utils_1 = require(\"../../../utils\");\nconst azure_token_cache_1 = require(\"./azure_token_cache\");\nconst service_workflow_1 = require(\"./service_workflow\");\n/** Base URL for getting Azure tokens. */\nconst AZURE_BASE_URL = 'http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01';\n/** Azure request headers. */\nconst AZURE_HEADERS = Object.freeze({\n  Metadata: 'true',\n  Accept: 'application/json'\n});\n/** Invalid endpoint result error. */\nconst ENDPOINT_RESULT_ERROR = 'Azure endpoint did not return a value with only access_token and expires_in properties';\n/** Error for when the token audience is missing in the environment. */\nconst TOKEN_AUDIENCE_MISSING_ERROR = 'TOKEN_AUDIENCE must be set in the auth mechanism properties when PROVIDER_NAME is azure.';\n/**\r\n * Device workflow implementation for Azure.\r\n *\r\n * @internal\r\n */\nclass AzureServiceWorkflow extends service_workflow_1.ServiceWorkflow {\n  constructor() {\n    super(...arguments);\n    this.cache = new azure_token_cache_1.AzureTokenCache();\n  }\n  /**\r\n   * Get the token from the environment.\r\n   */\n  async getToken(credentials) {\n    const tokenAudience = credentials?.mechanismProperties.TOKEN_AUDIENCE;\n    if (!tokenAudience) {\n      throw new error_1.MongoAzureError(TOKEN_AUDIENCE_MISSING_ERROR);\n    }\n    let token;\n    const entry = this.cache.getEntry(tokenAudience);\n    if (entry?.isValid()) {\n      token = entry.token;\n    } else {\n      this.cache.deleteEntry(tokenAudience);\n      const response = await getAzureTokenData(tokenAudience);\n      if (!isEndpointResultValid(response)) {\n        throw new error_1.MongoAzureError(ENDPOINT_RESULT_ERROR);\n      }\n      this.cache.addEntry(tokenAudience, response);\n      token = response.access_token;\n    }\n    return token;\n  }\n}\nexports.AzureServiceWorkflow = AzureServiceWorkflow;\n/**\r\n * Hit the Azure endpoint to get the token data.\r\n */\nasync function getAzureTokenData(tokenAudience) {\n  const url = `${AZURE_BASE_URL}&resource=${tokenAudience}`;\n  const data = await (0, utils_1.request)(url, {\n    json: true,\n    headers: AZURE_HEADERS\n  });\n  return data;\n}\n/**\r\n * Determines if a result returned from the endpoint is valid.\r\n * This means the result is not nullish, contains the access_token required field\r\n * and the expires_in required field.\r\n */\nfunction isEndpointResultValid(token) {\n  if (token == null || typeof token !== 'object') return false;\n  return 'access_token' in token && 'expires_in' in token;\n}","map":{"version":3,"names":["error_1","require","utils_1","azure_token_cache_1","service_workflow_1","AZURE_BASE_URL","AZURE_HEADERS","Object","freeze","Metadata","Accept","ENDPOINT_RESULT_ERROR","TOKEN_AUDIENCE_MISSING_ERROR","AzureServiceWorkflow","ServiceWorkflow","constructor","cache","AzureTokenCache","getToken","credentials","tokenAudience","mechanismProperties","TOKEN_AUDIENCE","MongoAzureError","token","entry","getEntry","isValid","deleteEntry","response","getAzureTokenData","isEndpointResultValid","addEntry","access_token","exports","url","data","request","json","headers"],"sources":["C:\\Users\\sumit\\Desktop\\Final project\\Expense-Tracker-Springboot-Frontend\\node_modules\\mongodb\\src\\cmap\\auth\\mongodb_oidc\\azure_service_workflow.ts"],"sourcesContent":["import { MongoAzureError } from '../../../error';\r\nimport { request } from '../../../utils';\r\nimport type { MongoCredentials } from '../mongo_credentials';\r\nimport { AzureTokenCache } from './azure_token_cache';\r\nimport { ServiceWorkflow } from './service_workflow';\r\n\r\n/** Base URL for getting Azure tokens. */\r\nconst AZURE_BASE_URL =\r\n  'http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01';\r\n\r\n/** Azure request headers. */\r\nconst AZURE_HEADERS = Object.freeze({ Metadata: 'true', Accept: 'application/json' });\r\n\r\n/** Invalid endpoint result error. */\r\nconst ENDPOINT_RESULT_ERROR =\r\n  'Azure endpoint did not return a value with only access_token and expires_in properties';\r\n\r\n/** Error for when the token audience is missing in the environment. */\r\nconst TOKEN_AUDIENCE_MISSING_ERROR =\r\n  'TOKEN_AUDIENCE must be set in the auth mechanism properties when PROVIDER_NAME is azure.';\r\n\r\n/**\r\n * The Azure access token format.\r\n * @internal\r\n */\r\nexport interface AzureAccessToken {\r\n  access_token: string;\r\n  expires_in: number;\r\n}\r\n\r\n/**\r\n * Device workflow implementation for Azure.\r\n *\r\n * @internal\r\n */\r\nexport class AzureServiceWorkflow extends ServiceWorkflow {\r\n  cache = new AzureTokenCache();\r\n\r\n  /**\r\n   * Get the token from the environment.\r\n   */\r\n  async getToken(credentials?: MongoCredentials): Promise<string> {\r\n    const tokenAudience = credentials?.mechanismProperties.TOKEN_AUDIENCE;\r\n    if (!tokenAudience) {\r\n      throw new MongoAzureError(TOKEN_AUDIENCE_MISSING_ERROR);\r\n    }\r\n    let token;\r\n    const entry = this.cache.getEntry(tokenAudience);\r\n    if (entry?.isValid()) {\r\n      token = entry.token;\r\n    } else {\r\n      this.cache.deleteEntry(tokenAudience);\r\n      const response = await getAzureTokenData(tokenAudience);\r\n      if (!isEndpointResultValid(response)) {\r\n        throw new MongoAzureError(ENDPOINT_RESULT_ERROR);\r\n      }\r\n      this.cache.addEntry(tokenAudience, response);\r\n      token = response.access_token;\r\n    }\r\n    return token;\r\n  }\r\n}\r\n\r\n/**\r\n * Hit the Azure endpoint to get the token data.\r\n */\r\nasync function getAzureTokenData(tokenAudience: string): Promise<AzureAccessToken> {\r\n  const url = `${AZURE_BASE_URL}&resource=${tokenAudience}`;\r\n  const data = await request(url, {\r\n    json: true,\r\n    headers: AZURE_HEADERS\r\n  });\r\n  return data as AzureAccessToken;\r\n}\r\n\r\n/**\r\n * Determines if a result returned from the endpoint is valid.\r\n * This means the result is not nullish, contains the access_token required field\r\n * and the expires_in required field.\r\n */\r\nfunction isEndpointResultValid(\r\n  token: unknown\r\n): token is { access_token: unknown; expires_in: unknown } {\r\n  if (token == null || typeof token !== 'object') return false;\r\n  return 'access_token' in token && 'expires_in' in token;\r\n}\r\n"],"mappings":";;;;;;AAAA,MAAAA,OAAA,GAAAC,OAAA;AACA,MAAAC,OAAA,GAAAD,OAAA;AAEA,MAAAE,mBAAA,GAAAF,OAAA;AACA,MAAAG,kBAAA,GAAAH,OAAA;AAEA;AACA,MAAMI,cAAc,GAClB,8EAA8E;AAEhF;AACA,MAAMC,aAAa,GAAGC,MAAM,CAACC,MAAM,CAAC;EAAEC,QAAQ,EAAE,MAAM;EAAEC,MAAM,EAAE;AAAkB,CAAE,CAAC;AAErF;AACA,MAAMC,qBAAqB,GACzB,wFAAwF;AAE1F;AACA,MAAMC,4BAA4B,GAChC,0FAA0F;AAW5F;;;;;AAKA,MAAaC,oBAAqB,SAAQT,kBAAA,CAAAU,eAAe;EAAzDC,YAAA;;IACE,KAAAC,KAAK,GAAG,IAAIb,mBAAA,CAAAc,eAAe,EAAE;EAyB/B;EAvBE;;;EAGA,MAAMC,QAAQA,CAACC,WAA8B;IAC3C,MAAMC,aAAa,GAAGD,WAAW,EAAEE,mBAAmB,CAACC,cAAc;IACrE,IAAI,CAACF,aAAa,EAAE;MAClB,MAAM,IAAIpB,OAAA,CAAAuB,eAAe,CAACX,4BAA4B,CAAC;;IAEzD,IAAIY,KAAK;IACT,MAAMC,KAAK,GAAG,IAAI,CAACT,KAAK,CAACU,QAAQ,CAACN,aAAa,CAAC;IAChD,IAAIK,KAAK,EAAEE,OAAO,EAAE,EAAE;MACpBH,KAAK,GAAGC,KAAK,CAACD,KAAK;KACpB,MAAM;MACL,IAAI,CAACR,KAAK,CAACY,WAAW,CAACR,aAAa,CAAC;MACrC,MAAMS,QAAQ,GAAG,MAAMC,iBAAiB,CAACV,aAAa,CAAC;MACvD,IAAI,CAACW,qBAAqB,CAACF,QAAQ,CAAC,EAAE;QACpC,MAAM,IAAI7B,OAAA,CAAAuB,eAAe,CAACZ,qBAAqB,CAAC;;MAElD,IAAI,CAACK,KAAK,CAACgB,QAAQ,CAACZ,aAAa,EAAES,QAAQ,CAAC;MAC5CL,KAAK,GAAGK,QAAQ,CAACI,YAAY;;IAE/B,OAAOT,KAAK;EACd;;AAzBFU,OAAA,CAAArB,oBAAA,GAAAA,oBAAA;AA4BA;;;AAGA,eAAeiB,iBAAiBA,CAACV,aAAqB;EACpD,MAAMe,GAAG,GAAG,GAAG9B,cAAc,aAAae,aAAa,EAAE;EACzD,MAAMgB,IAAI,GAAG,MAAM,IAAAlC,OAAA,CAAAmC,OAAO,EAACF,GAAG,EAAE;IAC9BG,IAAI,EAAE,IAAI;IACVC,OAAO,EAAEjC;GACV,CAAC;EACF,OAAO8B,IAAwB;AACjC;AAEA;;;;;AAKA,SAASL,qBAAqBA,CAC5BP,KAAc;EAEd,IAAIA,KAAK,IAAI,IAAI,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE,OAAO,KAAK;EAC5D,OAAO,cAAc,IAAIA,KAAK,IAAI,YAAY,IAAIA,KAAK;AACzD","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}