{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CreateSearchIndexesOperation = void 0;\nconst operation_1 = require(\"../operation\");\n/** @internal */\nclass CreateSearchIndexesOperation extends operation_1.AbstractOperation {\n  constructor(collection, descriptions) {\n    super();\n    this.collection = collection;\n    this.descriptions = descriptions;\n  }\n  get commandName() {\n    return 'createSearchIndexes';\n  }\n  async execute(server, session) {\n    const namespace = this.collection.fullNamespace;\n    const command = {\n      createSearchIndexes: namespace.collection,\n      indexes: this.descriptions\n    };\n    const res = await server.command(namespace, command, {\n      session\n    });\n    const indexesCreated = res?.indexesCreated ?? [];\n    return indexesCreated.map(({\n      name\n    }) => name);\n  }\n}\nexports.CreateSearchIndexesOperation = CreateSearchIndexesOperation;","map":{"version":3,"names":["operation_1","require","CreateSearchIndexesOperation","AbstractOperation","constructor","collection","descriptions","commandName","execute","server","session","namespace","fullNamespace","command","createSearchIndexes","indexes","res","indexesCreated","map","name","exports"],"sources":["C:\\Users\\sumit\\Desktop\\Final project\\Expense-Tracker-Springboot-Frontend\\node_modules\\mongodb\\src\\operations\\search_indexes\\create.ts"],"sourcesContent":["import type { Document } from 'bson';\r\n\r\nimport type { Collection } from '../../collection';\r\nimport type { Server } from '../../sdam/server';\r\nimport type { ClientSession } from '../../sessions';\r\nimport { AbstractOperation } from '../operation';\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface SearchIndexDescription {\r\n  /** The name of the index. */\r\n  name?: string;\r\n\r\n  /** The index definition. */\r\n  definition: Document;\r\n}\r\n\r\n/** @internal */\r\nexport class CreateSearchIndexesOperation extends AbstractOperation<string[]> {\r\n  constructor(\r\n    private readonly collection: Collection,\r\n    private readonly descriptions: ReadonlyArray<SearchIndexDescription>\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  override get commandName() {\r\n    return 'createSearchIndexes' as const;\r\n  }\r\n\r\n  override async execute(server: Server, session: ClientSession | undefined): Promise<string[]> {\r\n    const namespace = this.collection.fullNamespace;\r\n    const command = {\r\n      createSearchIndexes: namespace.collection,\r\n      indexes: this.descriptions\r\n    };\r\n\r\n    const res = await server.command(namespace, command, { session });\r\n\r\n    const indexesCreated: Array<{ name: string }> = res?.indexesCreated ?? [];\r\n    return indexesCreated.map(({ name }) => name);\r\n  }\r\n}\r\n"],"mappings":";;;;;;AAKA,MAAAA,WAAA,GAAAC,OAAA;AAaA;AACA,MAAaC,4BAA6B,SAAQF,WAAA,CAAAG,iBAA2B;EAC3EC,YACmBC,UAAsB,EACtBC,YAAmD;IAEpE,KAAK,EAAE;IAHU,KAAAD,UAAU,GAAVA,UAAU;IACV,KAAAC,YAAY,GAAZA,YAAY;EAG/B;EAEA,IAAaC,WAAWA,CAAA;IACtB,OAAO,qBAA8B;EACvC;EAES,MAAMC,OAAOA,CAACC,MAAc,EAAEC,OAAkC;IACvE,MAAMC,SAAS,GAAG,IAAI,CAACN,UAAU,CAACO,aAAa;IAC/C,MAAMC,OAAO,GAAG;MACdC,mBAAmB,EAAEH,SAAS,CAACN,UAAU;MACzCU,OAAO,EAAE,IAAI,CAACT;KACf;IAED,MAAMU,GAAG,GAAG,MAAMP,MAAM,CAACI,OAAO,CAACF,SAAS,EAAEE,OAAO,EAAE;MAAEH;IAAO,CAAE,CAAC;IAEjE,MAAMO,cAAc,GAA4BD,GAAG,EAAEC,cAAc,IAAI,EAAE;IACzE,OAAOA,cAAc,CAACC,GAAG,CAAC,CAAC;MAAEC;IAAI,CAAE,KAAKA,IAAI,CAAC;EAC/C;;AAvBFC,OAAA,CAAAlB,4BAAA,GAAAA,4BAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}