{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ListCollectionsOperation = void 0;\nconst utils_1 = require(\"../utils\");\nconst command_1 = require(\"./command\");\nconst operation_1 = require(\"./operation\");\n/** @internal */\nclass ListCollectionsOperation extends command_1.CommandOperation {\n  constructor(db, filter, options) {\n    super(db, options);\n    this.options = {\n      ...options\n    };\n    delete this.options.writeConcern;\n    this.db = db;\n    this.filter = filter;\n    this.nameOnly = !!this.options.nameOnly;\n    this.authorizedCollections = !!this.options.authorizedCollections;\n    if (typeof this.options.batchSize === 'number') {\n      this.batchSize = this.options.batchSize;\n    }\n  }\n  get commandName() {\n    return 'listCollections';\n  }\n  async execute(server, session) {\n    return super.executeCommand(server, session, this.generateCommand((0, utils_1.maxWireVersion)(server)));\n  }\n  /* This is here for the purpose of unit testing the final command that gets sent. */\n  generateCommand(wireVersion) {\n    const command = {\n      listCollections: 1,\n      filter: this.filter,\n      cursor: this.batchSize ? {\n        batchSize: this.batchSize\n      } : {},\n      nameOnly: this.nameOnly,\n      authorizedCollections: this.authorizedCollections\n    };\n    // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n    if (wireVersion >= 9 && this.options.comment !== undefined) {\n      command.comment = this.options.comment;\n    }\n    return command;\n  }\n}\nexports.ListCollectionsOperation = ListCollectionsOperation;\n(0, operation_1.defineAspects)(ListCollectionsOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.RETRYABLE, operation_1.Aspect.CURSOR_CREATING]);","map":{"version":3,"names":["utils_1","require","command_1","operation_1","ListCollectionsOperation","CommandOperation","constructor","db","filter","options","writeConcern","nameOnly","authorizedCollections","batchSize","commandName","execute","server","session","executeCommand","generateCommand","maxWireVersion","wireVersion","command","listCollections","cursor","comment","undefined","exports","defineAspects","Aspect","READ_OPERATION","RETRYABLE","CURSOR_CREATING"],"sources":["C:\\Users\\sumit\\Desktop\\Final project\\Expense-Tracker-Springboot-Frontend\\node_modules\\mongodb\\src\\operations\\list_collections.ts"],"sourcesContent":["import type { Binary, Document } from '../bson';\r\nimport type { Db } from '../db';\r\nimport type { Server } from '../sdam/server';\r\nimport type { ClientSession } from '../sessions';\r\nimport { maxWireVersion } from '../utils';\r\nimport { CommandOperation, type CommandOperationOptions } from './command';\r\nimport { Aspect, defineAspects } from './operation';\r\n\r\n/** @public */\r\nexport interface ListCollectionsOptions extends Omit<CommandOperationOptions, 'writeConcern'> {\r\n  /** Since 4.0: If true, will only return the collection name in the response, and will omit additional info */\r\n  nameOnly?: boolean;\r\n  /** Since 4.0: If true and nameOnly is true, allows a user without the required privilege (i.e. listCollections action on the database) to run the command when access control is enforced. */\r\n  authorizedCollections?: boolean;\r\n  /** The batchSize for the returned command cursor or if pre 2.8 the systems batch collection */\r\n  batchSize?: number;\r\n}\r\n\r\n/** @internal */\r\nexport class ListCollectionsOperation extends CommandOperation<Document> {\r\n  /**\r\n   * @remarks WriteConcern can still be present on the options because\r\n   * we inherit options from the client/db/collection.  The\r\n   * key must be present on the options in order to delete it.\r\n   * This allows typescript to delete the key but will\r\n   * not allow a writeConcern to be assigned as a property on options.\r\n   */\r\n  override options: ListCollectionsOptions & { writeConcern?: never };\r\n  db: Db;\r\n  filter: Document;\r\n  nameOnly: boolean;\r\n  authorizedCollections: boolean;\r\n  batchSize?: number;\r\n\r\n  constructor(db: Db, filter: Document, options?: ListCollectionsOptions) {\r\n    super(db, options);\r\n\r\n    this.options = { ...options };\r\n    delete this.options.writeConcern;\r\n    this.db = db;\r\n    this.filter = filter;\r\n    this.nameOnly = !!this.options.nameOnly;\r\n    this.authorizedCollections = !!this.options.authorizedCollections;\r\n\r\n    if (typeof this.options.batchSize === 'number') {\r\n      this.batchSize = this.options.batchSize;\r\n    }\r\n  }\r\n\r\n  override get commandName() {\r\n    return 'listCollections' as const;\r\n  }\r\n\r\n  override async execute(server: Server, session: ClientSession | undefined): Promise<Document> {\r\n    return super.executeCommand(server, session, this.generateCommand(maxWireVersion(server)));\r\n  }\r\n\r\n  /* This is here for the purpose of unit testing the final command that gets sent. */\r\n  generateCommand(wireVersion: number): Document {\r\n    const command: Document = {\r\n      listCollections: 1,\r\n      filter: this.filter,\r\n      cursor: this.batchSize ? { batchSize: this.batchSize } : {},\r\n      nameOnly: this.nameOnly,\r\n      authorizedCollections: this.authorizedCollections\r\n    };\r\n\r\n    // we check for undefined specifically here to allow falsy values\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    if (wireVersion >= 9 && this.options.comment !== undefined) {\r\n      command.comment = this.options.comment;\r\n    }\r\n\r\n    return command;\r\n  }\r\n}\r\n\r\n/** @public */\r\nexport interface CollectionInfo extends Document {\r\n  name: string;\r\n  type?: string;\r\n  options?: Document;\r\n  info?: {\r\n    readOnly?: false;\r\n    uuid?: Binary;\r\n  };\r\n  idIndex?: Document;\r\n}\r\n\r\ndefineAspects(ListCollectionsOperation, [\r\n  Aspect.READ_OPERATION,\r\n  Aspect.RETRYABLE,\r\n  Aspect.CURSOR_CREATING\r\n]);\r\n"],"mappings":";;;;;;AAIA,MAAAA,OAAA,GAAAC,OAAA;AACA,MAAAC,SAAA,GAAAD,OAAA;AACA,MAAAE,WAAA,GAAAF,OAAA;AAYA;AACA,MAAaG,wBAAyB,SAAQF,SAAA,CAAAG,gBAA0B;EAetEC,YAAYC,EAAM,EAAEC,MAAgB,EAAEC,OAAgC;IACpE,KAAK,CAACF,EAAE,EAAEE,OAAO,CAAC;IAElB,IAAI,CAACA,OAAO,GAAG;MAAE,GAAGA;IAAO,CAAE;IAC7B,OAAO,IAAI,CAACA,OAAO,CAACC,YAAY;IAChC,IAAI,CAACH,EAAE,GAAGA,EAAE;IACZ,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACG,QAAQ,GAAG,CAAC,CAAC,IAAI,CAACF,OAAO,CAACE,QAAQ;IACvC,IAAI,CAACC,qBAAqB,GAAG,CAAC,CAAC,IAAI,CAACH,OAAO,CAACG,qBAAqB;IAEjE,IAAI,OAAO,IAAI,CAACH,OAAO,CAACI,SAAS,KAAK,QAAQ,EAAE;MAC9C,IAAI,CAACA,SAAS,GAAG,IAAI,CAACJ,OAAO,CAACI,SAAS;;EAE3C;EAEA,IAAaC,WAAWA,CAAA;IACtB,OAAO,iBAA0B;EACnC;EAES,MAAMC,OAAOA,CAACC,MAAc,EAAEC,OAAkC;IACvE,OAAO,KAAK,CAACC,cAAc,CAACF,MAAM,EAAEC,OAAO,EAAE,IAAI,CAACE,eAAe,CAAC,IAAAnB,OAAA,CAAAoB,cAAc,EAACJ,MAAM,CAAC,CAAC,CAAC;EAC5F;EAEA;EACAG,eAAeA,CAACE,WAAmB;IACjC,MAAMC,OAAO,GAAa;MACxBC,eAAe,EAAE,CAAC;MAClBf,MAAM,EAAE,IAAI,CAACA,MAAM;MACnBgB,MAAM,EAAE,IAAI,CAACX,SAAS,GAAG;QAAEA,SAAS,EAAE,IAAI,CAACA;MAAS,CAAE,GAAG,EAAE;MAC3DF,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBC,qBAAqB,EAAE,IAAI,CAACA;KAC7B;IAED;IACA;IACA,IAAIS,WAAW,IAAI,CAAC,IAAI,IAAI,CAACZ,OAAO,CAACgB,OAAO,KAAKC,SAAS,EAAE;MAC1DJ,OAAO,CAACG,OAAO,GAAG,IAAI,CAAChB,OAAO,CAACgB,OAAO;;IAGxC,OAAOH,OAAO;EAChB;;AAvDFK,OAAA,CAAAvB,wBAAA,GAAAA,wBAAA;AAsEA,IAAAD,WAAA,CAAAyB,aAAa,EAACxB,wBAAwB,EAAE,CACtCD,WAAA,CAAA0B,MAAM,CAACC,cAAc,EACrB3B,WAAA,CAAA0B,MAAM,CAACE,SAAS,EAChB5B,WAAA,CAAA0B,MAAM,CAACG,eAAe,CACvB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}